// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authn-private.proto

package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountRequest) Reset()      { *m = GetAccountRequest{} }
func (*GetAccountRequest) ProtoMessage() {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{0}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(dst, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAccountResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Locked               bool     `protobuf:"varint,3,opt,name=locked,proto3" json:"locked"`
	Deleted              bool     `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountResponse) Reset()      { *m = GetAccountResponse{} }
func (*GetAccountResponse) ProtoMessage() {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{1}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(dst, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetAccountResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetAccountResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *GetAccountResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type GetAccountResponseEnvelope struct {
	Result               *GetAccountResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetAccountResponseEnvelope) Reset()      { *m = GetAccountResponseEnvelope{} }
func (*GetAccountResponseEnvelope) ProtoMessage() {}
func (*GetAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{2}
}
func (m *GetAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponseEnvelope.Merge(dst, src)
}
func (m *GetAccountResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponseEnvelope proto.InternalMessageInfo

func (m *GetAccountResponseEnvelope) GetResult() *GetAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateAccountRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAccountRequest) Reset()      { *m = UpdateAccountRequest{} }
func (*UpdateAccountRequest) ProtoMessage() {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{3}
}
func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(dst, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdateAccountResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAccountResponse) Reset()      { *m = UpdateAccountResponse{} }
func (*UpdateAccountResponse) ProtoMessage() {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{4}
}
func (m *UpdateAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountResponse.Merge(dst, src)
}
func (m *UpdateAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountResponse proto.InternalMessageInfo

type LockAccountRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockAccountRequest) Reset()      { *m = LockAccountRequest{} }
func (*LockAccountRequest) ProtoMessage() {}
func (*LockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{5}
}
func (m *LockAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAccountRequest.Merge(dst, src)
}
func (m *LockAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockAccountRequest proto.InternalMessageInfo

func (m *LockAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LockAccountResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockAccountResponse) Reset()      { *m = LockAccountResponse{} }
func (*LockAccountResponse) ProtoMessage() {}
func (*LockAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{6}
}
func (m *LockAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAccountResponse.Merge(dst, src)
}
func (m *LockAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockAccountResponse proto.InternalMessageInfo

type UnlockAccountRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockAccountRequest) Reset()      { *m = UnlockAccountRequest{} }
func (*UnlockAccountRequest) ProtoMessage() {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{7}
}
func (m *UnlockAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnlockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountRequest.Merge(dst, src)
}
func (m *UnlockAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountRequest proto.InternalMessageInfo

func (m *UnlockAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UnlockAccountResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockAccountResponse) Reset()      { *m = UnlockAccountResponse{} }
func (*UnlockAccountResponse) ProtoMessage() {}
func (*UnlockAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{8}
}
func (m *UnlockAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnlockAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountResponse.Merge(dst, src)
}
func (m *UnlockAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlockAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountResponse proto.InternalMessageInfo

type ArchiveAccountRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveAccountRequest) Reset()      { *m = ArchiveAccountRequest{} }
func (*ArchiveAccountRequest) ProtoMessage() {}
func (*ArchiveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{9}
}
func (m *ArchiveAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ArchiveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveAccountRequest.Merge(dst, src)
}
func (m *ArchiveAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveAccountRequest proto.InternalMessageInfo

func (m *ArchiveAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ArchiveAccountResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveAccountResponse) Reset()      { *m = ArchiveAccountResponse{} }
func (*ArchiveAccountResponse) ProtoMessage() {}
func (*ArchiveAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{10}
}
func (m *ArchiveAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ArchiveAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveAccountResponse.Merge(dst, src)
}
func (m *ArchiveAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveAccountResponse proto.InternalMessageInfo

type ImportAccountRequst struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Locked               bool     `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportAccountRequst) Reset()      { *m = ImportAccountRequst{} }
func (*ImportAccountRequst) ProtoMessage() {}
func (*ImportAccountRequst) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{11}
}
func (m *ImportAccountRequst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountRequst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountRequst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountRequst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountRequst.Merge(dst, src)
}
func (m *ImportAccountRequst) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountRequst) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountRequst.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountRequst proto.InternalMessageInfo

func (m *ImportAccountRequst) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ImportAccountRequst) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ImportAccountRequst) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type ImportAccountResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportAccountResponse) Reset()      { *m = ImportAccountResponse{} }
func (*ImportAccountResponse) ProtoMessage() {}
func (*ImportAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{12}
}
func (m *ImportAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponse.Merge(dst, src)
}
func (m *ImportAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponse proto.InternalMessageInfo

func (m *ImportAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ImportAccountResponseEnvelope struct {
	Result               *ImportAccountResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ImportAccountResponseEnvelope) Reset()      { *m = ImportAccountResponseEnvelope{} }
func (*ImportAccountResponseEnvelope) ProtoMessage() {}
func (*ImportAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{13}
}
func (m *ImportAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponseEnvelope.Merge(dst, src)
}
func (m *ImportAccountResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponseEnvelope proto.InternalMessageInfo

func (m *ImportAccountResponseEnvelope) GetResult() *ImportAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExpirePasswordRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpirePasswordRequest) Reset()      { *m = ExpirePasswordRequest{} }
func (*ExpirePasswordRequest) ProtoMessage() {}
func (*ExpirePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{14}
}
func (m *ExpirePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpirePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpirePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExpirePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirePasswordRequest.Merge(dst, src)
}
func (m *ExpirePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExpirePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirePasswordRequest proto.InternalMessageInfo

func (m *ExpirePasswordRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExpirePasswordResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpirePasswordResponse) Reset()      { *m = ExpirePasswordResponse{} }
func (*ExpirePasswordResponse) ProtoMessage() {}
func (*ExpirePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{15}
}
func (m *ExpirePasswordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpirePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpirePasswordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExpirePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirePasswordResponse.Merge(dst, src)
}
func (m *ExpirePasswordResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExpirePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirePasswordResponse proto.InternalMessageInfo

type JWKSRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWKSRequest) Reset()      { *m = JWKSRequest{} }
func (*JWKSRequest) ProtoMessage() {}
func (*JWKSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{16}
}
func (m *JWKSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWKSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWKSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JWKSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKSRequest.Merge(dst, src)
}
func (m *JWKSRequest) XXX_Size() int {
	return m.Size()
}
func (m *JWKSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWKSRequest proto.InternalMessageInfo

type Key struct {
	Use                  string   `protobuf:"bytes,1,opt,name=use,proto3" json:"use,omitempty"`
	Alg                  string   `protobuf:"bytes,2,opt,name=alg,proto3" json:"alg,omitempty"`
	Kty                  string   `protobuf:"bytes,3,opt,name=kty,proto3" json:"kty,omitempty"`
	Kid                  string   `protobuf:"bytes,4,opt,name=kid,proto3" json:"kid,omitempty"`
	E                    string   `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	N                    string   `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()      { *m = Key{} }
func (*Key) ProtoMessage() {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{17}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(dst, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetUse() string {
	if m != nil {
		return m.Use
	}
	return ""
}

func (m *Key) GetAlg() string {
	if m != nil {
		return m.Alg
	}
	return ""
}

func (m *Key) GetKty() string {
	if m != nil {
		return m.Kty
	}
	return ""
}

func (m *Key) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *Key) GetE() string {
	if m != nil {
		return m.E
	}
	return ""
}

func (m *Key) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

type JWKSResponse struct {
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWKSResponse) Reset()      { *m = JWKSResponse{} }
func (*JWKSResponse) ProtoMessage() {}
func (*JWKSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{18}
}
func (m *JWKSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWKSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWKSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JWKSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKSResponse.Merge(dst, src)
}
func (m *JWKSResponse) XXX_Size() int {
	return m.Size()
}
func (m *JWKSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWKSResponse proto.InternalMessageInfo

func (m *JWKSResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ServiceStatsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatsRequest) Reset()      { *m = ServiceStatsRequest{} }
func (*ServiceStatsRequest) ProtoMessage() {}
func (*ServiceStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{19}
}
func (m *ServiceStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsRequest.Merge(dst, src)
}
func (m *ServiceStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsRequest proto.InternalMessageInfo

type ServiceStatsResponse struct {
	Actives              *ServiceStatsResponseActiveStats `protobuf:"bytes,1,opt,name=actives" json:"actives,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ServiceStatsResponse) Reset()      { *m = ServiceStatsResponse{} }
func (*ServiceStatsResponse) ProtoMessage() {}
func (*ServiceStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{20}
}
func (m *ServiceStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsResponse.Merge(dst, src)
}
func (m *ServiceStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsResponse proto.InternalMessageInfo

func (m *ServiceStatsResponse) GetActives() *ServiceStatsResponseActiveStats {
	if m != nil {
		return m.Actives
	}
	return nil
}

type ServiceStatsResponseActiveStats struct {
	Daily                map[string]int64 `protobuf:"bytes,1,rep,name=daily" json:"daily,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Weekly               map[string]int64 `protobuf:"bytes,2,rep,name=weekly" json:"weekly,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Monthly              map[string]int64 `protobuf:"bytes,3,rep,name=monthly" json:"monthly,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ServiceStatsResponseActiveStats) Reset()      { *m = ServiceStatsResponseActiveStats{} }
func (*ServiceStatsResponseActiveStats) ProtoMessage() {}
func (*ServiceStatsResponseActiveStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{20, 0}
}
func (m *ServiceStatsResponseActiveStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatsResponseActiveStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatsResponseActiveStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceStatsResponseActiveStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsResponseActiveStats.Merge(dst, src)
}
func (m *ServiceStatsResponseActiveStats) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatsResponseActiveStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsResponseActiveStats.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsResponseActiveStats proto.InternalMessageInfo

func (m *ServiceStatsResponseActiveStats) GetDaily() map[string]int64 {
	if m != nil {
		return m.Daily
	}
	return nil
}

func (m *ServiceStatsResponseActiveStats) GetWeekly() map[string]int64 {
	if m != nil {
		return m.Weekly
	}
	return nil
}

func (m *ServiceStatsResponseActiveStats) GetMonthly() map[string]int64 {
	if m != nil {
		return m.Monthly
	}
	return nil
}

type ServiceConfigurationRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceConfigurationRequest) Reset()      { *m = ServiceConfigurationRequest{} }
func (*ServiceConfigurationRequest) ProtoMessage() {}
func (*ServiceConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{21}
}
func (m *ServiceConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceConfigurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfigurationRequest.Merge(dst, src)
}
func (m *ServiceConfigurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfigurationRequest proto.InternalMessageInfo

type Configuration struct {
	Issuer                           string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ResponseTypesSupported           []string `protobuf:"bytes,2,rep,name=response_types_supported,json=responseTypesSupported" json:"response_types_supported,omitempty"`
	SubjectTypesSupported            []string `protobuf:"bytes,3,rep,name=subject_types_supported,json=subjectTypesSupported" json:"subject_types_supported,omitempty"`
	IdTokenSigningAlgValuesSupported []string `protobuf:"bytes,4,rep,name=id_token_signing_alg_values_supported,json=idTokenSigningAlgValuesSupported" json:"id_token_signing_alg_values_supported,omitempty"`
	ClaimsSupported                  []string `protobuf:"bytes,5,rep,name=claims_supported,json=claimsSupported" json:"claims_supported,omitempty"`
	JwksUri                          string   `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *Configuration) Reset()      { *m = Configuration{} }
func (*Configuration) ProtoMessage() {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_private_edb9a5d80de13700, []int{22}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(dst, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Configuration) GetResponseTypesSupported() []string {
	if m != nil {
		return m.ResponseTypesSupported
	}
	return nil
}

func (m *Configuration) GetSubjectTypesSupported() []string {
	if m != nil {
		return m.SubjectTypesSupported
	}
	return nil
}

func (m *Configuration) GetIdTokenSigningAlgValuesSupported() []string {
	if m != nil {
		return m.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (m *Configuration) GetClaimsSupported() []string {
	if m != nil {
		return m.ClaimsSupported
	}
	return nil
}

func (m *Configuration) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountRequest)(nil), "keratin.authn.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "keratin.authn.GetAccountResponse")
	proto.RegisterType((*GetAccountResponseEnvelope)(nil), "keratin.authn.GetAccountResponseEnvelope")
	proto.RegisterType((*UpdateAccountRequest)(nil), "keratin.authn.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "keratin.authn.UpdateAccountResponse")
	proto.RegisterType((*LockAccountRequest)(nil), "keratin.authn.LockAccountRequest")
	proto.RegisterType((*LockAccountResponse)(nil), "keratin.authn.LockAccountResponse")
	proto.RegisterType((*UnlockAccountRequest)(nil), "keratin.authn.UnlockAccountRequest")
	proto.RegisterType((*UnlockAccountResponse)(nil), "keratin.authn.UnlockAccountResponse")
	proto.RegisterType((*ArchiveAccountRequest)(nil), "keratin.authn.ArchiveAccountRequest")
	proto.RegisterType((*ArchiveAccountResponse)(nil), "keratin.authn.ArchiveAccountResponse")
	proto.RegisterType((*ImportAccountRequst)(nil), "keratin.authn.ImportAccountRequst")
	proto.RegisterType((*ImportAccountResponse)(nil), "keratin.authn.ImportAccountResponse")
	proto.RegisterType((*ImportAccountResponseEnvelope)(nil), "keratin.authn.ImportAccountResponseEnvelope")
	proto.RegisterType((*ExpirePasswordRequest)(nil), "keratin.authn.ExpirePasswordRequest")
	proto.RegisterType((*ExpirePasswordResponse)(nil), "keratin.authn.ExpirePasswordResponse")
	proto.RegisterType((*JWKSRequest)(nil), "keratin.authn.JWKSRequest")
	proto.RegisterType((*Key)(nil), "keratin.authn.Key")
	proto.RegisterType((*JWKSResponse)(nil), "keratin.authn.JWKSResponse")
	proto.RegisterType((*ServiceStatsRequest)(nil), "keratin.authn.ServiceStatsRequest")
	proto.RegisterType((*ServiceStatsResponse)(nil), "keratin.authn.ServiceStatsResponse")
	proto.RegisterType((*ServiceStatsResponseActiveStats)(nil), "keratin.authn.ServiceStatsResponse.active_stats")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.active_stats.DailyEntry")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.active_stats.MonthlyEntry")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.active_stats.WeeklyEntry")
	proto.RegisterType((*ServiceConfigurationRequest)(nil), "keratin.authn.ServiceConfigurationRequest")
	proto.RegisterType((*Configuration)(nil), "keratin.authn.Configuration")
}
func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *GetAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(GetAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *UpdateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountRequest)
	if !ok {
		that2, ok := that.(UpdateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *UpdateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountResponse)
	if !ok {
		that2, ok := that.(UpdateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockAccountRequest)
	if !ok {
		that2, ok := that.(LockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *LockAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockAccountResponse)
	if !ok {
		that2, ok := that.(LockAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnlockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockAccountRequest)
	if !ok {
		that2, ok := that.(UnlockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *UnlockAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockAccountResponse)
	if !ok {
		that2, ok := that.(UnlockAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArchiveAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchiveAccountRequest)
	if !ok {
		that2, ok := that.(ArchiveAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ArchiveAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchiveAccountResponse)
	if !ok {
		that2, ok := that.(ArchiveAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ImportAccountRequst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountRequst)
	if !ok {
		that2, ok := that.(ImportAccountRequst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	return true
}
func (this *ImportAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponse)
	if !ok {
		that2, ok := that.(ImportAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ImportAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(ImportAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ExpirePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpirePasswordRequest)
	if !ok {
		that2, ok := that.(ExpirePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ExpirePasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpirePasswordResponse)
	if !ok {
		that2, ok := that.(ExpirePasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *JWKSRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKSRequest)
	if !ok {
		that2, ok := that.(JWKSRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Use != that1.Use {
		return false
	}
	if this.Alg != that1.Alg {
		return false
	}
	if this.Kty != that1.Kty {
		return false
	}
	if this.Kid != that1.Kid {
		return false
	}
	if this.E != that1.E {
		return false
	}
	if this.N != that1.N {
		return false
	}
	return true
}
func (this *JWKSResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKSResponse)
	if !ok {
		that2, ok := that.(JWKSResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceStatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsRequest)
	if !ok {
		that2, ok := that.(ServiceStatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsResponse)
	if !ok {
		that2, ok := that.(ServiceStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actives.Equal(that1.Actives) {
		return false
	}
	return true
}
func (this *ServiceStatsResponseActiveStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsResponseActiveStats)
	if !ok {
		that2, ok := that.(ServiceStatsResponseActiveStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Daily) != len(that1.Daily) {
		return false
	}
	for i := range this.Daily {
		if this.Daily[i] != that1.Daily[i] {
			return false
		}
	}
	if len(this.Weekly) != len(that1.Weekly) {
		return false
	}
	for i := range this.Weekly {
		if this.Weekly[i] != that1.Weekly[i] {
			return false
		}
	}
	if len(this.Monthly) != len(that1.Monthly) {
		return false
	}
	for i := range this.Monthly {
		if this.Monthly[i] != that1.Monthly[i] {
			return false
		}
	}
	return true
}
func (this *ServiceConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceConfigurationRequest)
	if !ok {
		that2, ok := that.(ServiceConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configuration)
	if !ok {
		that2, ok := that.(Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if len(this.ResponseTypesSupported) != len(that1.ResponseTypesSupported) {
		return false
	}
	for i := range this.ResponseTypesSupported {
		if this.ResponseTypesSupported[i] != that1.ResponseTypesSupported[i] {
			return false
		}
	}
	if len(this.SubjectTypesSupported) != len(that1.SubjectTypesSupported) {
		return false
	}
	for i := range this.SubjectTypesSupported {
		if this.SubjectTypesSupported[i] != that1.SubjectTypesSupported[i] {
			return false
		}
	}
	if len(this.IdTokenSigningAlgValuesSupported) != len(that1.IdTokenSigningAlgValuesSupported) {
		return false
	}
	for i := range this.IdTokenSigningAlgValuesSupported {
		if this.IdTokenSigningAlgValuesSupported[i] != that1.IdTokenSigningAlgValuesSupported[i] {
			return false
		}
	}
	if len(this.ClaimsSupported) != len(that1.ClaimsSupported) {
		return false
	}
	for i := range this.ClaimsSupported {
		if this.ClaimsSupported[i] != that1.ClaimsSupported[i] {
			return false
		}
	}
	if this.JwksUri != that1.JwksUri {
		return false
	}
	return true
}
func (this *GetAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&grpc.GetAccountResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Locked: "+fmt.Sprintf("%#v", this.Locked)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetAccountResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.UpdateAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.UpdateAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.LockAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.LockAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.UnlockAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlockAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.UnlockAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArchiveAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ArchiveAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArchiveAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ArchiveAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountRequst) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.ImportAccountRequst{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Locked: "+fmt.Sprintf("%#v", this.Locked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ImportAccountResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ImportAccountResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpirePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ExpirePasswordRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpirePasswordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ExpirePasswordResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JWKSRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.JWKSRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc.Key{")
	s = append(s, "Use: "+fmt.Sprintf("%#v", this.Use)+",\n")
	s = append(s, "Alg: "+fmt.Sprintf("%#v", this.Alg)+",\n")
	s = append(s, "Kty: "+fmt.Sprintf("%#v", this.Kty)+",\n")
	s = append(s, "Kid: "+fmt.Sprintf("%#v", this.Kid)+",\n")
	s = append(s, "E: "+fmt.Sprintf("%#v", this.E)+",\n")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JWKSResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.JWKSResponse{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceStatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ServiceStatsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceStatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ServiceStatsResponse{")
	if this.Actives != nil {
		s = append(s, "Actives: "+fmt.Sprintf("%#v", this.Actives)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceStatsResponseActiveStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.ServiceStatsResponseActiveStats{")
	keysForDaily := make([]string, 0, len(this.Daily))
	for k, _ := range this.Daily {
		keysForDaily = append(keysForDaily, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDaily)
	mapStringForDaily := "map[string]int64{"
	for _, k := range keysForDaily {
		mapStringForDaily += fmt.Sprintf("%#v: %#v,", k, this.Daily[k])
	}
	mapStringForDaily += "}"
	if this.Daily != nil {
		s = append(s, "Daily: "+mapStringForDaily+",\n")
	}
	keysForWeekly := make([]string, 0, len(this.Weekly))
	for k, _ := range this.Weekly {
		keysForWeekly = append(keysForWeekly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWeekly)
	mapStringForWeekly := "map[string]int64{"
	for _, k := range keysForWeekly {
		mapStringForWeekly += fmt.Sprintf("%#v: %#v,", k, this.Weekly[k])
	}
	mapStringForWeekly += "}"
	if this.Weekly != nil {
		s = append(s, "Weekly: "+mapStringForWeekly+",\n")
	}
	keysForMonthly := make([]string, 0, len(this.Monthly))
	for k, _ := range this.Monthly {
		keysForMonthly = append(keysForMonthly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMonthly)
	mapStringForMonthly := "map[string]int64{"
	for _, k := range keysForMonthly {
		mapStringForMonthly += fmt.Sprintf("%#v: %#v,", k, this.Monthly[k])
	}
	mapStringForMonthly += "}"
	if this.Monthly != nil {
		s = append(s, "Monthly: "+mapStringForMonthly+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceConfigurationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ServiceConfigurationRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Configuration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc.Configuration{")
	s = append(s, "Issuer: "+fmt.Sprintf("%#v", this.Issuer)+",\n")
	s = append(s, "ResponseTypesSupported: "+fmt.Sprintf("%#v", this.ResponseTypesSupported)+",\n")
	s = append(s, "SubjectTypesSupported: "+fmt.Sprintf("%#v", this.SubjectTypesSupported)+",\n")
	s = append(s, "IdTokenSigningAlgValuesSupported: "+fmt.Sprintf("%#v", this.IdTokenSigningAlgValuesSupported)+",\n")
	s = append(s, "ClaimsSupported: "+fmt.Sprintf("%#v", this.ClaimsSupported)+",\n")
	s = append(s, "JwksUri: "+fmt.Sprintf("%#v", this.JwksUri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthnPrivate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnsecuredAdminAuthNClient is the client API for UnsecuredAdminAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnsecuredAdminAuthNClient interface {
	JWKS(ctx context.Context, in *JWKSRequest, opts ...grpc.CallOption) (*JWKSResponse, error)
	ServiceConfiguration(ctx context.Context, in *ServiceConfigurationRequest, opts ...grpc.CallOption) (*Configuration, error)
}

type unsecuredAdminAuthNClient struct {
	cc *grpc.ClientConn
}

func NewUnsecuredAdminAuthNClient(cc *grpc.ClientConn) UnsecuredAdminAuthNClient {
	return &unsecuredAdminAuthNClient{cc}
}

func (c *unsecuredAdminAuthNClient) JWKS(ctx context.Context, in *JWKSRequest, opts ...grpc.CallOption) (*JWKSResponse, error) {
	out := new(JWKSResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.UnsecuredAdminAuthN/JWKS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsecuredAdminAuthNClient) ServiceConfiguration(ctx context.Context, in *ServiceConfigurationRequest, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/keratin.authn.UnsecuredAdminAuthN/ServiceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnsecuredAdminAuthNServer is the server API for UnsecuredAdminAuthN service.
type UnsecuredAdminAuthNServer interface {
	JWKS(context.Context, *JWKSRequest) (*JWKSResponse, error)
	ServiceConfiguration(context.Context, *ServiceConfigurationRequest) (*Configuration, error)
}

func RegisterUnsecuredAdminAuthNServer(s *grpc.Server, srv UnsecuredAdminAuthNServer) {
	s.RegisterService(&_UnsecuredAdminAuthN_serviceDesc, srv)
}

func _UnsecuredAdminAuthN_JWKS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWKSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsecuredAdminAuthNServer).JWKS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.UnsecuredAdminAuthN/JWKS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsecuredAdminAuthNServer).JWKS(ctx, req.(*JWKSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsecuredAdminAuthN_ServiceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsecuredAdminAuthNServer).ServiceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.UnsecuredAdminAuthN/ServiceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsecuredAdminAuthNServer).ServiceConfiguration(ctx, req.(*ServiceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnsecuredAdminAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.UnsecuredAdminAuthN",
	HandlerType: (*UnsecuredAdminAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JWKS",
			Handler:    _UnsecuredAdminAuthN_JWKS_Handler,
		},
		{
			MethodName: "ServiceConfiguration",
			Handler:    _UnsecuredAdminAuthN_ServiceConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

// SecuredAdminAuthNClient is the client API for SecuredAdminAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecuredAdminAuthNClient interface {
	ImportAccount(ctx context.Context, in *ImportAccountRequst, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error)
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error)
	ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*ArchiveAccountResponse, error)
	ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*ExpirePasswordResponse, error)
}

type securedAdminAuthNClient struct {
	cc *grpc.ClientConn
}

func NewSecuredAdminAuthNClient(cc *grpc.ClientConn) SecuredAdminAuthNClient {
	return &securedAdminAuthNClient{cc}
}

func (c *securedAdminAuthNClient) ImportAccount(ctx context.Context, in *ImportAccountRequst, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error) {
	out := new(ImportAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ImportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error) {
	out := new(GetAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error) {
	out := new(LockAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error) {
	out := new(UnlockAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*ArchiveAccountResponse, error) {
	out := new(ArchiveAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ArchiveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*ExpirePasswordResponse, error) {
	out := new(ExpirePasswordResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ExpirePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecuredAdminAuthNServer is the server API for SecuredAdminAuthN service.
type SecuredAdminAuthNServer interface {
	ImportAccount(context.Context, *ImportAccountRequst) (*ImportAccountResponseEnvelope, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponseEnvelope, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error)
	UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error)
	ArchiveAccount(context.Context, *ArchiveAccountRequest) (*ArchiveAccountResponse, error)
	ExpirePassword(context.Context, *ExpirePasswordRequest) (*ExpirePasswordResponse, error)
}

func RegisterSecuredAdminAuthNServer(s *grpc.Server, srv SecuredAdminAuthNServer) {
	s.RegisterService(&_SecuredAdminAuthN_serviceDesc, srv)
}

func _SecuredAdminAuthN_ImportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ImportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ImportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ImportAccount(ctx, req.(*ImportAccountRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_ArchiveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ArchiveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ArchiveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ArchiveAccount(ctx, req.(*ArchiveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_ExpirePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpirePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ExpirePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ExpirePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ExpirePassword(ctx, req.(*ExpirePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecuredAdminAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.SecuredAdminAuthN",
	HandlerType: (*SecuredAdminAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAccount",
			Handler:    _SecuredAdminAuthN_ImportAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _SecuredAdminAuthN_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _SecuredAdminAuthN_UpdateAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _SecuredAdminAuthN_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _SecuredAdminAuthN_UnlockAccount_Handler,
		},
		{
			MethodName: "ArchiveAccount",
			Handler:    _SecuredAdminAuthN_ArchiveAccount_Handler,
		},
		{
			MethodName: "ExpirePassword",
			Handler:    _SecuredAdminAuthN_ExpirePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

// AuthNActivesClient is the client API for AuthNActives service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthNActivesClient interface {
	ServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error)
}

type authNActivesClient struct {
	cc *grpc.ClientConn
}

func NewAuthNActivesClient(cc *grpc.ClientConn) AuthNActivesClient {
	return &authNActivesClient{cc}
}

func (c *authNActivesClient) ServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error) {
	out := new(ServiceStatsResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.AuthNActives/ServiceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthNActivesServer is the server API for AuthNActives service.
type AuthNActivesServer interface {
	ServiceStats(context.Context, *ServiceStatsRequest) (*ServiceStatsResponse, error)
}

func RegisterAuthNActivesServer(s *grpc.Server, srv AuthNActivesServer) {
	s.RegisterService(&_AuthNActives_serviceDesc, srv)
}

func _AuthNActives_ServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNActivesServer).ServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.AuthNActives/ServiceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNActivesServer).ServiceStats(ctx, req.(*ServiceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthNActives_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.AuthNActives",
	HandlerType: (*AuthNActivesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceStats",
			Handler:    _AuthNActives_ServiceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

func (m *GetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Locked {
		dAtA[i] = 0x18
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x20
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetAccountResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Result.Size()))
		n1, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UpdateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *UpdateAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LockAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *LockAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnlockAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *UnlockAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ArchiveAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ArchiveAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ImportAccountRequst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountRequst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Locked {
		dAtA[i] = 0x18
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImportAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ImportAccountResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Result.Size()))
		n2, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ExpirePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpirePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ExpirePasswordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpirePasswordResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *JWKSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWKSRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Use) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Use)))
		i += copy(dAtA[i:], m.Use)
	}
	if len(m.Alg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Alg)))
		i += copy(dAtA[i:], m.Alg)
	}
	if len(m.Kty) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Kty)))
		i += copy(dAtA[i:], m.Kty)
	}
	if len(m.Kid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func (m *JWKSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWKSResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ServiceStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Actives != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(m.Actives.Size()))
		n3, err := m.Actives.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ServiceStatsResponseActiveStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatsResponseActiveStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Daily) > 0 {
		for k, _ := range m.Daily {
			dAtA[i] = 0xa
			i++
			v := m.Daily[k]
			mapSize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(v))
		}
	}
	if len(m.Weekly) > 0 {
		for k, _ := range m.Weekly {
			dAtA[i] = 0x12
			i++
			v := m.Weekly[k]
			mapSize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(v))
		}
	}
	if len(m.Monthly) > 0 {
		for k, _ := range m.Monthly {
			dAtA[i] = 0x1a
			i++
			v := m.Monthly[k]
			mapSize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintAuthnPrivate(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ServiceConfigurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceConfigurationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if len(m.ResponseTypesSupported) > 0 {
		for _, s := range m.ResponseTypesSupported {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for _, s := range m.SubjectTypesSupported {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenSigningAlgValuesSupported {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClaimsSupported) > 0 {
		for _, s := range m.ClaimsSupported {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.JwksUri) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthnPrivate(dAtA, i, uint64(len(m.JwksUri)))
		i += copy(dAtA[i:], m.JwksUri)
	}
	return i, nil
}

func encodeVarintAuthnPrivate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetAccountRequest(r randyAuthnPrivate, easy bool) *GetAccountRequest {
	this := &GetAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAccountResponse(r randyAuthnPrivate, easy bool) *GetAccountResponse {
	this := &GetAccountResponse{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Username = string(randStringAuthnPrivate(r))
	this.Locked = bool(bool(r.Intn(2) == 0))
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAccountResponseEnvelope(r randyAuthnPrivate, easy bool) *GetAccountResponseEnvelope {
	this := &GetAccountResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedGetAccountResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAccountRequest(r randyAuthnPrivate, easy bool) *UpdateAccountRequest {
	this := &UpdateAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Username = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAccountResponse(r randyAuthnPrivate, easy bool) *UpdateAccountResponse {
	this := &UpdateAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLockAccountRequest(r randyAuthnPrivate, easy bool) *LockAccountRequest {
	this := &LockAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLockAccountResponse(r randyAuthnPrivate, easy bool) *LockAccountResponse {
	this := &LockAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnlockAccountRequest(r randyAuthnPrivate, easy bool) *UnlockAccountRequest {
	this := &UnlockAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnlockAccountResponse(r randyAuthnPrivate, easy bool) *UnlockAccountResponse {
	this := &UnlockAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArchiveAccountRequest(r randyAuthnPrivate, easy bool) *ArchiveAccountRequest {
	this := &ArchiveAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArchiveAccountResponse(r randyAuthnPrivate, easy bool) *ArchiveAccountResponse {
	this := &ArchiveAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountRequst(r randyAuthnPrivate, easy bool) *ImportAccountRequst {
	this := &ImportAccountRequst{}
	this.Username = string(randStringAuthnPrivate(r))
	this.Password = string(randStringAuthnPrivate(r))
	this.Locked = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountResponse(r randyAuthnPrivate, easy bool) *ImportAccountResponse {
	this := &ImportAccountResponse{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountResponseEnvelope(r randyAuthnPrivate, easy bool) *ImportAccountResponseEnvelope {
	this := &ImportAccountResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedImportAccountResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExpirePasswordRequest(r randyAuthnPrivate, easy bool) *ExpirePasswordRequest {
	this := &ExpirePasswordRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExpirePasswordResponse(r randyAuthnPrivate, easy bool) *ExpirePasswordResponse {
	this := &ExpirePasswordResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJWKSRequest(r randyAuthnPrivate, easy bool) *JWKSRequest {
	this := &JWKSRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKey(r randyAuthnPrivate, easy bool) *Key {
	this := &Key{}
	this.Use = string(randStringAuthnPrivate(r))
	this.Alg = string(randStringAuthnPrivate(r))
	this.Kty = string(randStringAuthnPrivate(r))
	this.Kid = string(randStringAuthnPrivate(r))
	this.E = string(randStringAuthnPrivate(r))
	this.N = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJWKSResponse(r randyAuthnPrivate, easy bool) *JWKSResponse {
	this := &JWKSResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Keys = make([]*Key, v1)
		for i := 0; i < v1; i++ {
			this.Keys[i] = NewPopulatedKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsRequest(r randyAuthnPrivate, easy bool) *ServiceStatsRequest {
	this := &ServiceStatsRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsResponse(r randyAuthnPrivate, easy bool) *ServiceStatsResponse {
	this := &ServiceStatsResponse{}
	if r.Intn(10) != 0 {
		this.Actives = NewPopulatedServiceStatsResponseActiveStats(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsResponseActiveStats(r randyAuthnPrivate, easy bool) *ServiceStatsResponseActiveStats {
	this := &ServiceStatsResponseActiveStats{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Daily = make(map[string]int64)
		for i := 0; i < v2; i++ {
			v3 := randStringAuthnPrivate(r)
			this.Daily[v3] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Daily[v3] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Weekly = make(map[string]int64)
		for i := 0; i < v4; i++ {
			v5 := randStringAuthnPrivate(r)
			this.Weekly[v5] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Weekly[v5] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Monthly = make(map[string]int64)
		for i := 0; i < v6; i++ {
			v7 := randStringAuthnPrivate(r)
			this.Monthly[v7] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Monthly[v7] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceConfigurationRequest(r randyAuthnPrivate, easy bool) *ServiceConfigurationRequest {
	this := &ServiceConfigurationRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConfiguration(r randyAuthnPrivate, easy bool) *Configuration {
	this := &Configuration{}
	this.Issuer = string(randStringAuthnPrivate(r))
	v8 := r.Intn(10)
	this.ResponseTypesSupported = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.ResponseTypesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v9 := r.Intn(10)
	this.SubjectTypesSupported = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.SubjectTypesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v10 := r.Intn(10)
	this.IdTokenSigningAlgValuesSupported = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.IdTokenSigningAlgValuesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v11 := r.Intn(10)
	this.ClaimsSupported = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.ClaimsSupported[i] = string(randStringAuthnPrivate(r))
	}
	this.JwksUri = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAuthnPrivate interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAuthnPrivate(r randyAuthnPrivate) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAuthnPrivate(r randyAuthnPrivate) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneAuthnPrivate(r)
	}
	return string(tmps)
}
func randUnrecognizedAuthnPrivate(r randyAuthnPrivate, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAuthnPrivate(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAuthnPrivate(dAtA []byte, r randyAuthnPrivate, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAuthnPrivate(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetAccountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *GetAccountResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func (m *UpdateAccountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func (m *UpdateAccountResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LockAccountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *LockAccountResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UnlockAccountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *UnlockAccountResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ArchiveAccountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *ArchiveAccountResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ImportAccountRequst) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	return n
}

func (m *ImportAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *ImportAccountResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func (m *ExpirePasswordRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthnPrivate(uint64(m.Id))
	}
	return n
}

func (m *ExpirePasswordResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *JWKSRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.Use)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.Alg)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.Kty)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func (m *JWKSResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovAuthnPrivate(uint64(l))
		}
	}
	return n
}

func (m *ServiceStatsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ServiceStatsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Actives != nil {
		l = m.Actives.Size()
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func (m *ServiceStatsResponseActiveStats) Size() (n int) {
	var l int
	_ = l
	if len(m.Daily) > 0 {
		for k, v := range m.Daily {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			n += mapEntrySize + 1 + sovAuthnPrivate(uint64(mapEntrySize))
		}
	}
	if len(m.Weekly) > 0 {
		for k, v := range m.Weekly {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			n += mapEntrySize + 1 + sovAuthnPrivate(uint64(mapEntrySize))
		}
	}
	if len(m.Monthly) > 0 {
		for k, v := range m.Monthly {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAuthnPrivate(uint64(len(k))) + 1 + sovAuthnPrivate(uint64(v))
			n += mapEntrySize + 1 + sovAuthnPrivate(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ServiceConfigurationRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Configuration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	if len(m.ResponseTypesSupported) > 0 {
		for _, s := range m.ResponseTypesSupported {
			l = len(s)
			n += 1 + l + sovAuthnPrivate(uint64(l))
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for _, s := range m.SubjectTypesSupported {
			l = len(s)
			n += 1 + l + sovAuthnPrivate(uint64(l))
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenSigningAlgValuesSupported {
			l = len(s)
			n += 1 + l + sovAuthnPrivate(uint64(l))
		}
	}
	if len(m.ClaimsSupported) > 0 {
		for _, s := range m.ClaimsSupported {
			l = len(s)
			n += 1 + l + sovAuthnPrivate(uint64(l))
		}
	}
	l = len(m.JwksUri)
	if l > 0 {
		n += 1 + l + sovAuthnPrivate(uint64(l))
	}
	return n
}

func sovAuthnPrivate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthnPrivate(x uint64) (n int) {
	return sovAuthnPrivate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "GetAccountResponse", "GetAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UnlockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlockAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ArchiveAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchiveAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArchiveAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchiveAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountRequst) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountRequst{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ImportAccountResponse", "ImportAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpirePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpirePasswordRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpirePasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpirePasswordResponse{`,
		`}`,
	}, "")
	return s
}
func (this *JWKSRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKSRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Key{`,
		`Use:` + fmt.Sprintf("%v", this.Use) + `,`,
		`Alg:` + fmt.Sprintf("%v", this.Alg) + `,`,
		`Kty:` + fmt.Sprintf("%v", this.Kty) + `,`,
		`Kid:` + fmt.Sprintf("%v", this.Kid) + `,`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`N:` + fmt.Sprintf("%v", this.N) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWKSResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKSResponse{`,
		`Keys:` + strings.Replace(fmt.Sprintf("%v", this.Keys), "Key", "Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceStatsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceStatsResponse{`,
		`Actives:` + strings.Replace(fmt.Sprintf("%v", this.Actives), "ServiceStatsResponseActiveStats", "ServiceStatsResponseActiveStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsResponseActiveStats) String() string {
	if this == nil {
		return "nil"
	}
	keysForDaily := make([]string, 0, len(this.Daily))
	for k, _ := range this.Daily {
		keysForDaily = append(keysForDaily, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDaily)
	mapStringForDaily := "map[string]int64{"
	for _, k := range keysForDaily {
		mapStringForDaily += fmt.Sprintf("%v: %v,", k, this.Daily[k])
	}
	mapStringForDaily += "}"
	keysForWeekly := make([]string, 0, len(this.Weekly))
	for k, _ := range this.Weekly {
		keysForWeekly = append(keysForWeekly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWeekly)
	mapStringForWeekly := "map[string]int64{"
	for _, k := range keysForWeekly {
		mapStringForWeekly += fmt.Sprintf("%v: %v,", k, this.Weekly[k])
	}
	mapStringForWeekly += "}"
	keysForMonthly := make([]string, 0, len(this.Monthly))
	for k, _ := range this.Monthly {
		keysForMonthly = append(keysForMonthly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMonthly)
	mapStringForMonthly := "map[string]int64{"
	for _, k := range keysForMonthly {
		mapStringForMonthly += fmt.Sprintf("%v: %v,", k, this.Monthly[k])
	}
	mapStringForMonthly += "}"
	s := strings.Join([]string{`&ServiceStatsResponseActiveStats{`,
		`Daily:` + mapStringForDaily + `,`,
		`Weekly:` + mapStringForWeekly + `,`,
		`Monthly:` + mapStringForMonthly + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConfigurationRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Configuration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configuration{`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`ResponseTypesSupported:` + fmt.Sprintf("%v", this.ResponseTypesSupported) + `,`,
		`SubjectTypesSupported:` + fmt.Sprintf("%v", this.SubjectTypesSupported) + `,`,
		`IdTokenSigningAlgValuesSupported:` + fmt.Sprintf("%v", this.IdTokenSigningAlgValuesSupported) + `,`,
		`ClaimsSupported:` + fmt.Sprintf("%v", this.ClaimsSupported) + `,`,
		`JwksUri:` + fmt.Sprintf("%v", this.JwksUri) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthnPrivate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &GetAccountResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountRequst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountRequst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountRequst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ImportAccountResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpirePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpirePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpirePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpirePasswordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpirePasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpirePasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWKSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWKSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWKSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Use = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWKSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWKSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWKSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actives == nil {
				m.Actives = &ServiceStatsResponseActiveStats{}
			}
			if err := m.Actives.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatsResponseActiveStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: active_stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: active_stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Daily == nil {
				m.Daily = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthnPrivate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Daily[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weekly == nil {
				m.Weekly = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthnPrivate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Weekly[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monthly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monthly == nil {
				m.Monthly = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthnPrivate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthnPrivate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAuthnPrivate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Monthly[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceConfigurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseTypesSupported = append(m.ResponseTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectTypesSupported = append(m.SubjectTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTokenSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTokenSigningAlgValuesSupported = append(m.IdTokenSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsSupported = append(m.ClaimsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthnPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthnPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthnPrivate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthnPrivate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthnPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthnPrivate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthnPrivate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthnPrivate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthnPrivate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthnPrivate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authn-private.proto", fileDescriptor_authn_private_edb9a5d80de13700) }

var fileDescriptor_authn_private_edb9a5d80de13700 = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xd8, 0x89, 0x93, 0xbe, 0xfc, 0xf8, 0xa6, 0x93, 0x38, 0xf5, 0x77, 0xdb, 0x6e, 0xcd,
	0xf6, 0x57, 0x5a, 0xb5, 0x76, 0x65, 0xa4, 0xa8, 0x0d, 0xe5, 0xe0, 0x40, 0x05, 0xb4, 0x50, 0xc0,
	0x6e, 0x88, 0x14, 0x09, 0x59, 0x9b, 0xdd, 0xe9, 0x66, 0xea, 0xf5, 0xee, 0x76, 0x77, 0xd6, 0xa9,
	0x85, 0x40, 0x88, 0x13, 0x12, 0x17, 0x04, 0x17, 0xfe, 0x02, 0xe0, 0xc8, 0x91, 0x2b, 0x37, 0x8e,
	0x95, 0xb8, 0x70, 0x2a, 0xc4, 0x70, 0x40, 0x39, 0xf5, 0xc8, 0x11, 0xed, 0xec, 0xac, 0xbd, 0xbb,
	0xde, 0xda, 0xcd, 0xc9, 0x3b, 0xf3, 0x3e, 0x9f, 0xcf, 0x7b, 0xf3, 0xe6, 0xcd, 0xcc, 0x33, 0xac,
	0xa8, 0x3e, 0xdb, 0xb7, 0xae, 0x3b, 0x2e, 0xed, 0xaa, 0x8c, 0x54, 0x1c, 0xd7, 0x66, 0x36, 0x5e,
	0x6c, 0x13, 0x57, 0x65, 0xd4, 0xaa, 0x70, 0xa3, 0x74, 0xdd, 0xa0, 0x6c, 0xdf, 0xdf, 0xab, 0x68,
	0x76, 0xa7, 0x6a, 0xd8, 0x86, 0x5d, 0xe5, 0xa8, 0x3d, 0xff, 0x21, 0x1f, 0xf1, 0x01, 0xff, 0x0a,
	0xd9, 0xd2, 0x19, 0xc3, 0xb6, 0x0d, 0x93, 0x54, 0x55, 0x87, 0x56, 0x55, 0xcb, 0xb2, 0x99, 0xca,
	0xa8, 0x6d, 0x79, 0xa1, 0x55, 0x39, 0x0f, 0x27, 0xdf, 0x22, 0xac, 0xae, 0x69, 0xb6, 0x6f, 0xb1,
	0x06, 0x79, 0xec, 0x13, 0x8f, 0xe1, 0x25, 0xc8, 0x51, 0xbd, 0x84, 0xca, 0x68, 0x3d, 0xdf, 0xc8,
	0x51, 0x5d, 0xf9, 0x0a, 0x01, 0x8e, 0xa3, 0x3c, 0xc7, 0xb6, 0x3c, 0x92, 0x86, 0x61, 0x09, 0xe6,
	0x7c, 0x8f, 0xb8, 0x96, 0xda, 0x21, 0xa5, 0x5c, 0x19, 0xad, 0x9f, 0x68, 0x0c, 0xc6, 0x58, 0x81,
	0x82, 0x69, 0x6b, 0x6d, 0xa2, 0x97, 0xf2, 0x65, 0xb4, 0x3e, 0xb7, 0x05, 0x47, 0xcf, 0xce, 0x89,
	0x99, 0x86, 0xf8, 0xc5, 0x17, 0x61, 0x56, 0x27, 0x26, 0x61, 0x44, 0x2f, 0x4d, 0x73, 0xd0, 0xfc,
	0xd1, 0xb3, 0x73, 0xd1, 0x54, 0x23, 0xfa, 0x50, 0x76, 0x40, 0x1a, 0x0d, 0xe6, 0x8e, 0xd5, 0x25,
	0xa6, 0xed, 0x10, 0x7c, 0x0b, 0x0a, 0x2e, 0xf1, 0x7c, 0x93, 0xf1, 0xc0, 0xe6, 0x6b, 0xaf, 0x54,
	0x12, 0xd9, 0xab, 0x8c, 0x52, 0x1b, 0x82, 0xa0, 0x6c, 0xc1, 0xea, 0xb6, 0xa3, 0xab, 0x8c, 0x8c,
	0x4f, 0xc7, 0xb8, 0x75, 0x2a, 0xa7, 0xa0, 0x98, 0xd2, 0x08, 0x9d, 0x28, 0x17, 0x00, 0xbf, 0x6b,
	0x6b, 0xed, 0x09, 0x99, 0x2e, 0xc2, 0x4a, 0x02, 0x25, 0xc8, 0x97, 0x60, 0x75, 0xdb, 0x32, 0x27,
	0xd3, 0x03, 0xef, 0x49, 0x9c, 0x10, 0xb8, 0x0c, 0xc5, 0xba, 0xab, 0xed, 0xd3, 0xee, 0x84, 0xb5,
	0x29, 0x25, 0x58, 0x4b, 0x03, 0x85, 0x04, 0x81, 0x95, 0x77, 0x3a, 0x8e, 0xed, 0xc6, 0x8b, 0xc5,
	0x63, 0x89, 0x64, 0xa0, 0xd4, 0xa6, 0x4b, 0x30, 0xe7, 0xa8, 0x9e, 0x77, 0x60, 0xbb, 0x7a, 0x94,
	0xa8, 0x68, 0x8c, 0xd7, 0x92, 0x05, 0x11, 0x15, 0x81, 0x52, 0x85, 0x62, 0xca, 0x8d, 0xa8, 0xb6,
	0xb5, 0x61, 0xa4, 0x5b, 0x85, 0xa3, 0x67, 0xe7, 0x72, 0x54, 0xe7, 0x11, 0x7f, 0x0c, 0x67, 0x33,
	0x09, 0x83, 0x8a, 0xb8, 0x9d, 0xaa, 0x88, 0x0b, 0xa9, 0x8a, 0xc8, 0x64, 0x0f, 0x8a, 0xe2, 0x32,
	0x14, 0xef, 0x3c, 0x71, 0xa8, 0x4b, 0x3e, 0x10, 0x91, 0x8f, 0xc9, 0x5c, 0x1a, 0x28, 0x32, 0xb7,
	0x08, 0xf3, 0x77, 0x77, 0xee, 0x35, 0x05, 0x51, 0xa1, 0x90, 0xbf, 0x47, 0x7a, 0x78, 0x19, 0xf2,
	0xbe, 0x17, 0xe5, 0x2c, 0xf8, 0x0c, 0x66, 0x54, 0xd3, 0x10, 0x99, 0x0a, 0x3e, 0x83, 0x99, 0x36,
	0xeb, 0xf1, 0x0c, 0x9d, 0x68, 0x04, 0x9f, 0x7c, 0x86, 0x86, 0xe7, 0x23, 0x98, 0xa1, 0x3a, 0x5e,
	0x00, 0x44, 0x4a, 0x33, 0x7c, 0x8c, 0x48, 0x30, 0xb2, 0x4a, 0x85, 0x70, 0x64, 0x29, 0x1b, 0xb0,
	0x10, 0x7a, 0x16, 0x39, 0xbc, 0x04, 0xd3, 0x6d, 0xd2, 0xf3, 0x4a, 0xa8, 0x9c, 0x5f, 0x9f, 0xaf,
	0xe1, 0x54, 0x22, 0xee, 0x91, 0x5e, 0x83, 0xdb, 0x83, 0x32, 0x6c, 0x12, 0xb7, 0x4b, 0x35, 0xd2,
	0x64, 0x2a, 0xf3, 0xa2, 0xc8, 0xbf, 0x9f, 0x86, 0xd5, 0xe4, 0xbc, 0xd0, 0xbd, 0x0b, 0xb3, 0xaa,
	0xc6, 0x68, 0x97, 0x78, 0x22, 0xc7, 0x37, 0x52, 0xd2, 0x59, 0xac, 0x4a, 0x48, 0x69, 0x79, 0x7c,
	0x32, 0x12, 0x90, 0x7e, 0xc9, 0xc3, 0x42, 0xdc, 0x82, 0x3f, 0x84, 0x19, 0x5d, 0xa5, 0x66, 0x4f,
	0x44, 0xfd, 0xda, 0x71, 0xa5, 0x2b, 0x6f, 0x06, 0xec, 0x3b, 0x16, 0x73, 0x7b, 0x8d, 0x50, 0x09,
	0x3f, 0x80, 0xc2, 0x01, 0x21, 0x6d, 0xb3, 0x57, 0xca, 0x71, 0xcd, 0xdb, 0xc7, 0xd6, 0xdc, 0xe1,
	0xf4, 0x50, 0x54, 0x68, 0xe1, 0x1d, 0x98, 0xed, 0xd8, 0x16, 0xdb, 0x37, 0x83, 0x1d, 0x0b, 0x64,
	0x5f, 0x3f, 0xb6, 0xec, 0x7b, 0x21, 0x3f, 0xd4, 0x8d, 0xd4, 0xa4, 0x9b, 0x00, 0xc3, 0x35, 0xf0,
	0x12, 0x20, 0xbd, 0xa8, 0x70, 0xda, 0xa4, 0x87, 0x57, 0x61, 0xa6, 0xab, 0x9a, 0x7e, 0x78, 0x1b,
	0xe5, 0x1b, 0xe1, 0x60, 0x33, 0x77, 0x13, 0x49, 0xb7, 0x60, 0x3e, 0x16, 0xe9, 0xb1, 0xa8, 0x9b,
	0xb0, 0x10, 0x8f, 0xe6, 0x38, 0x5c, 0xe5, 0x2c, 0x9c, 0x16, 0x6b, 0x7d, 0xc3, 0xb6, 0x1e, 0x52,
	0xc3, 0x77, 0xf9, 0xa3, 0x13, 0xd5, 0xd1, 0x4f, 0x39, 0x58, 0x4c, 0x18, 0x82, 0xdb, 0x80, 0x7a,
	0x9e, 0x4f, 0x5c, 0xa1, 0x2f, 0x46, 0xf8, 0x26, 0x94, 0x5c, 0x91, 0xa8, 0x16, 0xeb, 0x39, 0xc4,
	0x6b, 0x79, 0xbe, 0x13, 0x1c, 0x57, 0xa2, 0xf3, 0xad, 0x3b, 0xd1, 0x58, 0x8b, 0xec, 0x0f, 0x02,
	0x73, 0x33, 0xb2, 0xe2, 0x0d, 0x38, 0xe5, 0xf9, 0x7b, 0x8f, 0x88, 0xc6, 0x46, 0x88, 0x79, 0x4e,
	0x2c, 0x0a, 0x73, 0x8a, 0xf7, 0x3e, 0x5c, 0xa4, 0x7a, 0x8b, 0xd9, 0x6d, 0x62, 0xb5, 0x3c, 0x6a,
	0x58, 0xd4, 0x32, 0x5a, 0xaa, 0x69, 0xb4, 0xf8, 0xe2, 0xe2, 0x2a, 0xd3, 0x5c, 0xa5, 0x4c, 0xf5,
	0x07, 0x01, 0xb6, 0x19, 0x42, 0xeb, 0xa6, 0xf1, 0x11, 0x07, 0x0e, 0x05, 0xaf, 0xc0, 0xb2, 0x66,
	0xaa, 0xb4, 0x13, 0xe7, 0xce, 0x70, 0xee, 0xff, 0xc2, 0xf9, 0x21, 0xf4, 0xff, 0x30, 0xf7, 0xe8,
	0xa0, 0xed, 0xb5, 0x7c, 0x97, 0x8a, 0x33, 0x3c, 0x1b, 0x8c, 0xb7, 0x5d, 0x5a, 0xfb, 0x03, 0xc1,
	0xca, 0xb6, 0xe5, 0x11, 0xcd, 0x77, 0x89, 0x5e, 0xd7, 0x3b, 0xd4, 0xaa, 0xfb, 0x6c, 0xff, 0x3e,
	0xbe, 0x0f, 0xd3, 0xc1, 0x09, 0xc7, 0x52, 0xaa, 0xd4, 0x62, 0x17, 0x8e, 0x74, 0x3a, 0xd3, 0x16,
	0x5d, 0x4e, 0x5f, 0xfc, 0xf6, 0xf7, 0xb7, 0xb9, 0x59, 0x3c, 0x53, 0x0d, 0x5c, 0xe1, 0x27, 0x83,
	0x13, 0x9e, 0xdc, 0xa0, 0xab, 0xd9, 0xa5, 0x9c, 0xb5, 0xbd, 0xd2, 0x99, 0x14, 0x36, 0x01, 0x52,
	0xd6, 0xb8, 0xc3, 0x65, 0xbc, 0x54, 0xd5, 0xe2, 0xf3, 0xb5, 0xfe, 0x2c, 0x9c, 0x6c, 0x8e, 0xac,
	0xef, 0x33, 0x58, 0x4c, 0xdc, 0xcf, 0x58, 0x19, 0x7f, 0x7b, 0x07, 0x6f, 0x92, 0x74, 0xed, 0x65,
	0x6e, 0xf8, 0xe8, 0x7d, 0x50, 0x4e, 0xf3, 0x80, 0x8a, 0xca, 0x72, 0x55, 0x0d, 0x11, 0x5e, 0x95,
	0x72, 0xc2, 0x26, 0xba, 0x8a, 0x1f, 0x03, 0x0c, 0x3b, 0x06, 0x5c, 0x1e, 0xd3, 0x4c, 0x84, 0x6b,
	0xbf, 0x32, 0xb1, 0xdd, 0x18, 0xf8, 0x1d, 0x26, 0x62, 0xe0, 0xf7, 0x13, 0xaa, 0x7f, 0x8a, 0xbf,
	0x43, 0xb0, 0x98, 0xe8, 0x21, 0xf0, 0xf9, 0x94, 0x68, 0x56, 0x97, 0x22, 0x5d, 0x18, 0x0f, 0x12,
	0xdb, 0x7d, 0x9b, 0x3b, 0xdd, 0x90, 0x52, 0x4e, 0x37, 0x07, 0x8f, 0xf6, 0xae, 0x54, 0x7b, 0xa1,
	0x0d, 0x7f, 0x89, 0x60, 0x3e, 0xd6, 0x9f, 0xe0, 0x74, 0x73, 0x35, 0xda, 0xe1, 0x48, 0xca, 0x38,
	0x88, 0x08, 0xaa, 0xc6, 0x83, 0xba, 0x26, 0xad, 0x24, 0x1d, 0x57, 0x83, 0x96, 0x60, 0xb7, 0x58,
	0xcb, 0x9a, 0xc6, 0xdf, 0x04, 0x59, 0x8a, 0xf7, 0x3a, 0xa3, 0x59, 0xca, 0xe8, 0x98, 0x46, 0xb3,
	0x94, 0xd9, 0x2e, 0x6d, 0xf0, 0x80, 0x6e, 0x48, 0xc5, 0x94, 0x67, 0x9f, 0xa3, 0x77, 0x4f, 0xd5,
	0xb2, 0x0d, 0xd8, 0x87, 0xa5, 0x64, 0xf7, 0x84, 0xd3, 0xfe, 0x32, 0xbb, 0x30, 0xe9, 0xe2, 0x04,
	0x94, 0x08, 0x4b, 0x54, 0xcc, 0xd5, 0x74, 0xc5, 0xfc, 0x80, 0x60, 0x29, 0xd9, 0x7b, 0x8c, 0xf8,
	0xcd, 0xec, 0x61, 0x46, 0xfc, 0xbe, 0xa0, 0x81, 0x79, 0x9b, 0xfb, 0xdd, 0x92, 0xe4, 0xd4, 0xaa,
	0x09, 0x87, 0xb7, 0xa2, 0x9e, 0x6e, 0xb7, 0x5c, 0x9b, 0x80, 0xa8, 0x1d, 0xc0, 0x02, 0x3f, 0xd7,
	0xf5, 0xf0, 0xb1, 0xc7, 0x06, 0x2c, 0xc4, 0x1f, 0xc5, 0x91, 0xd3, 0x9d, 0xd1, 0x85, 0x48, 0xe7,
	0x5f, 0xe2, 0x55, 0x55, 0x96, 0x78, 0xc8, 0x73, 0xb8, 0x50, 0xe5, 0x0f, 0xeb, 0xd6, 0xe6, 0xd3,
	0x43, 0x79, 0xea, 0xf7, 0x43, 0x79, 0xea, 0xf9, 0xa1, 0x8c, 0xfe, 0x3d, 0x94, 0xd1, 0xe7, 0x7d,
	0x19, 0xfd, 0xd8, 0x97, 0xd1, 0xcf, 0x7d, 0x19, 0xfd, 0xda, 0x97, 0xd1, 0xd3, 0xbe, 0x8c, 0xfe,
	0xec, 0xcb, 0xe8, 0x9f, 0xbe, 0x3c, 0xf5, 0xbc, 0x2f, 0xa3, 0xaf, 0xff, 0x92, 0xa7, 0x76, 0xa7,
	0x0d, 0xd7, 0xd1, 0xf6, 0x0a, 0xfc, 0xaf, 0xd2, 0xab, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0xec, 0x3b, 0x40, 0x9d, 0x0d, 0x00, 0x00,
}
