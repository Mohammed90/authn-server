// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authn-private.proto

package grpc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAccountRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetAccountRequest) Reset()      { *m = GetAccountRequest{} }
func (*GetAccountRequest) ProtoMessage() {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{0}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccountRequest.Unmarshal(m, b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
}
func (m *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(m, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return xxx_messageInfo_GetAccountRequest.Size(m)
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAccountResponse struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Locked   bool   `protobuf:"varint,3,opt,name=locked,proto3" json:"locked"`
	Deleted  bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted"`
}

func (m *GetAccountResponse) Reset()      { *m = GetAccountResponse{} }
func (*GetAccountResponse) ProtoMessage() {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{1}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccountResponse.Unmarshal(m, b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
}
func (m *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(m, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return xxx_messageInfo_GetAccountResponse.Size(m)
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetAccountResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetAccountResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *GetAccountResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type GetAccountResponseEnvelope struct {
	Result *GetAccountResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GetAccountResponseEnvelope) Reset()      { *m = GetAccountResponseEnvelope{} }
func (*GetAccountResponseEnvelope) ProtoMessage() {}
func (*GetAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{2}
}
func (m *GetAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAccountResponseEnvelope.Unmarshal(m, b)
}
func (m *GetAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAccountResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *GetAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponseEnvelope.Merge(m, src)
}
func (m *GetAccountResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_GetAccountResponseEnvelope.Size(m)
}
func (m *GetAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponseEnvelope proto.InternalMessageInfo

func (m *GetAccountResponseEnvelope) GetResult() *GetAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateAccountRequest struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *UpdateAccountRequest) Reset()      { *m = UpdateAccountRequest{} }
func (*UpdateAccountRequest) ProtoMessage() {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{3}
}
func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAccountRequest.Unmarshal(m, b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
}
func (m *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(m, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAccountRequest.Size(m)
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdateAccountResponse struct {
}

func (m *UpdateAccountResponse) Reset()      { *m = UpdateAccountResponse{} }
func (*UpdateAccountResponse) ProtoMessage() {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{4}
}
func (m *UpdateAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAccountResponse.Unmarshal(m, b)
}
func (m *UpdateAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAccountResponse.Marshal(b, m, deterministic)
}
func (m *UpdateAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountResponse.Merge(m, src)
}
func (m *UpdateAccountResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateAccountResponse.Size(m)
}
func (m *UpdateAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountResponse proto.InternalMessageInfo

type LockAccountRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *LockAccountRequest) Reset()      { *m = LockAccountRequest{} }
func (*LockAccountRequest) ProtoMessage() {}
func (*LockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{5}
}
func (m *LockAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockAccountRequest.Unmarshal(m, b)
}
func (m *LockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockAccountRequest.Marshal(b, m, deterministic)
}
func (m *LockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAccountRequest.Merge(m, src)
}
func (m *LockAccountRequest) XXX_Size() int {
	return xxx_messageInfo_LockAccountRequest.Size(m)
}
func (m *LockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockAccountRequest proto.InternalMessageInfo

func (m *LockAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LockAccountResponse struct {
}

func (m *LockAccountResponse) Reset()      { *m = LockAccountResponse{} }
func (*LockAccountResponse) ProtoMessage() {}
func (*LockAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{6}
}
func (m *LockAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockAccountResponse.Unmarshal(m, b)
}
func (m *LockAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockAccountResponse.Marshal(b, m, deterministic)
}
func (m *LockAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAccountResponse.Merge(m, src)
}
func (m *LockAccountResponse) XXX_Size() int {
	return xxx_messageInfo_LockAccountResponse.Size(m)
}
func (m *LockAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockAccountResponse proto.InternalMessageInfo

type UnlockAccountRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UnlockAccountRequest) Reset()      { *m = UnlockAccountRequest{} }
func (*UnlockAccountRequest) ProtoMessage() {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{7}
}
func (m *UnlockAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockAccountRequest.Unmarshal(m, b)
}
func (m *UnlockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockAccountRequest.Marshal(b, m, deterministic)
}
func (m *UnlockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountRequest.Merge(m, src)
}
func (m *UnlockAccountRequest) XXX_Size() int {
	return xxx_messageInfo_UnlockAccountRequest.Size(m)
}
func (m *UnlockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountRequest proto.InternalMessageInfo

func (m *UnlockAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UnlockAccountResponse struct {
}

func (m *UnlockAccountResponse) Reset()      { *m = UnlockAccountResponse{} }
func (*UnlockAccountResponse) ProtoMessage() {}
func (*UnlockAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{8}
}
func (m *UnlockAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockAccountResponse.Unmarshal(m, b)
}
func (m *UnlockAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockAccountResponse.Marshal(b, m, deterministic)
}
func (m *UnlockAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountResponse.Merge(m, src)
}
func (m *UnlockAccountResponse) XXX_Size() int {
	return xxx_messageInfo_UnlockAccountResponse.Size(m)
}
func (m *UnlockAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountResponse proto.InternalMessageInfo

type ArchiveAccountRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ArchiveAccountRequest) Reset()      { *m = ArchiveAccountRequest{} }
func (*ArchiveAccountRequest) ProtoMessage() {}
func (*ArchiveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{9}
}
func (m *ArchiveAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveAccountRequest.Unmarshal(m, b)
}
func (m *ArchiveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveAccountRequest.Marshal(b, m, deterministic)
}
func (m *ArchiveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveAccountRequest.Merge(m, src)
}
func (m *ArchiveAccountRequest) XXX_Size() int {
	return xxx_messageInfo_ArchiveAccountRequest.Size(m)
}
func (m *ArchiveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveAccountRequest proto.InternalMessageInfo

func (m *ArchiveAccountRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ArchiveAccountResponse struct {
}

func (m *ArchiveAccountResponse) Reset()      { *m = ArchiveAccountResponse{} }
func (*ArchiveAccountResponse) ProtoMessage() {}
func (*ArchiveAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{10}
}
func (m *ArchiveAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveAccountResponse.Unmarshal(m, b)
}
func (m *ArchiveAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveAccountResponse.Marshal(b, m, deterministic)
}
func (m *ArchiveAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveAccountResponse.Merge(m, src)
}
func (m *ArchiveAccountResponse) XXX_Size() int {
	return xxx_messageInfo_ArchiveAccountResponse.Size(m)
}
func (m *ArchiveAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveAccountResponse proto.InternalMessageInfo

type ImportAccountRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Locked   bool   `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (m *ImportAccountRequest) Reset()      { *m = ImportAccountRequest{} }
func (*ImportAccountRequest) ProtoMessage() {}
func (*ImportAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{11}
}
func (m *ImportAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportAccountRequest.Unmarshal(m, b)
}
func (m *ImportAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportAccountRequest.Marshal(b, m, deterministic)
}
func (m *ImportAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountRequest.Merge(m, src)
}
func (m *ImportAccountRequest) XXX_Size() int {
	return xxx_messageInfo_ImportAccountRequest.Size(m)
}
func (m *ImportAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountRequest proto.InternalMessageInfo

func (m *ImportAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ImportAccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ImportAccountRequest) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type ImportAccountResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (m *ImportAccountResponse) Reset()      { *m = ImportAccountResponse{} }
func (*ImportAccountResponse) ProtoMessage() {}
func (*ImportAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{12}
}
func (m *ImportAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportAccountResponse.Unmarshal(m, b)
}
func (m *ImportAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportAccountResponse.Marshal(b, m, deterministic)
}
func (m *ImportAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponse.Merge(m, src)
}
func (m *ImportAccountResponse) XXX_Size() int {
	return xxx_messageInfo_ImportAccountResponse.Size(m)
}
func (m *ImportAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponse proto.InternalMessageInfo

func (m *ImportAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ImportAccountResponseEnvelope struct {
	Result *ImportAccountResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ImportAccountResponseEnvelope) Reset()      { *m = ImportAccountResponseEnvelope{} }
func (*ImportAccountResponseEnvelope) ProtoMessage() {}
func (*ImportAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{13}
}
func (m *ImportAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportAccountResponseEnvelope.Unmarshal(m, b)
}
func (m *ImportAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportAccountResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *ImportAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponseEnvelope.Merge(m, src)
}
func (m *ImportAccountResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_ImportAccountResponseEnvelope.Size(m)
}
func (m *ImportAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponseEnvelope proto.InternalMessageInfo

func (m *ImportAccountResponseEnvelope) GetResult() *ImportAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type ExpirePasswordRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ExpirePasswordRequest) Reset()      { *m = ExpirePasswordRequest{} }
func (*ExpirePasswordRequest) ProtoMessage() {}
func (*ExpirePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{14}
}
func (m *ExpirePasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpirePasswordRequest.Unmarshal(m, b)
}
func (m *ExpirePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpirePasswordRequest.Marshal(b, m, deterministic)
}
func (m *ExpirePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirePasswordRequest.Merge(m, src)
}
func (m *ExpirePasswordRequest) XXX_Size() int {
	return xxx_messageInfo_ExpirePasswordRequest.Size(m)
}
func (m *ExpirePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirePasswordRequest proto.InternalMessageInfo

func (m *ExpirePasswordRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExpirePasswordResponse struct {
}

func (m *ExpirePasswordResponse) Reset()      { *m = ExpirePasswordResponse{} }
func (*ExpirePasswordResponse) ProtoMessage() {}
func (*ExpirePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{15}
}
func (m *ExpirePasswordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpirePasswordResponse.Unmarshal(m, b)
}
func (m *ExpirePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpirePasswordResponse.Marshal(b, m, deterministic)
}
func (m *ExpirePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirePasswordResponse.Merge(m, src)
}
func (m *ExpirePasswordResponse) XXX_Size() int {
	return xxx_messageInfo_ExpirePasswordResponse.Size(m)
}
func (m *ExpirePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirePasswordResponse proto.InternalMessageInfo

type JWKSRequest struct {
}

func (m *JWKSRequest) Reset()      { *m = JWKSRequest{} }
func (*JWKSRequest) ProtoMessage() {}
func (*JWKSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{16}
}
func (m *JWKSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWKSRequest.Unmarshal(m, b)
}
func (m *JWKSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWKSRequest.Marshal(b, m, deterministic)
}
func (m *JWKSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKSRequest.Merge(m, src)
}
func (m *JWKSRequest) XXX_Size() int {
	return xxx_messageInfo_JWKSRequest.Size(m)
}
func (m *JWKSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWKSRequest proto.InternalMessageInfo

type Key struct {
	Use string `protobuf:"bytes,1,opt,name=use,proto3" json:"use,omitempty"`
	Alg string `protobuf:"bytes,2,opt,name=alg,proto3" json:"alg,omitempty"`
	Kty string `protobuf:"bytes,3,opt,name=kty,proto3" json:"kty,omitempty"`
	Kid string `protobuf:"bytes,4,opt,name=kid,proto3" json:"kid,omitempty"`
	E   string `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	N   string `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *Key) Reset()      { *m = Key{} }
func (*Key) ProtoMessage() {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{17}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetUse() string {
	if m != nil {
		return m.Use
	}
	return ""
}

func (m *Key) GetAlg() string {
	if m != nil {
		return m.Alg
	}
	return ""
}

func (m *Key) GetKty() string {
	if m != nil {
		return m.Kty
	}
	return ""
}

func (m *Key) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *Key) GetE() string {
	if m != nil {
		return m.E
	}
	return ""
}

func (m *Key) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

type JWKSResponse struct {
	Keys []*Key `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *JWKSResponse) Reset()      { *m = JWKSResponse{} }
func (*JWKSResponse) ProtoMessage() {}
func (*JWKSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{18}
}
func (m *JWKSResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWKSResponse.Unmarshal(m, b)
}
func (m *JWKSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWKSResponse.Marshal(b, m, deterministic)
}
func (m *JWKSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKSResponse.Merge(m, src)
}
func (m *JWKSResponse) XXX_Size() int {
	return xxx_messageInfo_JWKSResponse.Size(m)
}
func (m *JWKSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWKSResponse proto.InternalMessageInfo

func (m *JWKSResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ServiceStatsRequest struct {
}

func (m *ServiceStatsRequest) Reset()      { *m = ServiceStatsRequest{} }
func (*ServiceStatsRequest) ProtoMessage() {}
func (*ServiceStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{19}
}
func (m *ServiceStatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceStatsRequest.Unmarshal(m, b)
}
func (m *ServiceStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceStatsRequest.Marshal(b, m, deterministic)
}
func (m *ServiceStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsRequest.Merge(m, src)
}
func (m *ServiceStatsRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceStatsRequest.Size(m)
}
func (m *ServiceStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsRequest proto.InternalMessageInfo

type ServiceStatsResponse struct {
	Actives *ServiceStatsResponse_ActiveStats `protobuf:"bytes,1,opt,name=actives,proto3" json:"actives,omitempty"`
}

func (m *ServiceStatsResponse) Reset()      { *m = ServiceStatsResponse{} }
func (*ServiceStatsResponse) ProtoMessage() {}
func (*ServiceStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{20}
}
func (m *ServiceStatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceStatsResponse.Unmarshal(m, b)
}
func (m *ServiceStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceStatsResponse.Marshal(b, m, deterministic)
}
func (m *ServiceStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsResponse.Merge(m, src)
}
func (m *ServiceStatsResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceStatsResponse.Size(m)
}
func (m *ServiceStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsResponse proto.InternalMessageInfo

func (m *ServiceStatsResponse) GetActives() *ServiceStatsResponse_ActiveStats {
	if m != nil {
		return m.Actives
	}
	return nil
}

type ServiceStatsResponse_ActiveStats struct {
	Daily   map[string]int64 `protobuf:"bytes,1,rep,name=daily,proto3" json:"daily,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Weekly  map[string]int64 `protobuf:"bytes,2,rep,name=weekly,proto3" json:"weekly,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Monthly map[string]int64 `protobuf:"bytes,3,rep,name=monthly,proto3" json:"monthly,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ServiceStatsResponse_ActiveStats) Reset()      { *m = ServiceStatsResponse_ActiveStats{} }
func (*ServiceStatsResponse_ActiveStats) ProtoMessage() {}
func (*ServiceStatsResponse_ActiveStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{20, 0}
}
func (m *ServiceStatsResponse_ActiveStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceStatsResponse_ActiveStats.Unmarshal(m, b)
}
func (m *ServiceStatsResponse_ActiveStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceStatsResponse_ActiveStats.Marshal(b, m, deterministic)
}
func (m *ServiceStatsResponse_ActiveStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsResponse_ActiveStats.Merge(m, src)
}
func (m *ServiceStatsResponse_ActiveStats) XXX_Size() int {
	return xxx_messageInfo_ServiceStatsResponse_ActiveStats.Size(m)
}
func (m *ServiceStatsResponse_ActiveStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsResponse_ActiveStats.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsResponse_ActiveStats proto.InternalMessageInfo

func (m *ServiceStatsResponse_ActiveStats) GetDaily() map[string]int64 {
	if m != nil {
		return m.Daily
	}
	return nil
}

func (m *ServiceStatsResponse_ActiveStats) GetWeekly() map[string]int64 {
	if m != nil {
		return m.Weekly
	}
	return nil
}

func (m *ServiceStatsResponse_ActiveStats) GetMonthly() map[string]int64 {
	if m != nil {
		return m.Monthly
	}
	return nil
}

type ServiceConfigurationRequest struct {
}

func (m *ServiceConfigurationRequest) Reset()      { *m = ServiceConfigurationRequest{} }
func (*ServiceConfigurationRequest) ProtoMessage() {}
func (*ServiceConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{21}
}
func (m *ServiceConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConfigurationRequest.Unmarshal(m, b)
}
func (m *ServiceConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConfigurationRequest.Marshal(b, m, deterministic)
}
func (m *ServiceConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfigurationRequest.Merge(m, src)
}
func (m *ServiceConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceConfigurationRequest.Size(m)
}
func (m *ServiceConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfigurationRequest proto.InternalMessageInfo

type ServiceConfigurationResponse struct {
	Issuer                           string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ResponseTypesSupported           []string `protobuf:"bytes,2,rep,name=response_types_supported,json=responseTypesSupported,proto3" json:"response_types_supported,omitempty"`
	SubjectTypesSupported            []string `protobuf:"bytes,3,rep,name=subject_types_supported,json=subjectTypesSupported,proto3" json:"subject_types_supported,omitempty"`
	IdTokenSigningAlgValuesSupported []string `protobuf:"bytes,4,rep,name=id_token_signing_alg_values_supported,json=idTokenSigningAlgValuesSupported,proto3" json:"id_token_signing_alg_values_supported,omitempty"`
	ClaimsSupported                  []string `protobuf:"bytes,5,rep,name=claims_supported,json=claimsSupported,proto3" json:"claims_supported,omitempty"`
	JwksUri                          string   `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
}

func (m *ServiceConfigurationResponse) Reset()      { *m = ServiceConfigurationResponse{} }
func (*ServiceConfigurationResponse) ProtoMessage() {}
func (*ServiceConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3ae39dba9ced36b, []int{22}
}
func (m *ServiceConfigurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConfigurationResponse.Unmarshal(m, b)
}
func (m *ServiceConfigurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConfigurationResponse.Marshal(b, m, deterministic)
}
func (m *ServiceConfigurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfigurationResponse.Merge(m, src)
}
func (m *ServiceConfigurationResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceConfigurationResponse.Size(m)
}
func (m *ServiceConfigurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfigurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfigurationResponse proto.InternalMessageInfo

func (m *ServiceConfigurationResponse) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *ServiceConfigurationResponse) GetResponseTypesSupported() []string {
	if m != nil {
		return m.ResponseTypesSupported
	}
	return nil
}

func (m *ServiceConfigurationResponse) GetSubjectTypesSupported() []string {
	if m != nil {
		return m.SubjectTypesSupported
	}
	return nil
}

func (m *ServiceConfigurationResponse) GetIdTokenSigningAlgValuesSupported() []string {
	if m != nil {
		return m.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (m *ServiceConfigurationResponse) GetClaimsSupported() []string {
	if m != nil {
		return m.ClaimsSupported
	}
	return nil
}

func (m *ServiceConfigurationResponse) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAccountRequest)(nil), "keratin.authn.GetAccountRequest")
	golang_proto.RegisterType((*GetAccountRequest)(nil), "keratin.authn.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "keratin.authn.GetAccountResponse")
	golang_proto.RegisterType((*GetAccountResponse)(nil), "keratin.authn.GetAccountResponse")
	proto.RegisterType((*GetAccountResponseEnvelope)(nil), "keratin.authn.GetAccountResponseEnvelope")
	golang_proto.RegisterType((*GetAccountResponseEnvelope)(nil), "keratin.authn.GetAccountResponseEnvelope")
	proto.RegisterType((*UpdateAccountRequest)(nil), "keratin.authn.UpdateAccountRequest")
	golang_proto.RegisterType((*UpdateAccountRequest)(nil), "keratin.authn.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "keratin.authn.UpdateAccountResponse")
	golang_proto.RegisterType((*UpdateAccountResponse)(nil), "keratin.authn.UpdateAccountResponse")
	proto.RegisterType((*LockAccountRequest)(nil), "keratin.authn.LockAccountRequest")
	golang_proto.RegisterType((*LockAccountRequest)(nil), "keratin.authn.LockAccountRequest")
	proto.RegisterType((*LockAccountResponse)(nil), "keratin.authn.LockAccountResponse")
	golang_proto.RegisterType((*LockAccountResponse)(nil), "keratin.authn.LockAccountResponse")
	proto.RegisterType((*UnlockAccountRequest)(nil), "keratin.authn.UnlockAccountRequest")
	golang_proto.RegisterType((*UnlockAccountRequest)(nil), "keratin.authn.UnlockAccountRequest")
	proto.RegisterType((*UnlockAccountResponse)(nil), "keratin.authn.UnlockAccountResponse")
	golang_proto.RegisterType((*UnlockAccountResponse)(nil), "keratin.authn.UnlockAccountResponse")
	proto.RegisterType((*ArchiveAccountRequest)(nil), "keratin.authn.ArchiveAccountRequest")
	golang_proto.RegisterType((*ArchiveAccountRequest)(nil), "keratin.authn.ArchiveAccountRequest")
	proto.RegisterType((*ArchiveAccountResponse)(nil), "keratin.authn.ArchiveAccountResponse")
	golang_proto.RegisterType((*ArchiveAccountResponse)(nil), "keratin.authn.ArchiveAccountResponse")
	proto.RegisterType((*ImportAccountRequest)(nil), "keratin.authn.ImportAccountRequest")
	golang_proto.RegisterType((*ImportAccountRequest)(nil), "keratin.authn.ImportAccountRequest")
	proto.RegisterType((*ImportAccountResponse)(nil), "keratin.authn.ImportAccountResponse")
	golang_proto.RegisterType((*ImportAccountResponse)(nil), "keratin.authn.ImportAccountResponse")
	proto.RegisterType((*ImportAccountResponseEnvelope)(nil), "keratin.authn.ImportAccountResponseEnvelope")
	golang_proto.RegisterType((*ImportAccountResponseEnvelope)(nil), "keratin.authn.ImportAccountResponseEnvelope")
	proto.RegisterType((*ExpirePasswordRequest)(nil), "keratin.authn.ExpirePasswordRequest")
	golang_proto.RegisterType((*ExpirePasswordRequest)(nil), "keratin.authn.ExpirePasswordRequest")
	proto.RegisterType((*ExpirePasswordResponse)(nil), "keratin.authn.ExpirePasswordResponse")
	golang_proto.RegisterType((*ExpirePasswordResponse)(nil), "keratin.authn.ExpirePasswordResponse")
	proto.RegisterType((*JWKSRequest)(nil), "keratin.authn.JWKSRequest")
	golang_proto.RegisterType((*JWKSRequest)(nil), "keratin.authn.JWKSRequest")
	proto.RegisterType((*Key)(nil), "keratin.authn.Key")
	golang_proto.RegisterType((*Key)(nil), "keratin.authn.Key")
	proto.RegisterType((*JWKSResponse)(nil), "keratin.authn.JWKSResponse")
	golang_proto.RegisterType((*JWKSResponse)(nil), "keratin.authn.JWKSResponse")
	proto.RegisterType((*ServiceStatsRequest)(nil), "keratin.authn.ServiceStatsRequest")
	golang_proto.RegisterType((*ServiceStatsRequest)(nil), "keratin.authn.ServiceStatsRequest")
	proto.RegisterType((*ServiceStatsResponse)(nil), "keratin.authn.ServiceStatsResponse")
	golang_proto.RegisterType((*ServiceStatsResponse)(nil), "keratin.authn.ServiceStatsResponse")
	proto.RegisterType((*ServiceStatsResponse_ActiveStats)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats")
	golang_proto.RegisterType((*ServiceStatsResponse_ActiveStats)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.DailyEntry")
	golang_proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.DailyEntry")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.MonthlyEntry")
	golang_proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.MonthlyEntry")
	proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.WeeklyEntry")
	golang_proto.RegisterMapType((map[string]int64)(nil), "keratin.authn.ServiceStatsResponse.ActiveStats.WeeklyEntry")
	proto.RegisterType((*ServiceConfigurationRequest)(nil), "keratin.authn.ServiceConfigurationRequest")
	golang_proto.RegisterType((*ServiceConfigurationRequest)(nil), "keratin.authn.ServiceConfigurationRequest")
	proto.RegisterType((*ServiceConfigurationResponse)(nil), "keratin.authn.ServiceConfigurationResponse")
	golang_proto.RegisterType((*ServiceConfigurationResponse)(nil), "keratin.authn.ServiceConfigurationResponse")
}

func init() { proto.RegisterFile("authn-private.proto", fileDescriptor_c3ae39dba9ced36b) }
func init() { golang_proto.RegisterFile("authn-private.proto", fileDescriptor_c3ae39dba9ced36b) }

var fileDescriptor_c3ae39dba9ced36b = []byte{
	// 1249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x93, 0x34, 0xe9, 0xbe, 0xb4, 0xa5, 0x3b, 0x6d, 0xda, 0xe0, 0xee, 0xa6, 0xc1, 0x6d,
	0x77, 0xbb, 0x65, 0x37, 0x46, 0x41, 0xaa, 0xba, 0x65, 0x2f, 0x29, 0x54, 0xb0, 0x14, 0x96, 0x55,
	0xb2, 0xdd, 0x4a, 0x95, 0x50, 0xe4, 0xda, 0x53, 0x77, 0x36, 0x8e, 0xed, 0xf5, 0x9f, 0x94, 0x08,
	0x21, 0x10, 0x17, 0x10, 0x5c, 0x10, 0x7c, 0x02, 0x4e, 0xf0, 0x11, 0xb8, 0x20, 0xf8, 0x08, 0x48,
	0x08, 0x69, 0x4f, 0x95, 0xb6, 0xe5, 0xd4, 0x0b, 0x57, 0x8e, 0xc8, 0xe3, 0x71, 0x62, 0x3b, 0x26,
	0x69, 0x4f, 0xf1, 0x7b, 0xef, 0xf7, 0x7b, 0xef, 0xcd, 0x9b, 0x37, 0x33, 0x2f, 0x30, 0x2b, 0xb9,
	0xce, 0xb1, 0x7e, 0xcf, 0xb4, 0x48, 0x47, 0x72, 0x70, 0xc5, 0xb4, 0x0c, 0xc7, 0x40, 0x53, 0x2d,
	0x6c, 0x49, 0x0e, 0xd1, 0x2b, 0xd4, 0xc8, 0xdf, 0x53, 0x89, 0x73, 0xec, 0x1e, 0x56, 0x64, 0xa3,
	0x2d, 0xaa, 0x86, 0x6a, 0x88, 0x14, 0x75, 0xe8, 0x1e, 0x51, 0x89, 0x0a, 0xf4, 0xcb, 0x67, 0xf3,
	0x37, 0x54, 0xc3, 0x50, 0x35, 0x2c, 0x4a, 0x26, 0x11, 0x25, 0x5d, 0x37, 0x1c, 0xc9, 0x21, 0x86,
	0x6e, 0xfb, 0x56, 0x61, 0x19, 0xae, 0xbf, 0x8b, 0x9d, 0x9a, 0x2c, 0x1b, 0xae, 0xee, 0xd4, 0xf1,
	0x73, 0x17, 0xdb, 0x0e, 0x9a, 0x86, 0x14, 0x51, 0x8a, 0x5c, 0x99, 0x5b, 0x4b, 0xd7, 0x53, 0x44,
	0x11, 0xbe, 0xe5, 0x00, 0x85, 0x51, 0xb6, 0x69, 0xe8, 0x36, 0x8e, 0xc3, 0x10, 0x0f, 0x13, 0xae,
	0x8d, 0x2d, 0x5d, 0x6a, 0xe3, 0x62, 0xaa, 0xcc, 0xad, 0x5d, 0xab, 0xf7, 0x64, 0x24, 0x40, 0x56,
	0x33, 0xe4, 0x16, 0x56, 0x8a, 0xe9, 0x32, 0xb7, 0x36, 0xb1, 0x0d, 0x17, 0xa7, 0x4b, 0x4c, 0x53,
	0x67, 0xbf, 0x68, 0x15, 0x72, 0x0a, 0xd6, 0xb0, 0x83, 0x95, 0x62, 0x86, 0x82, 0xf2, 0x17, 0xa7,
	0x4b, 0x81, 0xaa, 0x1e, 0x7c, 0x08, 0xfb, 0xc0, 0x0f, 0x26, 0xb3, 0xa3, 0x77, 0xb0, 0x66, 0x98,
	0x18, 0xdd, 0x87, 0xac, 0x85, 0x6d, 0x57, 0x73, 0x68, 0x62, 0xf9, 0xea, 0x6b, 0x95, 0x48, 0xf5,
	0x2a, 0x83, 0xd4, 0x3a, 0x23, 0x08, 0xdb, 0x30, 0xb7, 0x67, 0x2a, 0x92, 0x83, 0x87, 0x97, 0x63,
	0xd8, 0x3a, 0x85, 0x05, 0x28, 0xc4, 0x7c, 0xf8, 0x41, 0x84, 0x15, 0x40, 0x1f, 0x18, 0x72, 0x6b,
	0x44, 0xa5, 0x0b, 0x30, 0x1b, 0x41, 0x31, 0xf2, 0x2d, 0x98, 0xdb, 0xd3, 0xb5, 0xd1, 0x74, 0x2f,
	0x7a, 0x14, 0xc7, 0x1c, 0xdc, 0x86, 0x42, 0xcd, 0x92, 0x8f, 0x49, 0x67, 0xc4, 0xda, 0x84, 0x22,
	0xcc, 0xc7, 0x81, 0xcc, 0xc5, 0x11, 0xcc, 0x3d, 0x6c, 0x9b, 0x86, 0x15, 0x6f, 0x96, 0x70, 0x35,
	0xb8, 0xd8, 0xae, 0xf3, 0x30, 0x61, 0x4a, 0xb6, 0x7d, 0x62, 0x58, 0x4a, 0x50, 0xa9, 0x40, 0x46,
	0xf3, 0xd1, 0x8e, 0x08, 0xba, 0x40, 0x10, 0xa1, 0x10, 0x8b, 0xc3, 0xda, 0x6d, 0xbe, 0x9f, 0xea,
	0x76, 0xf6, 0xe2, 0x74, 0x29, 0x45, 0x14, 0x9a, 0xf2, 0xc7, 0x70, 0x33, 0x91, 0xd0, 0x6b, 0x89,
	0x07, 0xb1, 0x96, 0x58, 0x89, 0xb5, 0x44, 0x22, 0xbb, 0xd7, 0x15, 0xb7, 0xa1, 0xb0, 0xf3, 0x89,
	0x49, 0x2c, 0xfc, 0x98, 0x65, 0x3e, 0xa4, 0x74, 0x71, 0x20, 0x2b, 0xdd, 0x14, 0xe4, 0xdf, 0xdf,
	0xdf, 0x6d, 0x30, 0xa2, 0x40, 0x20, 0xbd, 0x8b, 0xbb, 0x68, 0x06, 0xd2, 0xae, 0x1d, 0xd4, 0xcc,
	0xfb, 0xf4, 0x34, 0x92, 0xa6, 0xb2, 0x4a, 0x79, 0x9f, 0x9e, 0xa6, 0xe5, 0x74, 0x69, 0x85, 0xae,
	0xd5, 0xbd, 0x4f, 0xaa, 0x21, 0xfe, 0x01, 0xf1, 0x34, 0x44, 0x41, 0x93, 0xc0, 0xe1, 0xe2, 0x38,
	0x95, 0x39, 0xec, 0x49, 0x7a, 0x31, 0xeb, 0x4b, 0xba, 0xb0, 0x01, 0x93, 0x7e, 0x64, 0x56, 0xc3,
	0x5b, 0x90, 0x69, 0xe1, 0xae, 0x5d, 0xe4, 0xca, 0xe9, 0xb5, 0x7c, 0x15, 0xc5, 0x0a, 0xb1, 0x8b,
	0xbb, 0x75, 0x6a, 0xf7, 0xfa, 0xb0, 0x81, 0xad, 0x0e, 0x91, 0x71, 0xc3, 0x91, 0x1c, 0x3b, 0xc8,
	0xfc, 0xc7, 0x0c, 0xcc, 0x45, 0xf5, 0xcc, 0xef, 0x43, 0xc8, 0x49, 0xb2, 0x43, 0x3a, 0xd8, 0x66,
	0x35, 0x16, 0x63, 0xae, 0x93, 0x58, 0x95, 0x1a, 0xa5, 0xf8, 0xba, 0x80, 0xcf, 0xff, 0x9a, 0x86,
	0x7c, 0xc8, 0x80, 0x1e, 0xc3, 0xb8, 0x22, 0x11, 0xad, 0xcb, 0x72, 0xde, 0xba, 0xa2, 0xe3, 0xca,
	0x3b, 0x1e, 0x79, 0x47, 0x77, 0xac, 0x6e, 0xdd, 0x77, 0x84, 0x1a, 0x90, 0x3d, 0xc1, 0xb8, 0xa5,
	0x75, 0x8b, 0x29, 0xea, 0xf2, 0xad, 0xab, 0xba, 0xdc, 0xa7, 0x6c, 0xdf, 0x27, 0x73, 0x85, 0x9e,
	0x42, 0xae, 0x6d, 0xe8, 0xce, 0xb1, 0xe6, 0xed, 0x96, 0xe7, 0xf5, 0xc1, 0x55, 0xbd, 0x7e, 0xe8,
	0xd3, 0x7d, 0xb7, 0x81, 0x33, 0x7e, 0x13, 0xa0, 0xbf, 0x02, 0xba, 0xfb, 0xb8, 0x1b, 0xf4, 0x4c,
	0x0b, 0x77, 0xd1, 0x1c, 0x8c, 0x77, 0x24, 0xcd, 0xf5, 0x6f, 0xa2, 0x74, 0xdd, 0x17, 0xb6, 0x52,
	0x9b, 0x1c, 0x7f, 0x1f, 0xf2, 0xa1, 0x44, 0xaf, 0x44, 0xdd, 0x82, 0xc9, 0x70, 0x36, 0x57, 0xe1,
	0x0a, 0x37, 0x61, 0x91, 0x2d, 0xf5, 0x6d, 0x43, 0x3f, 0x22, 0xaa, 0x6b, 0xd1, 0x07, 0x27, 0x68,
	0xa1, 0xdf, 0x52, 0x70, 0x23, 0xd9, 0xde, 0x3b, 0xe6, 0x59, 0x62, 0xdb, 0x2e, 0xb6, 0x58, 0x38,
	0x26, 0xa1, 0x4d, 0x28, 0x5a, 0x0c, 0xd3, 0x74, 0xba, 0x26, 0xb6, 0x9b, 0xb6, 0x6b, 0x7a, 0x07,
	0x17, 0x2b, 0x74, 0x1f, 0xaf, 0xd5, 0xe7, 0x03, 0xfb, 0x13, 0xcf, 0xdc, 0x08, 0xac, 0x68, 0x03,
	0x16, 0x6c, 0xf7, 0xf0, 0x19, 0x96, 0x9d, 0x01, 0x62, 0x9a, 0x12, 0x0b, 0xcc, 0x1c, 0xe3, 0x7d,
	0x04, 0xab, 0x44, 0x69, 0x3a, 0x46, 0x0b, 0xeb, 0x4d, 0x9b, 0xa8, 0x3a, 0xd1, 0xd5, 0xa6, 0xa4,
	0xa9, 0x4d, 0xba, 0xd6, 0xb0, 0x97, 0x0c, 0xf5, 0x52, 0x26, 0xca, 0x13, 0x0f, 0xdb, 0xf0, 0xa1,
	0x35, 0x4d, 0x7d, 0x4a, 0x81, 0x7d, 0x87, 0x77, 0x60, 0x46, 0xd6, 0x24, 0xd2, 0x0e, 0x73, 0xc7,
	0x29, 0xf7, 0x15, 0x5f, 0xdf, 0x87, 0xbe, 0x0a, 0x13, 0xcf, 0x4e, 0x5a, 0x76, 0xd3, 0xb5, 0x08,
	0x3b, 0xcd, 0x39, 0x4f, 0xde, 0xb3, 0x48, 0xf5, 0x1f, 0x0e, 0x66, 0xf7, 0x74, 0x1b, 0xcb, 0xae,
	0x85, 0x95, 0x9a, 0xd2, 0x26, 0x7a, 0xcd, 0x75, 0x8e, 0x1f, 0xa1, 0x47, 0x90, 0xf1, 0xce, 0x3a,
	0xe2, 0x63, 0x8d, 0x17, 0xba, 0x7a, 0xf8, 0xc5, 0x44, 0x5b, 0x70, 0x4d, 0x7d, 0xf9, 0xe7, 0xdf,
	0x3f, 0xa4, 0x72, 0x68, 0x5c, 0xf4, 0x42, 0xa1, 0xaf, 0xb8, 0xde, 0x61, 0x8f, 0xec, 0x14, 0x5a,
	0x4f, 0xee, 0xec, 0xa4, 0xed, 0xe6, 0x5f, 0xbf, 0x14, 0x96, 0x25, 0x30, 0x4f, 0x13, 0x98, 0x41,
	0xd3, 0xa2, 0x1c, 0xb6, 0x57, 0xff, 0xca, 0xc1, 0xf5, 0xc6, 0xc0, 0x7a, 0x3f, 0x87, 0xa9, 0xc8,
	0xcd, 0x8d, 0x96, 0x87, 0xdf, 0xeb, 0x7e, 0x42, 0x77, 0x2f, 0x73, 0xf9, 0x07, 0x4f, 0x87, 0xb0,
	0x48, 0x33, 0x2a, 0x08, 0x33, 0xa2, 0xe4, 0x23, 0x6c, 0x91, 0x50, 0xc2, 0x16, 0xb7, 0x8e, 0x9e,
	0x03, 0xf4, 0xa7, 0x09, 0x54, 0x1e, 0x32, 0x68, 0xf8, 0xa1, 0xef, 0x8c, 0x1c, 0x45, 0x7a, 0x71,
	0xfb, 0x95, 0xe8, 0xc5, 0xfd, 0x94, 0x28, 0x9f, 0xa1, 0x6f, 0x38, 0x98, 0x8a, 0xcc, 0x17, 0x03,
	0x8b, 0x4e, 0x9a, 0x60, 0xf8, 0x95, 0xe1, 0x20, 0x56, 0xfe, 0x0a, 0x0d, 0xba, 0xc6, 0xc7, 0x82,
	0x6e, 0x71, 0xeb, 0x07, 0xb3, 0xd5, 0x41, 0x25, 0xfa, 0x9a, 0x83, 0x7c, 0x68, 0x5a, 0x41, 0xf1,
	0x51, 0x6b, 0x70, 0xde, 0xe1, 0x85, 0x61, 0x10, 0x96, 0x46, 0x95, 0xa6, 0x71, 0x97, 0x9f, 0x8d,
	0x46, 0x14, 0xbd, 0xf9, 0xe0, 0xa0, 0x50, 0x4d, 0x52, 0xa3, 0xef, 0xbd, 0xba, 0x84, 0x27, 0x9f,
	0xc1, 0xba, 0x24, 0xcc, 0x4f, 0x83, 0x75, 0x49, 0x1c, 0x9e, 0x36, 0x68, 0x42, 0x6f, 0xf0, 0x85,
	0x58, 0x64, 0x97, 0xa2, 0x0f, 0x16, 0xaa, 0xc9, 0x06, 0xe4, 0xc2, 0x74, 0x74, 0x96, 0x42, 0xf1,
	0x78, 0x89, 0x33, 0x19, 0xbf, 0x3a, 0x02, 0x15, 0x3d, 0x2d, 0xeb, 0xf1, 0x1e, 0xf9, 0x89, 0x83,
	0xe9, 0xe8, 0x20, 0x32, 0x10, 0x37, 0x71, 0xa0, 0x19, 0x88, 0xfb, 0x3f, 0xd3, 0xcc, 0x7b, 0x34,
	0xee, 0x36, 0x5f, 0x8a, 0xad, 0x1a, 0x53, 0x78, 0x33, 0x18, 0xf0, 0x0e, 0xca, 0xd5, 0x11, 0x88,
	0xea, 0x09, 0x4c, 0xd2, 0xa3, 0xec, 0xbf, 0x82, 0x36, 0x52, 0x61, 0x32, 0xfc, 0x4a, 0x22, 0x61,
	0xe8, 0x13, 0xea, 0x27, 0xbd, 0x7c, 0x89, 0x67, 0x56, 0x98, 0xa6, 0x29, 0x4f, 0xa0, 0xac, 0x68,
	0x7b, 0xfa, 0xed, 0xf5, 0x17, 0x2f, 0x4b, 0x63, 0xff, 0xbe, 0x2c, 0x71, 0x5f, 0x9c, 0x95, 0xb8,
	0x9f, 0xcf, 0x4a, 0xdc, 0x2f, 0x67, 0x25, 0xee, 0xbb, 0xf3, 0xd2, 0xd8, 0xef, 0xe7, 0x25, 0xee,
	0x8f, 0xf3, 0xd2, 0xd8, 0x8b, 0xf3, 0xd2, 0xd8, 0x41, 0x46, 0xb5, 0x4c, 0xf9, 0x30, 0x4b, 0xff,
	0x28, 0xbd, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xf0, 0x50, 0x5a, 0x9b, 0x0d, 0x00,
	0x00,
}

func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *GetAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(GetAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *UpdateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountRequest)
	if !ok {
		that2, ok := that.(UpdateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *UpdateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountResponse)
	if !ok {
		that2, ok := that.(UpdateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockAccountRequest)
	if !ok {
		that2, ok := that.(LockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *LockAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockAccountResponse)
	if !ok {
		that2, ok := that.(LockAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnlockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockAccountRequest)
	if !ok {
		that2, ok := that.(UnlockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *UnlockAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockAccountResponse)
	if !ok {
		that2, ok := that.(UnlockAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArchiveAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchiveAccountRequest)
	if !ok {
		that2, ok := that.(ArchiveAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ArchiveAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchiveAccountResponse)
	if !ok {
		that2, ok := that.(ArchiveAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ImportAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountRequest)
	if !ok {
		that2, ok := that.(ImportAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	return true
}
func (this *ImportAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponse)
	if !ok {
		that2, ok := that.(ImportAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ImportAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(ImportAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ExpirePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpirePasswordRequest)
	if !ok {
		that2, ok := that.(ExpirePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ExpirePasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpirePasswordResponse)
	if !ok {
		that2, ok := that.(ExpirePasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *JWKSRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKSRequest)
	if !ok {
		that2, ok := that.(JWKSRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Use != that1.Use {
		return false
	}
	if this.Alg != that1.Alg {
		return false
	}
	if this.Kty != that1.Kty {
		return false
	}
	if this.Kid != that1.Kid {
		return false
	}
	if this.E != that1.E {
		return false
	}
	if this.N != that1.N {
		return false
	}
	return true
}
func (this *JWKSResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKSResponse)
	if !ok {
		that2, ok := that.(JWKSResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceStatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsRequest)
	if !ok {
		that2, ok := that.(ServiceStatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsResponse)
	if !ok {
		that2, ok := that.(ServiceStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Actives.Equal(that1.Actives) {
		return false
	}
	return true
}
func (this *ServiceStatsResponse_ActiveStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsResponse_ActiveStats)
	if !ok {
		that2, ok := that.(ServiceStatsResponse_ActiveStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Daily) != len(that1.Daily) {
		return false
	}
	for i := range this.Daily {
		if this.Daily[i] != that1.Daily[i] {
			return false
		}
	}
	if len(this.Weekly) != len(that1.Weekly) {
		return false
	}
	for i := range this.Weekly {
		if this.Weekly[i] != that1.Weekly[i] {
			return false
		}
	}
	if len(this.Monthly) != len(that1.Monthly) {
		return false
	}
	for i := range this.Monthly {
		if this.Monthly[i] != that1.Monthly[i] {
			return false
		}
	}
	return true
}
func (this *ServiceConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceConfigurationRequest)
	if !ok {
		that2, ok := that.(ServiceConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceConfigurationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceConfigurationResponse)
	if !ok {
		that2, ok := that.(ServiceConfigurationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if len(this.ResponseTypesSupported) != len(that1.ResponseTypesSupported) {
		return false
	}
	for i := range this.ResponseTypesSupported {
		if this.ResponseTypesSupported[i] != that1.ResponseTypesSupported[i] {
			return false
		}
	}
	if len(this.SubjectTypesSupported) != len(that1.SubjectTypesSupported) {
		return false
	}
	for i := range this.SubjectTypesSupported {
		if this.SubjectTypesSupported[i] != that1.SubjectTypesSupported[i] {
			return false
		}
	}
	if len(this.IdTokenSigningAlgValuesSupported) != len(that1.IdTokenSigningAlgValuesSupported) {
		return false
	}
	for i := range this.IdTokenSigningAlgValuesSupported {
		if this.IdTokenSigningAlgValuesSupported[i] != that1.IdTokenSigningAlgValuesSupported[i] {
			return false
		}
	}
	if len(this.ClaimsSupported) != len(that1.ClaimsSupported) {
		return false
	}
	for i := range this.ClaimsSupported {
		if this.ClaimsSupported[i] != that1.ClaimsSupported[i] {
			return false
		}
	}
	if this.JwksUri != that1.JwksUri {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UnsecuredAdminAuthNClient is the client API for UnsecuredAdminAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UnsecuredAdminAuthNClient interface {
	JWKS(ctx context.Context, in *JWKSRequest, opts ...grpc.CallOption) (*JWKSResponse, error)
	ServiceConfiguration(ctx context.Context, in *ServiceConfigurationRequest, opts ...grpc.CallOption) (*ServiceConfigurationResponse, error)
}

type unsecuredAdminAuthNClient struct {
	cc *grpc.ClientConn
}

func NewUnsecuredAdminAuthNClient(cc *grpc.ClientConn) UnsecuredAdminAuthNClient {
	return &unsecuredAdminAuthNClient{cc}
}

func (c *unsecuredAdminAuthNClient) JWKS(ctx context.Context, in *JWKSRequest, opts ...grpc.CallOption) (*JWKSResponse, error) {
	out := new(JWKSResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.UnsecuredAdminAuthN/JWKS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unsecuredAdminAuthNClient) ServiceConfiguration(ctx context.Context, in *ServiceConfigurationRequest, opts ...grpc.CallOption) (*ServiceConfigurationResponse, error) {
	out := new(ServiceConfigurationResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.UnsecuredAdminAuthN/ServiceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnsecuredAdminAuthNServer is the server API for UnsecuredAdminAuthN service.
type UnsecuredAdminAuthNServer interface {
	JWKS(context.Context, *JWKSRequest) (*JWKSResponse, error)
	ServiceConfiguration(context.Context, *ServiceConfigurationRequest) (*ServiceConfigurationResponse, error)
}

func RegisterUnsecuredAdminAuthNServer(s *grpc.Server, srv UnsecuredAdminAuthNServer) {
	s.RegisterService(&_UnsecuredAdminAuthN_serviceDesc, srv)
}

func _UnsecuredAdminAuthN_JWKS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWKSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsecuredAdminAuthNServer).JWKS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.UnsecuredAdminAuthN/JWKS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsecuredAdminAuthNServer).JWKS(ctx, req.(*JWKSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnsecuredAdminAuthN_ServiceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsecuredAdminAuthNServer).ServiceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.UnsecuredAdminAuthN/ServiceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsecuredAdminAuthNServer).ServiceConfiguration(ctx, req.(*ServiceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnsecuredAdminAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.UnsecuredAdminAuthN",
	HandlerType: (*UnsecuredAdminAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JWKS",
			Handler:    _UnsecuredAdminAuthN_JWKS_Handler,
		},
		{
			MethodName: "ServiceConfiguration",
			Handler:    _UnsecuredAdminAuthN_ServiceConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

// SecuredAdminAuthNClient is the client API for SecuredAdminAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecuredAdminAuthNClient interface {
	ImportAccount(ctx context.Context, in *ImportAccountRequest, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error)
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error)
	ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*ArchiveAccountResponse, error)
	ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*ExpirePasswordResponse, error)
}

type securedAdminAuthNClient struct {
	cc *grpc.ClientConn
}

func NewSecuredAdminAuthNClient(cc *grpc.ClientConn) SecuredAdminAuthNClient {
	return &securedAdminAuthNClient{cc}
}

func (c *securedAdminAuthNClient) ImportAccount(ctx context.Context, in *ImportAccountRequest, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error) {
	out := new(ImportAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ImportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error) {
	out := new(GetAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error) {
	out := new(LockAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error) {
	out := new(UnlockAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*ArchiveAccountResponse, error) {
	out := new(ArchiveAccountResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ArchiveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedAdminAuthNClient) ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*ExpirePasswordResponse, error) {
	out := new(ExpirePasswordResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.SecuredAdminAuthN/ExpirePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecuredAdminAuthNServer is the server API for SecuredAdminAuthN service.
type SecuredAdminAuthNServer interface {
	ImportAccount(context.Context, *ImportAccountRequest) (*ImportAccountResponseEnvelope, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponseEnvelope, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error)
	UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error)
	ArchiveAccount(context.Context, *ArchiveAccountRequest) (*ArchiveAccountResponse, error)
	ExpirePassword(context.Context, *ExpirePasswordRequest) (*ExpirePasswordResponse, error)
}

func RegisterSecuredAdminAuthNServer(s *grpc.Server, srv SecuredAdminAuthNServer) {
	s.RegisterService(&_SecuredAdminAuthN_serviceDesc, srv)
}

func _SecuredAdminAuthN_ImportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ImportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ImportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ImportAccount(ctx, req.(*ImportAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_ArchiveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ArchiveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ArchiveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ArchiveAccount(ctx, req.(*ArchiveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredAdminAuthN_ExpirePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpirePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredAdminAuthNServer).ExpirePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SecuredAdminAuthN/ExpirePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredAdminAuthNServer).ExpirePassword(ctx, req.(*ExpirePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecuredAdminAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.SecuredAdminAuthN",
	HandlerType: (*SecuredAdminAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAccount",
			Handler:    _SecuredAdminAuthN_ImportAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _SecuredAdminAuthN_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _SecuredAdminAuthN_UpdateAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _SecuredAdminAuthN_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _SecuredAdminAuthN_UnlockAccount_Handler,
		},
		{
			MethodName: "ArchiveAccount",
			Handler:    _SecuredAdminAuthN_ArchiveAccount_Handler,
		},
		{
			MethodName: "ExpirePassword",
			Handler:    _SecuredAdminAuthN_ExpirePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

// AuthNActivesClient is the client API for AuthNActives service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthNActivesClient interface {
	ServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error)
}

type authNActivesClient struct {
	cc *grpc.ClientConn
}

func NewAuthNActivesClient(cc *grpc.ClientConn) AuthNActivesClient {
	return &authNActivesClient{cc}
}

func (c *authNActivesClient) ServiceStats(ctx context.Context, in *ServiceStatsRequest, opts ...grpc.CallOption) (*ServiceStatsResponse, error) {
	out := new(ServiceStatsResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.AuthNActives/ServiceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthNActivesServer is the server API for AuthNActives service.
type AuthNActivesServer interface {
	ServiceStats(context.Context, *ServiceStatsRequest) (*ServiceStatsResponse, error)
}

func RegisterAuthNActivesServer(s *grpc.Server, srv AuthNActivesServer) {
	s.RegisterService(&_AuthNActives_serviceDesc, srv)
}

func _AuthNActives_ServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNActivesServer).ServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.AuthNActives/ServiceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNActivesServer).ServiceStats(ctx, req.(*ServiceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthNActives_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.AuthNActives",
	HandlerType: (*AuthNActivesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceStats",
			Handler:    _AuthNActives_ServiceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn-private.proto",
}

func NewPopulatedGetAccountRequest(r randyAuthnPrivate, easy bool) *GetAccountRequest {
	this := &GetAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAccountResponse(r randyAuthnPrivate, easy bool) *GetAccountResponse {
	this := &GetAccountResponse{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Username = string(randStringAuthnPrivate(r))
	this.Locked = bool(bool(r.Intn(2) == 0))
	this.Deleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetAccountResponseEnvelope(r randyAuthnPrivate, easy bool) *GetAccountResponseEnvelope {
	this := &GetAccountResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedGetAccountResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAccountRequest(r randyAuthnPrivate, easy bool) *UpdateAccountRequest {
	this := &UpdateAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Username = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateAccountResponse(r randyAuthnPrivate, easy bool) *UpdateAccountResponse {
	this := &UpdateAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLockAccountRequest(r randyAuthnPrivate, easy bool) *LockAccountRequest {
	this := &LockAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLockAccountResponse(r randyAuthnPrivate, easy bool) *LockAccountResponse {
	this := &LockAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnlockAccountRequest(r randyAuthnPrivate, easy bool) *UnlockAccountRequest {
	this := &UnlockAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUnlockAccountResponse(r randyAuthnPrivate, easy bool) *UnlockAccountResponse {
	this := &UnlockAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArchiveAccountRequest(r randyAuthnPrivate, easy bool) *ArchiveAccountRequest {
	this := &ArchiveAccountRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedArchiveAccountResponse(r randyAuthnPrivate, easy bool) *ArchiveAccountResponse {
	this := &ArchiveAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountRequest(r randyAuthnPrivate, easy bool) *ImportAccountRequest {
	this := &ImportAccountRequest{}
	this.Username = string(randStringAuthnPrivate(r))
	this.Password = string(randStringAuthnPrivate(r))
	this.Locked = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountResponse(r randyAuthnPrivate, easy bool) *ImportAccountResponse {
	this := &ImportAccountResponse{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedImportAccountResponseEnvelope(r randyAuthnPrivate, easy bool) *ImportAccountResponseEnvelope {
	this := &ImportAccountResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedImportAccountResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExpirePasswordRequest(r randyAuthnPrivate, easy bool) *ExpirePasswordRequest {
	this := &ExpirePasswordRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExpirePasswordResponse(r randyAuthnPrivate, easy bool) *ExpirePasswordResponse {
	this := &ExpirePasswordResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJWKSRequest(r randyAuthnPrivate, easy bool) *JWKSRequest {
	this := &JWKSRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKey(r randyAuthnPrivate, easy bool) *Key {
	this := &Key{}
	this.Use = string(randStringAuthnPrivate(r))
	this.Alg = string(randStringAuthnPrivate(r))
	this.Kty = string(randStringAuthnPrivate(r))
	this.Kid = string(randStringAuthnPrivate(r))
	this.E = string(randStringAuthnPrivate(r))
	this.N = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJWKSResponse(r randyAuthnPrivate, easy bool) *JWKSResponse {
	this := &JWKSResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Keys = make([]*Key, v1)
		for i := 0; i < v1; i++ {
			this.Keys[i] = NewPopulatedKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsRequest(r randyAuthnPrivate, easy bool) *ServiceStatsRequest {
	this := &ServiceStatsRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsResponse(r randyAuthnPrivate, easy bool) *ServiceStatsResponse {
	this := &ServiceStatsResponse{}
	if r.Intn(10) != 0 {
		this.Actives = NewPopulatedServiceStatsResponse_ActiveStats(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatsResponse_ActiveStats(r randyAuthnPrivate, easy bool) *ServiceStatsResponse_ActiveStats {
	this := &ServiceStatsResponse_ActiveStats{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Daily = make(map[string]int64)
		for i := 0; i < v2; i++ {
			v3 := randStringAuthnPrivate(r)
			this.Daily[v3] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Daily[v3] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Weekly = make(map[string]int64)
		for i := 0; i < v4; i++ {
			v5 := randStringAuthnPrivate(r)
			this.Weekly[v5] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Weekly[v5] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Monthly = make(map[string]int64)
		for i := 0; i < v6; i++ {
			v7 := randStringAuthnPrivate(r)
			this.Monthly[v7] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Monthly[v7] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceConfigurationRequest(r randyAuthnPrivate, easy bool) *ServiceConfigurationRequest {
	this := &ServiceConfigurationRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceConfigurationResponse(r randyAuthnPrivate, easy bool) *ServiceConfigurationResponse {
	this := &ServiceConfigurationResponse{}
	this.Issuer = string(randStringAuthnPrivate(r))
	v8 := r.Intn(10)
	this.ResponseTypesSupported = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.ResponseTypesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v9 := r.Intn(10)
	this.SubjectTypesSupported = make([]string, v9)
	for i := 0; i < v9; i++ {
		this.SubjectTypesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v10 := r.Intn(10)
	this.IdTokenSigningAlgValuesSupported = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.IdTokenSigningAlgValuesSupported[i] = string(randStringAuthnPrivate(r))
	}
	v11 := r.Intn(10)
	this.ClaimsSupported = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.ClaimsSupported[i] = string(randStringAuthnPrivate(r))
	}
	this.JwksUri = string(randStringAuthnPrivate(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAuthnPrivate interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAuthnPrivate(r randyAuthnPrivate) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAuthnPrivate(r randyAuthnPrivate) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneAuthnPrivate(r)
	}
	return string(tmps)
}
func randUnrecognizedAuthnPrivate(r randyAuthnPrivate, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAuthnPrivate(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAuthnPrivate(dAtA []byte, r randyAuthnPrivate, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAuthnPrivate(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAuthnPrivate(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *GetAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "GetAccountResponse", "GetAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UnlockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlockAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ArchiveAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchiveAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArchiveAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchiveAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ImportAccountResponse", "ImportAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpirePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpirePasswordRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpirePasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpirePasswordResponse{`,
		`}`,
	}, "")
	return s
}
func (this *JWKSRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKSRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Key{`,
		`Use:` + fmt.Sprintf("%v", this.Use) + `,`,
		`Alg:` + fmt.Sprintf("%v", this.Alg) + `,`,
		`Kty:` + fmt.Sprintf("%v", this.Kty) + `,`,
		`Kid:` + fmt.Sprintf("%v", this.Kid) + `,`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`N:` + fmt.Sprintf("%v", this.N) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWKSResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKSResponse{`,
		`Keys:` + strings.Replace(fmt.Sprintf("%v", this.Keys), "Key", "Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceStatsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceStatsResponse{`,
		`Actives:` + strings.Replace(fmt.Sprintf("%v", this.Actives), "ServiceStatsResponse_ActiveStats", "ServiceStatsResponse_ActiveStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsResponse_ActiveStats) String() string {
	if this == nil {
		return "nil"
	}
	keysForDaily := make([]string, 0, len(this.Daily))
	for k, _ := range this.Daily {
		keysForDaily = append(keysForDaily, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDaily)
	mapStringForDaily := "map[string]int64{"
	for _, k := range keysForDaily {
		mapStringForDaily += fmt.Sprintf("%v: %v,", k, this.Daily[k])
	}
	mapStringForDaily += "}"
	keysForWeekly := make([]string, 0, len(this.Weekly))
	for k, _ := range this.Weekly {
		keysForWeekly = append(keysForWeekly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForWeekly)
	mapStringForWeekly := "map[string]int64{"
	for _, k := range keysForWeekly {
		mapStringForWeekly += fmt.Sprintf("%v: %v,", k, this.Weekly[k])
	}
	mapStringForWeekly += "}"
	keysForMonthly := make([]string, 0, len(this.Monthly))
	for k, _ := range this.Monthly {
		keysForMonthly = append(keysForMonthly, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMonthly)
	mapStringForMonthly := "map[string]int64{"
	for _, k := range keysForMonthly {
		mapStringForMonthly += fmt.Sprintf("%v: %v,", k, this.Monthly[k])
	}
	mapStringForMonthly += "}"
	s := strings.Join([]string{`&ServiceStatsResponse_ActiveStats{`,
		`Daily:` + mapStringForDaily + `,`,
		`Weekly:` + mapStringForWeekly + `,`,
		`Monthly:` + mapStringForMonthly + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConfigurationRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConfigurationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConfigurationResponse{`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`ResponseTypesSupported:` + fmt.Sprintf("%v", this.ResponseTypesSupported) + `,`,
		`SubjectTypesSupported:` + fmt.Sprintf("%v", this.SubjectTypesSupported) + `,`,
		`IdTokenSigningAlgValuesSupported:` + fmt.Sprintf("%v", this.IdTokenSigningAlgValuesSupported) + `,`,
		`ClaimsSupported:` + fmt.Sprintf("%v", this.ClaimsSupported) + `,`,
		`JwksUri:` + fmt.Sprintf("%v", this.JwksUri) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthnPrivate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
