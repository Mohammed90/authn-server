// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authn.proto

package grpc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SignupRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *SignupRequest) Reset()      { *m = SignupRequest{} }
func (*SignupRequest) ProtoMessage() {}
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{0}
}
func (m *SignupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignupRequest.Unmarshal(m, b)
}
func (m *SignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignupRequest.Marshal(b, m, deterministic)
}
func (m *SignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupRequest.Merge(m, src)
}
func (m *SignupRequest) XXX_Size() int {
	return xxx_messageInfo_SignupRequest.Size(m)
}
func (m *SignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignupRequest proto.InternalMessageInfo

func (m *SignupRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupResponse struct {
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
}

func (m *SignupResponse) Reset()      { *m = SignupResponse{} }
func (*SignupResponse) ProtoMessage() {}
func (*SignupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{1}
}
func (m *SignupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignupResponse.Unmarshal(m, b)
}
func (m *SignupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignupResponse.Marshal(b, m, deterministic)
}
func (m *SignupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponse.Merge(m, src)
}
func (m *SignupResponse) XXX_Size() int {
	return xxx_messageInfo_SignupResponse.Size(m)
}
func (m *SignupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponse proto.InternalMessageInfo

func (m *SignupResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type SignupResponseEnvelope struct {
	Result *SignupResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SignupResponseEnvelope) Reset()      { *m = SignupResponseEnvelope{} }
func (*SignupResponseEnvelope) ProtoMessage() {}
func (*SignupResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{2}
}
func (m *SignupResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignupResponseEnvelope.Unmarshal(m, b)
}
func (m *SignupResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignupResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *SignupResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponseEnvelope.Merge(m, src)
}
func (m *SignupResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_SignupResponseEnvelope.Size(m)
}
func (m *SignupResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponseEnvelope proto.InternalMessageInfo

func (m *SignupResponseEnvelope) GetResult() *SignupResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type IsUsernameAvailableRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *IsUsernameAvailableRequest) Reset()      { *m = IsUsernameAvailableRequest{} }
func (*IsUsernameAvailableRequest) ProtoMessage() {}
func (*IsUsernameAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{3}
}
func (m *IsUsernameAvailableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsUsernameAvailableRequest.Unmarshal(m, b)
}
func (m *IsUsernameAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsUsernameAvailableRequest.Marshal(b, m, deterministic)
}
func (m *IsUsernameAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableRequest.Merge(m, src)
}
func (m *IsUsernameAvailableRequest) XXX_Size() int {
	return xxx_messageInfo_IsUsernameAvailableRequest.Size(m)
}
func (m *IsUsernameAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableRequest proto.InternalMessageInfo

func (m *IsUsernameAvailableRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type IsUsernameAvailableResponseEnvelope struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (m *IsUsernameAvailableResponseEnvelope) Reset()      { *m = IsUsernameAvailableResponseEnvelope{} }
func (*IsUsernameAvailableResponseEnvelope) ProtoMessage() {}
func (*IsUsernameAvailableResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{4}
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Unmarshal(m, b)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Merge(m, src)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Size(m)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableResponseEnvelope proto.InternalMessageInfo

func (m *IsUsernameAvailableResponseEnvelope) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type PasswordResetRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *PasswordResetRequest) Reset()      { *m = PasswordResetRequest{} }
func (*PasswordResetRequest) ProtoMessage() {}
func (*PasswordResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{5}
}
func (m *PasswordResetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordResetRequest.Unmarshal(m, b)
}
func (m *PasswordResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordResetRequest.Marshal(b, m, deterministic)
}
func (m *PasswordResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResetRequest.Merge(m, src)
}
func (m *PasswordResetRequest) XXX_Size() int {
	return xxx_messageInfo_PasswordResetRequest.Size(m)
}
func (m *PasswordResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResetRequest proto.InternalMessageInfo

func (m *PasswordResetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type PasswordResetResponse struct {
}

func (m *PasswordResetResponse) Reset()      { *m = PasswordResetResponse{} }
func (*PasswordResetResponse) ProtoMessage() {}
func (*PasswordResetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{6}
}
func (m *PasswordResetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordResetResponse.Unmarshal(m, b)
}
func (m *PasswordResetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordResetResponse.Marshal(b, m, deterministic)
}
func (m *PasswordResetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResetResponse.Merge(m, src)
}
func (m *PasswordResetResponse) XXX_Size() int {
	return xxx_messageInfo_PasswordResetResponse.Size(m)
}
func (m *PasswordResetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResetResponse proto.InternalMessageInfo

type RequestPasswordlessLoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *RequestPasswordlessLoginRequest) Reset()      { *m = RequestPasswordlessLoginRequest{} }
func (*RequestPasswordlessLoginRequest) ProtoMessage() {}
func (*RequestPasswordlessLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{7}
}
func (m *RequestPasswordlessLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestPasswordlessLoginRequest.Unmarshal(m, b)
}
func (m *RequestPasswordlessLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestPasswordlessLoginRequest.Marshal(b, m, deterministic)
}
func (m *RequestPasswordlessLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPasswordlessLoginRequest.Merge(m, src)
}
func (m *RequestPasswordlessLoginRequest) XXX_Size() int {
	return xxx_messageInfo_RequestPasswordlessLoginRequest.Size(m)
}
func (m *RequestPasswordlessLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPasswordlessLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPasswordlessLoginRequest proto.InternalMessageInfo

func (m *RequestPasswordlessLoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type RequestPasswordlessLoginResponse struct {
}

func (m *RequestPasswordlessLoginResponse) Reset()      { *m = RequestPasswordlessLoginResponse{} }
func (*RequestPasswordlessLoginResponse) ProtoMessage() {}
func (*RequestPasswordlessLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{8}
}
func (m *RequestPasswordlessLoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestPasswordlessLoginResponse.Unmarshal(m, b)
}
func (m *RequestPasswordlessLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestPasswordlessLoginResponse.Marshal(b, m, deterministic)
}
func (m *RequestPasswordlessLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPasswordlessLoginResponse.Merge(m, src)
}
func (m *RequestPasswordlessLoginResponse) XXX_Size() int {
	return xxx_messageInfo_RequestPasswordlessLoginResponse.Size(m)
}
func (m *RequestPasswordlessLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPasswordlessLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPasswordlessLoginResponse proto.InternalMessageInfo

type SubmitPasswordlessLoginRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *SubmitPasswordlessLoginRequest) Reset()      { *m = SubmitPasswordlessLoginRequest{} }
func (*SubmitPasswordlessLoginRequest) ProtoMessage() {}
func (*SubmitPasswordlessLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{9}
}
func (m *SubmitPasswordlessLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitPasswordlessLoginRequest.Unmarshal(m, b)
}
func (m *SubmitPasswordlessLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitPasswordlessLoginRequest.Marshal(b, m, deterministic)
}
func (m *SubmitPasswordlessLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginRequest.Merge(m, src)
}
func (m *SubmitPasswordlessLoginRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitPasswordlessLoginRequest.Size(m)
}
func (m *SubmitPasswordlessLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginRequest proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SubmitPasswordlessLoginResponse struct {
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
}

func (m *SubmitPasswordlessLoginResponse) Reset()      { *m = SubmitPasswordlessLoginResponse{} }
func (*SubmitPasswordlessLoginResponse) ProtoMessage() {}
func (*SubmitPasswordlessLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{10}
}
func (m *SubmitPasswordlessLoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitPasswordlessLoginResponse.Unmarshal(m, b)
}
func (m *SubmitPasswordlessLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitPasswordlessLoginResponse.Marshal(b, m, deterministic)
}
func (m *SubmitPasswordlessLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginResponse.Merge(m, src)
}
func (m *SubmitPasswordlessLoginResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitPasswordlessLoginResponse.Size(m)
}
func (m *SubmitPasswordlessLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginResponse proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type SubmitPasswordlessLoginResponseEnvelope struct {
	Result *SubmitPasswordlessLoginResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SubmitPasswordlessLoginResponseEnvelope) Reset() {
	*m = SubmitPasswordlessLoginResponseEnvelope{}
}
func (*SubmitPasswordlessLoginResponseEnvelope) ProtoMessage() {}
func (*SubmitPasswordlessLoginResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{11}
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Unmarshal(m, b)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Merge(m, src)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Size(m)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginResponseEnvelope) GetResult() *SubmitPasswordlessLoginResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()      { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage() {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{12}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{13}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type LoginResponseEnvelope struct {
	Result *LoginResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *LoginResponseEnvelope) Reset()      { *m = LoginResponseEnvelope{} }
func (*LoginResponseEnvelope) ProtoMessage() {}
func (*LoginResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{14}
}
func (m *LoginResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponseEnvelope.Unmarshal(m, b)
}
func (m *LoginResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *LoginResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponseEnvelope.Merge(m, src)
}
func (m *LoginResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_LoginResponseEnvelope.Size(m)
}
func (m *LoginResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponseEnvelope proto.InternalMessageInfo

func (m *LoginResponseEnvelope) GetResult() *LoginResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type LogoutRequest struct {
}

func (m *LogoutRequest) Reset()      { *m = LogoutRequest{} }
func (*LogoutRequest) ProtoMessage() {}
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{15}
}
func (m *LogoutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutRequest.Unmarshal(m, b)
}
func (m *LogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutRequest.Marshal(b, m, deterministic)
}
func (m *LogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRequest.Merge(m, src)
}
func (m *LogoutRequest) XXX_Size() int {
	return xxx_messageInfo_LogoutRequest.Size(m)
}
func (m *LogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRequest proto.InternalMessageInfo

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()      { *m = LogoutResponse{} }
func (*LogoutResponse) ProtoMessage() {}
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{16}
}
func (m *LogoutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutResponse.Unmarshal(m, b)
}
func (m *LogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutResponse.Marshal(b, m, deterministic)
}
func (m *LogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutResponse.Merge(m, src)
}
func (m *LogoutResponse) XXX_Size() int {
	return xxx_messageInfo_LogoutResponse.Size(m)
}
func (m *LogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutResponse proto.InternalMessageInfo

type RefreshSessionRequest struct {
}

func (m *RefreshSessionRequest) Reset()      { *m = RefreshSessionRequest{} }
func (*RefreshSessionRequest) ProtoMessage() {}
func (*RefreshSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{17}
}
func (m *RefreshSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshSessionRequest.Unmarshal(m, b)
}
func (m *RefreshSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshSessionRequest.Marshal(b, m, deterministic)
}
func (m *RefreshSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionRequest.Merge(m, src)
}
func (m *RefreshSessionRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshSessionRequest.Size(m)
}
func (m *RefreshSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionRequest proto.InternalMessageInfo

type RefreshSessionResponse struct {
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
}

func (m *RefreshSessionResponse) Reset()      { *m = RefreshSessionResponse{} }
func (*RefreshSessionResponse) ProtoMessage() {}
func (*RefreshSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{18}
}
func (m *RefreshSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshSessionResponse.Unmarshal(m, b)
}
func (m *RefreshSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshSessionResponse.Marshal(b, m, deterministic)
}
func (m *RefreshSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionResponse.Merge(m, src)
}
func (m *RefreshSessionResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshSessionResponse.Size(m)
}
func (m *RefreshSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionResponse proto.InternalMessageInfo

func (m *RefreshSessionResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type RefreshSessionResponseEnvelope struct {
	Result *RefreshSessionResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RefreshSessionResponseEnvelope) Reset()      { *m = RefreshSessionResponseEnvelope{} }
func (*RefreshSessionResponseEnvelope) ProtoMessage() {}
func (*RefreshSessionResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{19}
}
func (m *RefreshSessionResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshSessionResponseEnvelope.Unmarshal(m, b)
}
func (m *RefreshSessionResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshSessionResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *RefreshSessionResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionResponseEnvelope.Merge(m, src)
}
func (m *RefreshSessionResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_RefreshSessionResponseEnvelope.Size(m)
}
func (m *RefreshSessionResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionResponseEnvelope proto.InternalMessageInfo

func (m *RefreshSessionResponseEnvelope) GetResult() *RefreshSessionResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type ChangePasswordRequest struct {
	Password        string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Token           string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CurrentPassword string `protobuf:"bytes,3,opt,name=currentPassword,proto3" json:"currentPassword,omitempty"`
}

func (m *ChangePasswordRequest) Reset()      { *m = ChangePasswordRequest{} }
func (*ChangePasswordRequest) ProtoMessage() {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{20}
}
func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordRequest.Unmarshal(m, b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
}
func (m *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(m, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordRequest.Size(m)
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangePasswordRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ChangePasswordRequest) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

type ChangePasswordResponse struct {
	IdToken string `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
}

func (m *ChangePasswordResponse) Reset()      { *m = ChangePasswordResponse{} }
func (*ChangePasswordResponse) ProtoMessage() {}
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{21}
}
func (m *ChangePasswordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordResponse.Unmarshal(m, b)
}
func (m *ChangePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordResponse.Marshal(b, m, deterministic)
}
func (m *ChangePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponse.Merge(m, src)
}
func (m *ChangePasswordResponse) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordResponse.Size(m)
}
func (m *ChangePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponse proto.InternalMessageInfo

func (m *ChangePasswordResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type ChangePasswordResponseEnvelope struct {
	Result *ChangePasswordResponse `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ChangePasswordResponseEnvelope) Reset()      { *m = ChangePasswordResponseEnvelope{} }
func (*ChangePasswordResponseEnvelope) ProtoMessage() {}
func (*ChangePasswordResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{22}
}
func (m *ChangePasswordResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangePasswordResponseEnvelope.Unmarshal(m, b)
}
func (m *ChangePasswordResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangePasswordResponseEnvelope.Marshal(b, m, deterministic)
}
func (m *ChangePasswordResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponseEnvelope.Merge(m, src)
}
func (m *ChangePasswordResponseEnvelope) XXX_Size() int {
	return xxx_messageInfo_ChangePasswordResponseEnvelope.Size(m)
}
func (m *ChangePasswordResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponseEnvelope proto.InternalMessageInfo

func (m *ChangePasswordResponseEnvelope) GetResult() *ChangePasswordResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()      { *m = HealthCheckRequest{} }
func (*HealthCheckRequest) ProtoMessage() {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{23}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Http  bool `protobuf:"varint,1,opt,name=http,proto3" json:"http,omitempty"`
	Db    bool `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	Redis bool `protobuf:"varint,3,opt,name=redis,proto3" json:"redis,omitempty"`
}

func (m *HealthCheckResponse) Reset()      { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage() {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b40bfba985381dd1, []int{24}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetHttp() bool {
	if m != nil {
		return m.Http
	}
	return false
}

func (m *HealthCheckResponse) GetDb() bool {
	if m != nil {
		return m.Db
	}
	return false
}

func (m *HealthCheckResponse) GetRedis() bool {
	if m != nil {
		return m.Redis
	}
	return false
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "keratin.authn.SignupRequest")
	golang_proto.RegisterType((*SignupRequest)(nil), "keratin.authn.SignupRequest")
	proto.RegisterType((*SignupResponse)(nil), "keratin.authn.SignupResponse")
	golang_proto.RegisterType((*SignupResponse)(nil), "keratin.authn.SignupResponse")
	proto.RegisterType((*SignupResponseEnvelope)(nil), "keratin.authn.SignupResponseEnvelope")
	golang_proto.RegisterType((*SignupResponseEnvelope)(nil), "keratin.authn.SignupResponseEnvelope")
	proto.RegisterType((*IsUsernameAvailableRequest)(nil), "keratin.authn.IsUsernameAvailableRequest")
	golang_proto.RegisterType((*IsUsernameAvailableRequest)(nil), "keratin.authn.IsUsernameAvailableRequest")
	proto.RegisterType((*IsUsernameAvailableResponseEnvelope)(nil), "keratin.authn.IsUsernameAvailableResponseEnvelope")
	golang_proto.RegisterType((*IsUsernameAvailableResponseEnvelope)(nil), "keratin.authn.IsUsernameAvailableResponseEnvelope")
	proto.RegisterType((*PasswordResetRequest)(nil), "keratin.authn.PasswordResetRequest")
	golang_proto.RegisterType((*PasswordResetRequest)(nil), "keratin.authn.PasswordResetRequest")
	proto.RegisterType((*PasswordResetResponse)(nil), "keratin.authn.PasswordResetResponse")
	golang_proto.RegisterType((*PasswordResetResponse)(nil), "keratin.authn.PasswordResetResponse")
	proto.RegisterType((*RequestPasswordlessLoginRequest)(nil), "keratin.authn.RequestPasswordlessLoginRequest")
	golang_proto.RegisterType((*RequestPasswordlessLoginRequest)(nil), "keratin.authn.RequestPasswordlessLoginRequest")
	proto.RegisterType((*RequestPasswordlessLoginResponse)(nil), "keratin.authn.RequestPasswordlessLoginResponse")
	golang_proto.RegisterType((*RequestPasswordlessLoginResponse)(nil), "keratin.authn.RequestPasswordlessLoginResponse")
	proto.RegisterType((*SubmitPasswordlessLoginRequest)(nil), "keratin.authn.SubmitPasswordlessLoginRequest")
	golang_proto.RegisterType((*SubmitPasswordlessLoginRequest)(nil), "keratin.authn.SubmitPasswordlessLoginRequest")
	proto.RegisterType((*SubmitPasswordlessLoginResponse)(nil), "keratin.authn.SubmitPasswordlessLoginResponse")
	golang_proto.RegisterType((*SubmitPasswordlessLoginResponse)(nil), "keratin.authn.SubmitPasswordlessLoginResponse")
	proto.RegisterType((*SubmitPasswordlessLoginResponseEnvelope)(nil), "keratin.authn.SubmitPasswordlessLoginResponseEnvelope")
	golang_proto.RegisterType((*SubmitPasswordlessLoginResponseEnvelope)(nil), "keratin.authn.SubmitPasswordlessLoginResponseEnvelope")
	proto.RegisterType((*LoginRequest)(nil), "keratin.authn.LoginRequest")
	golang_proto.RegisterType((*LoginRequest)(nil), "keratin.authn.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "keratin.authn.LoginResponse")
	golang_proto.RegisterType((*LoginResponse)(nil), "keratin.authn.LoginResponse")
	proto.RegisterType((*LoginResponseEnvelope)(nil), "keratin.authn.LoginResponseEnvelope")
	golang_proto.RegisterType((*LoginResponseEnvelope)(nil), "keratin.authn.LoginResponseEnvelope")
	proto.RegisterType((*LogoutRequest)(nil), "keratin.authn.LogoutRequest")
	golang_proto.RegisterType((*LogoutRequest)(nil), "keratin.authn.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "keratin.authn.LogoutResponse")
	golang_proto.RegisterType((*LogoutResponse)(nil), "keratin.authn.LogoutResponse")
	proto.RegisterType((*RefreshSessionRequest)(nil), "keratin.authn.RefreshSessionRequest")
	golang_proto.RegisterType((*RefreshSessionRequest)(nil), "keratin.authn.RefreshSessionRequest")
	proto.RegisterType((*RefreshSessionResponse)(nil), "keratin.authn.RefreshSessionResponse")
	golang_proto.RegisterType((*RefreshSessionResponse)(nil), "keratin.authn.RefreshSessionResponse")
	proto.RegisterType((*RefreshSessionResponseEnvelope)(nil), "keratin.authn.RefreshSessionResponseEnvelope")
	golang_proto.RegisterType((*RefreshSessionResponseEnvelope)(nil), "keratin.authn.RefreshSessionResponseEnvelope")
	proto.RegisterType((*ChangePasswordRequest)(nil), "keratin.authn.ChangePasswordRequest")
	golang_proto.RegisterType((*ChangePasswordRequest)(nil), "keratin.authn.ChangePasswordRequest")
	proto.RegisterType((*ChangePasswordResponse)(nil), "keratin.authn.ChangePasswordResponse")
	golang_proto.RegisterType((*ChangePasswordResponse)(nil), "keratin.authn.ChangePasswordResponse")
	proto.RegisterType((*ChangePasswordResponseEnvelope)(nil), "keratin.authn.ChangePasswordResponseEnvelope")
	golang_proto.RegisterType((*ChangePasswordResponseEnvelope)(nil), "keratin.authn.ChangePasswordResponseEnvelope")
	proto.RegisterType((*HealthCheckRequest)(nil), "keratin.authn.HealthCheckRequest")
	golang_proto.RegisterType((*HealthCheckRequest)(nil), "keratin.authn.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "keratin.authn.HealthCheckResponse")
	golang_proto.RegisterType((*HealthCheckResponse)(nil), "keratin.authn.HealthCheckResponse")
}

func init() { proto.RegisterFile("authn.proto", fileDescriptor_b40bfba985381dd1) }
func init() { golang_proto.RegisterFile("authn.proto", fileDescriptor_b40bfba985381dd1) }

var fileDescriptor_b40bfba985381dd1 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0x97, 0x34, 0xdd, 0xbc, 0x34, 0x9b, 0x30, 0xbb, 0x9b, 0x2c, 0x6e, 0xea, 0x94, 0x69,
	0xab, 0x96, 0x48, 0x59, 0x4b, 0x0b, 0x54, 0xa5, 0x52, 0x0f, 0x49, 0x45, 0xa1, 0x08, 0x68, 0xe5,
	0x80, 0x90, 0xb8, 0x44, 0x5e, 0xef, 0xd4, 0xb6, 0xb2, 0xf1, 0x6c, 0x3d, 0x76, 0x90, 0xe0, 0x00,
	0xe2, 0xc4, 0x11, 0xe8, 0x91, 0x3f, 0xc0, 0x81, 0x1f, 0xc0, 0x91, 0x2b, 0x37, 0x24, 0x2e, 0x3d,
	0x55, 0x6a, 0xc2, 0xa9, 0xbf, 0x80, 0x63, 0xb5, 0x33, 0x9e, 0xc9, 0x7a, 0xd6, 0xde, 0x3a, 0xbd,
	0x79, 0xe6, 0xcd, 0x7b, 0xef, 0x7b, 0xdf, 0x7b, 0xf3, 0x8d, 0x61, 0xc9, 0x4d, 0x93, 0x20, 0xea,
	0x8e, 0x62, 0x9a, 0x50, 0xb4, 0x7c, 0x40, 0x62, 0x37, 0x09, 0xa3, 0x2e, 0xdf, 0x34, 0xb7, 0xfd,
	0x30, 0x09, 0xd2, 0x7e, 0xd7, 0xa3, 0x87, 0xb6, 0x4f, 0x7d, 0x6a, 0xf3, 0x53, 0xfd, 0xf4, 0x11,
	0x5f, 0xf1, 0x05, 0xff, 0x12, 0xde, 0xe6, 0x86, 0x4f, 0xa9, 0x3f, 0x24, 0xb6, 0x3b, 0x0a, 0x6d,
	0x37, 0x8a, 0x68, 0xe2, 0x26, 0x21, 0x8d, 0x98, 0xb0, 0xe2, 0x8f, 0x60, 0x79, 0x2f, 0xf4, 0xa3,
	0x74, 0xe4, 0x90, 0xc7, 0x29, 0x61, 0x09, 0x32, 0xa1, 0x9e, 0x32, 0x12, 0x47, 0xee, 0x21, 0xe9,
	0x18, 0x97, 0x8d, 0x1b, 0x8b, 0x8e, 0x5a, 0x8f, 0x6d, 0x23, 0x97, 0xb1, 0x6f, 0x68, 0x3c, 0xe8,
	0xd4, 0x84, 0x4d, 0xae, 0xf1, 0x07, 0xd0, 0x90, 0x81, 0xd8, 0x88, 0x46, 0x8c, 0xa0, 0xeb, 0x50,
	0x0f, 0x07, 0xfb, 0x09, 0x3d, 0x20, 0x91, 0x88, 0xb4, 0x7b, 0xe1, 0xc5, 0xb3, 0x4d, 0xb5, 0xe7,
	0x9c, 0x0f, 0x07, 0x5f, 0x8c, 0x3f, 0xf0, 0x03, 0x58, 0xcb, 0xbb, 0x7e, 0x18, 0x1d, 0x91, 0x21,
	0x1d, 0x11, 0xf4, 0x3e, 0x2c, 0xc4, 0x84, 0xa5, 0xc3, 0x84, 0x07, 0x58, 0xea, 0x5d, 0xea, 0xe6,
	0xa8, 0xe8, 0xe6, 0xdd, 0x9c, 0xec, 0x30, 0xbe, 0x05, 0xe6, 0x7d, 0xf6, 0x65, 0x86, 0x7a, 0xe7,
	0xc8, 0x0d, 0x87, 0x6e, 0x7f, 0x48, 0x2a, 0x54, 0x88, 0xef, 0xc3, 0x95, 0x42, 0x4f, 0x0d, 0x17,
	0xce, 0xe1, 0xaa, 0xef, 0xc2, 0x8b, 0x67, 0x9b, 0xd9, 0x8e, 0x02, 0xd1, 0x83, 0xd6, 0xc3, 0x8c,
	0x1c, 0x87, 0x30, 0x92, 0x54, 0x49, 0xbf, 0x0e, 0x6d, 0xcd, 0x47, 0x24, 0xc6, 0x77, 0x60, 0x33,
	0xf3, 0x97, 0xf6, 0x21, 0x61, 0xec, 0x53, 0xea, 0x87, 0x51, 0x95, 0xb8, 0x18, 0x2e, 0x97, 0xbb,
	0x67, 0x29, 0x6e, 0x82, 0xb5, 0x97, 0xf6, 0x0f, 0xc3, 0xf2, 0x0c, 0x2d, 0x38, 0x37, 0xd1, 0x4d,
	0x47, 0x2c, 0xf0, 0x27, 0xb0, 0x59, 0xea, 0x77, 0xd6, 0x49, 0x78, 0x0c, 0xd7, 0x5f, 0x11, 0x4b,
	0xb5, 0xe0, 0x9e, 0x36, 0x1a, 0x5d, 0x7d, 0x34, 0x66, 0xc7, 0x51, 0x6d, 0xba, 0x07, 0x17, 0xaa,
	0xd2, 0x38, 0x73, 0xfe, 0x6f, 0xc1, 0xf2, 0x6b, 0x16, 0xfd, 0x19, 0xb4, 0x8b, 0x4b, 0x7c, 0x4f,
	0x2b, 0x71, 0x43, 0x2b, 0xb1, 0xb8, 0xa0, 0x15, 0x0e, 0x84, 0xa6, 0x72, 0xe0, 0xf0, 0x2a, 0x34,
	0xe4, 0x46, 0xd6, 0xea, 0x75, 0x68, 0x3b, 0xe4, 0x51, 0x4c, 0x58, 0xb0, 0x47, 0x18, 0x0b, 0xa9,
	0x2c, 0x1e, 0xef, 0xc0, 0x9a, 0x6e, 0x38, 0x6b, 0x35, 0xfb, 0x60, 0x15, 0x87, 0x50, 0x65, 0xdd,
	0xd1, 0xca, 0xba, 0xa6, 0x95, 0x55, 0xec, 0xae, 0xea, 0x63, 0xd0, 0xbe, 0x1b, 0xb8, 0x91, 0x4f,
	0x4e, 0x6f, 0x8a, 0xea, 0x9c, 0xea, 0x8e, 0x91, 0xef, 0xce, 0xe9, 0xe8, 0xd6, 0x26, 0x46, 0x17,
	0xdd, 0x80, 0x15, 0x2f, 0x8d, 0x63, 0x12, 0xa9, 0x39, 0xe9, 0xbc, 0xc1, 0xed, 0xfa, 0xf6, 0x98,
	0x18, 0x3d, 0xe9, 0x6b, 0x10, 0x53, 0x1c, 0xa2, 0x32, 0x31, 0xc5, 0xee, 0x8a, 0x98, 0x16, 0xa0,
	0x8f, 0x89, 0x3b, 0x4c, 0x82, 0xbb, 0x01, 0xf1, 0x0e, 0x64, 0x4b, 0x1f, 0x40, 0x33, 0xb7, 0x9b,
	0xc1, 0x46, 0x30, 0x1f, 0x24, 0xc9, 0x48, 0xe8, 0x97, 0xc3, 0xbf, 0x51, 0x03, 0x6a, 0x83, 0x3e,
	0x67, 0xa8, 0xee, 0xd4, 0x06, 0xfd, 0x31, 0x69, 0x31, 0x19, 0x84, 0x8c, 0x93, 0x52, 0x77, 0xc4,
	0xa2, 0xf7, 0x53, 0x4d, 0x3e, 0x19, 0x7b, 0x24, 0x3e, 0x0a, 0x3d, 0x82, 0x3c, 0x58, 0x10, 0x1b,
	0x68, 0xa3, 0x44, 0x9f, 0x39, 0x14, 0xf3, 0xda, 0x4c, 0xf5, 0x96, 0x34, 0xe0, 0xd6, 0x8f, 0xff,
	0xfe, 0xf7, 0xa4, 0xd6, 0xc0, 0x8b, 0xb6, 0xeb, 0x79, 0x34, 0x8d, 0x12, 0x76, 0xdb, 0xd8, 0x42,
	0xbf, 0x18, 0xd0, 0x2c, 0x90, 0x66, 0xf4, 0x8e, 0x16, 0xb4, 0x5c, 0xf8, 0xcd, 0x5e, 0x95, 0xa3,
	0x1a, 0x98, 0x8b, 0x1c, 0x4c, 0x1b, 0x35, 0x15, 0x18, 0xdb, 0x95, 0x87, 0x7b, 0xbf, 0x1a, 0x9a,
	0xc6, 0x4b, 0x46, 0xbe, 0x85, 0x96, 0xa6, 0xb7, 0xdc, 0x8c, 0xae, 0x68, 0x08, 0x8a, 0x1e, 0x08,
	0xf3, 0xea, 0xec, 0x43, 0xf2, 0x0e, 0x73, 0x60, 0x6f, 0xa2, 0x15, 0x5b, 0x0e, 0xb9, 0x1d, 0x8f,
	0x0f, 0xf4, 0xfe, 0xae, 0x41, 0x73, 0x52, 0xf6, 0x24, 0xa6, 0x27, 0x06, 0x74, 0xca, 0x1e, 0x01,
	0xd4, 0x9d, 0xba, 0x83, 0x33, 0x1f, 0x1b, 0xd3, 0xae, 0x7c, 0x3e, 0x83, 0xbb, 0xc6, 0xe1, 0xae,
	0xa2, 0x86, 0xcd, 0xc4, 0xbd, 0xb6, 0xc5, 0x15, 0xfc, 0xcd, 0x80, 0xf5, 0x12, 0xa9, 0x46, 0xdb,
	0x55, 0x25, 0x5d, 0x60, 0xba, 0x79, 0xb6, 0x17, 0x40, 0xb5, 0xf8, 0x2d, 0x0e, 0xad, 0x89, 0x35,
	0x68, 0xb7, 0x8d, 0xad, 0xde, 0x1f, 0xf3, 0xb0, 0xf4, 0x30, 0xed, 0x0f, 0x43, 0x6f, 0x27, 0x4d,
	0x82, 0xcf, 0xd1, 0x3e, 0x9c, 0x13, 0xd0, 0x2e, 0x16, 0x4b, 0x71, 0x71, 0x03, 0x8b, 0xd3, 0x36,
	0x79, 0xda, 0x65, 0x5c, 0x97, 0x69, 0xc7, 0x53, 0xfe, 0x15, 0x2c, 0x08, 0xad, 0x46, 0x05, 0x62,
	0x7f, 0xaa, 0xe9, 0xe6, 0xa5, 0x12, 0x6b, 0xc6, 0xf6, 0x2a, 0x8f, 0x0d, 0x5b, 0x2a, 0x36, 0xfa,
	0x1e, 0x1a, 0x79, 0x5d, 0x45, 0x57, 0x5f, 0x21, 0xbb, 0x22, 0xd1, 0x76, 0x25, 0x71, 0x56, 0x45,
	0x75, 0x78, 0x62, 0x84, 0x56, 0x15, 0x97, 0xb1, 0x70, 0x40, 0xdf, 0x41, 0x23, 0xaf, 0x5f, 0x53,
	0x00, 0x0a, 0x55, 0x7d, 0x0a, 0xc0, 0x6c, 0x0d, 0x9d, 0x10, 0x0f, 0x79, 0x2d, 0xc6, 0xb4, 0x12,
	0x58, 0x9a, 0x10, 0x41, 0xf4, 0xb6, 0x16, 0x73, 0x5a, 0x36, 0x4d, 0x3c, 0xeb, 0x48, 0xc6, 0xf2,
	0x0a, 0xcf, 0xb5, 0x88, 0xce, 0xdb, 0x01, 0xb7, 0xee, 0x6e, 0x3d, 0x7d, 0x6e, 0xcd, 0xfd, 0xff,
	0xdc, 0x32, 0x7e, 0x38, 0xb6, 0x8c, 0xdf, 0x8f, 0x2d, 0xe3, 0xcf, 0x63, 0xcb, 0xf8, 0xf9, 0xc4,
	0x9a, 0xfb, 0xeb, 0xc4, 0x32, 0xfe, 0x39, 0xb1, 0xe6, 0x9e, 0x9e, 0x58, 0x73, 0x5f, 0xcf, 0xfb,
	0xf1, 0xc8, 0xeb, 0x2f, 0xf0, 0xff, 0xef, 0x77, 0x5f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x28,
	0x9d, 0xbf, 0xea, 0x0b, 0x00, 0x00,
}

func (this *SignupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupRequest)
	if !ok {
		that2, ok := that.(SignupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *SignupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponse)
	if !ok {
		that2, ok := that.(SignupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *SignupResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponseEnvelope)
	if !ok {
		that2, ok := that.(SignupResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *IsUsernameAvailableRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableRequest)
	if !ok {
		that2, ok := that.(IsUsernameAvailableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *IsUsernameAvailableResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableResponseEnvelope)
	if !ok {
		that2, ok := that.(IsUsernameAvailableResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *PasswordResetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResetRequest)
	if !ok {
		that2, ok := that.(PasswordResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *PasswordResetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResetResponse)
	if !ok {
		that2, ok := that.(PasswordResetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestPasswordlessLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPasswordlessLoginRequest)
	if !ok {
		that2, ok := that.(RequestPasswordlessLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *RequestPasswordlessLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPasswordlessLoginResponse)
	if !ok {
		that2, ok := that.(RequestPasswordlessLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginRequest)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginResponse)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginResponseEnvelope)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *LoginResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponseEnvelope)
	if !ok {
		that2, ok := that.(LoginResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LogoutRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogoutRequest)
	if !ok {
		that2, ok := that.(LogoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LogoutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogoutResponse)
	if !ok {
		that2, ok := that.(LogoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshSessionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionRequest)
	if !ok {
		that2, ok := that.(RefreshSessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshSessionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionResponse)
	if !ok {
		that2, ok := that.(RefreshSessionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *RefreshSessionResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionResponseEnvelope)
	if !ok {
		that2, ok := that.(RefreshSessionResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ChangePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordRequest)
	if !ok {
		that2, ok := that.(ChangePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.CurrentPassword != that1.CurrentPassword {
		return false
	}
	return true
}
func (this *ChangePasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordResponse)
	if !ok {
		that2, ok := that.(ChangePasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *ChangePasswordResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordResponseEnvelope)
	if !ok {
		that2, ok := that.(ChangePasswordResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http != that1.Http {
		return false
	}
	if this.Db != that1.Db {
		return false
	}
	if this.Redis != that1.Redis {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignupServiceClient is the client API for SignupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignupServiceClient interface {
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error)
	IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error)
}

type signupServiceClient struct {
	cc *grpc.ClientConn
}

func NewSignupServiceClient(cc *grpc.ClientConn) SignupServiceClient {
	return &signupServiceClient{cc}
}

func (c *signupServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error) {
	out := new(SignupResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SignupService/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupServiceClient) IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error) {
	out := new(IsUsernameAvailableResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SignupService/IsUsernameAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignupServiceServer is the server API for SignupService service.
type SignupServiceServer interface {
	Signup(context.Context, *SignupRequest) (*SignupResponseEnvelope, error)
	IsUsernameAvailable(context.Context, *IsUsernameAvailableRequest) (*IsUsernameAvailableResponseEnvelope, error)
}

func RegisterSignupServiceServer(s *grpc.Server, srv SignupServiceServer) {
	s.RegisterService(&_SignupService_serviceDesc, srv)
}

func _SignupService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SignupService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignupService_IsUsernameAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUsernameAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).IsUsernameAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SignupService/IsUsernameAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).IsUsernameAvailable(ctx, req.(*IsUsernameAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.SignupService",
	HandlerType: (*SignupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _SignupService_Signup_Handler,
		},
		{
			MethodName: "IsUsernameAvailable",
			Handler:    _SignupService_IsUsernameAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PasswordResetServiceClient is the client API for PasswordResetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordResetServiceClient interface {
	RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
}

type passwordResetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordResetServiceClient(cc *grpc.ClientConn) PasswordResetServiceClient {
	return &passwordResetServiceClient{cc}
}

func (c *passwordResetServiceClient) RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordResetService/RequestPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordResetServiceServer is the server API for PasswordResetService service.
type PasswordResetServiceServer interface {
	RequestPasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
}

func RegisterPasswordResetServiceServer(s *grpc.Server, srv PasswordResetServiceServer) {
	s.RegisterService(&_PasswordResetService_serviceDesc, srv)
}

func _PasswordResetService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordResetServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordResetService/RequestPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordResetServiceServer).RequestPasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordResetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PasswordResetService",
	HandlerType: (*PasswordResetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPasswordReset",
			Handler:    _PasswordResetService_RequestPasswordReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PasswordlessServiceClient is the client API for PasswordlessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordlessServiceClient interface {
	RequestPasswordlessLogin(ctx context.Context, in *RequestPasswordlessLoginRequest, opts ...grpc.CallOption) (*RequestPasswordlessLoginResponse, error)
	SubmitPasswordlessLogin(ctx context.Context, in *SubmitPasswordlessLoginRequest, opts ...grpc.CallOption) (*SubmitPasswordlessLoginResponseEnvelope, error)
}

type passwordlessServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordlessServiceClient(cc *grpc.ClientConn) PasswordlessServiceClient {
	return &passwordlessServiceClient{cc}
}

func (c *passwordlessServiceClient) RequestPasswordlessLogin(ctx context.Context, in *RequestPasswordlessLoginRequest, opts ...grpc.CallOption) (*RequestPasswordlessLoginResponse, error) {
	out := new(RequestPasswordlessLoginResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordlessService/RequestPasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordlessServiceClient) SubmitPasswordlessLogin(ctx context.Context, in *SubmitPasswordlessLoginRequest, opts ...grpc.CallOption) (*SubmitPasswordlessLoginResponseEnvelope, error) {
	out := new(SubmitPasswordlessLoginResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordlessService/SubmitPasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordlessServiceServer is the server API for PasswordlessService service.
type PasswordlessServiceServer interface {
	RequestPasswordlessLogin(context.Context, *RequestPasswordlessLoginRequest) (*RequestPasswordlessLoginResponse, error)
	SubmitPasswordlessLogin(context.Context, *SubmitPasswordlessLoginRequest) (*SubmitPasswordlessLoginResponseEnvelope, error)
}

func RegisterPasswordlessServiceServer(s *grpc.Server, srv PasswordlessServiceServer) {
	s.RegisterService(&_PasswordlessService_serviceDesc, srv)
}

func _PasswordlessService_RequestPasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordlessServiceServer).RequestPasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordlessService/RequestPasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordlessServiceServer).RequestPasswordlessLogin(ctx, req.(*RequestPasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordlessService_SubmitPasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordlessServiceServer).SubmitPasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordlessService/SubmitPasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordlessServiceServer).SubmitPasswordlessLogin(ctx, req.(*SubmitPasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordlessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PasswordlessService",
	HandlerType: (*PasswordlessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPasswordlessLogin",
			Handler:    _PasswordlessService_RequestPasswordlessLogin_Handler,
		},
		{
			MethodName: "SubmitPasswordlessLogin",
			Handler:    _PasswordlessService_SubmitPasswordlessLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PublicAuthNClient is the client API for PublicAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicAuthNClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponseEnvelope, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponseEnvelope, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponseEnvelope, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type publicAuthNClient struct {
	cc *grpc.ClientConn
}

func NewPublicAuthNClient(cc *grpc.ClientConn) PublicAuthNClient {
	return &publicAuthNClient{cc}
}

func (c *publicAuthNClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponseEnvelope, error) {
	out := new(LoginResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponseEnvelope, error) {
	out := new(RefreshSessionResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/RefreshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponseEnvelope, error) {
	out := new(ChangePasswordResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAuthNServer is the server API for PublicAuthN service.
type PublicAuthNServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponseEnvelope, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	RefreshSession(context.Context, *RefreshSessionRequest) (*RefreshSessionResponseEnvelope, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponseEnvelope, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterPublicAuthNServer(s *grpc.Server, srv PublicAuthNServer) {
	s.RegisterService(&_PublicAuthN_serviceDesc, srv)
}

func _PublicAuthN_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_RefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).RefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/RefreshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).RefreshSession(ctx, req.(*RefreshSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PublicAuthN",
	HandlerType: (*PublicAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PublicAuthN_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PublicAuthN_Logout_Handler,
		},
		{
			MethodName: "RefreshSession",
			Handler:    _PublicAuthN_RefreshSession_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PublicAuthN_ChangePassword_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PublicAuthN_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

func NewPopulatedSignupRequest(r randyAuthn, easy bool) *SignupRequest {
	this := &SignupRequest{}
	this.Username = string(randStringAuthn(r))
	this.Password = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignupResponse(r randyAuthn, easy bool) *SignupResponse {
	this := &SignupResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignupResponseEnvelope(r randyAuthn, easy bool) *SignupResponseEnvelope {
	this := &SignupResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedSignupResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsUsernameAvailableRequest(r randyAuthn, easy bool) *IsUsernameAvailableRequest {
	this := &IsUsernameAvailableRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsUsernameAvailableResponseEnvelope(r randyAuthn, easy bool) *IsUsernameAvailableResponseEnvelope {
	this := &IsUsernameAvailableResponseEnvelope{}
	this.Result = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPasswordResetRequest(r randyAuthn, easy bool) *PasswordResetRequest {
	this := &PasswordResetRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPasswordResetResponse(r randyAuthn, easy bool) *PasswordResetResponse {
	this := &PasswordResetResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestPasswordlessLoginRequest(r randyAuthn, easy bool) *RequestPasswordlessLoginRequest {
	this := &RequestPasswordlessLoginRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestPasswordlessLoginResponse(r randyAuthn, easy bool) *RequestPasswordlessLoginResponse {
	this := &RequestPasswordlessLoginResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginRequest(r randyAuthn, easy bool) *SubmitPasswordlessLoginRequest {
	this := &SubmitPasswordlessLoginRequest{}
	this.Token = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginResponse(r randyAuthn, easy bool) *SubmitPasswordlessLoginResponse {
	this := &SubmitPasswordlessLoginResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginResponseEnvelope(r randyAuthn, easy bool) *SubmitPasswordlessLoginResponseEnvelope {
	this := &SubmitPasswordlessLoginResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedSubmitPasswordlessLoginResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginRequest(r randyAuthn, easy bool) *LoginRequest {
	this := &LoginRequest{}
	this.Username = string(randStringAuthn(r))
	this.Password = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginResponse(r randyAuthn, easy bool) *LoginResponse {
	this := &LoginResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginResponseEnvelope(r randyAuthn, easy bool) *LoginResponseEnvelope {
	this := &LoginResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedLoginResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLogoutRequest(r randyAuthn, easy bool) *LogoutRequest {
	this := &LogoutRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLogoutResponse(r randyAuthn, easy bool) *LogoutResponse {
	this := &LogoutResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionRequest(r randyAuthn, easy bool) *RefreshSessionRequest {
	this := &RefreshSessionRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionResponse(r randyAuthn, easy bool) *RefreshSessionResponse {
	this := &RefreshSessionResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionResponseEnvelope(r randyAuthn, easy bool) *RefreshSessionResponseEnvelope {
	this := &RefreshSessionResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedRefreshSessionResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordRequest(r randyAuthn, easy bool) *ChangePasswordRequest {
	this := &ChangePasswordRequest{}
	this.Password = string(randStringAuthn(r))
	this.Token = string(randStringAuthn(r))
	this.CurrentPassword = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordResponse(r randyAuthn, easy bool) *ChangePasswordResponse {
	this := &ChangePasswordResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordResponseEnvelope(r randyAuthn, easy bool) *ChangePasswordResponseEnvelope {
	this := &ChangePasswordResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedChangePasswordResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckRequest(r randyAuthn, easy bool) *HealthCheckRequest {
	this := &HealthCheckRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckResponse(r randyAuthn, easy bool) *HealthCheckResponse {
	this := &HealthCheckResponse{}
	this.Http = bool(bool(r.Intn(2) == 0))
	this.Db = bool(bool(r.Intn(2) == 0))
	this.Redis = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAuthn interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAuthn(r randyAuthn) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAuthn(r randyAuthn) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneAuthn(r)
	}
	return string(tmps)
}
func randUnrecognizedAuthn(r randyAuthn, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAuthn(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAuthn(dAtA []byte, r randyAuthn, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAuthn(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *SignupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "SignupResponse", "SignupResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableResponseEnvelope{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResetRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResetResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RequestPasswordlessLoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPasswordlessLoginRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPasswordlessLoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPasswordlessLoginResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "SubmitPasswordlessLoginResponse", "SubmitPasswordlessLoginResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "LoginResponse", "LoginResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutRequest{`,
		`}`,
	}, "")
	return s
}
func (this *LogoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "RefreshSessionResponse", "RefreshSessionResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordRequest{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`CurrentPassword:` + fmt.Sprintf("%v", this.CurrentPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ChangePasswordResponse", "ChangePasswordResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckRequest{`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`Http:` + fmt.Sprintf("%v", this.Http) + `,`,
		`Db:` + fmt.Sprintf("%v", this.Db) + `,`,
		`Redis:` + fmt.Sprintf("%v", this.Redis) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthn(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
