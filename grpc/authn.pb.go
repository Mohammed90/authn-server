// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authn.proto

package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SignupRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignupRequest) Reset()      { *m = SignupRequest{} }
func (*SignupRequest) ProtoMessage() {}
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{0}
}
func (m *SignupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupRequest.Merge(dst, src)
}
func (m *SignupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignupRequest proto.InternalMessageInfo

func (m *SignupRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignupResponse) Reset()      { *m = SignupResponse{} }
func (*SignupResponse) ProtoMessage() {}
func (*SignupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{1}
}
func (m *SignupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponse.Merge(dst, src)
}
func (m *SignupResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponse proto.InternalMessageInfo

func (m *SignupResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type SignupResponseEnvelope struct {
	Result               *SignupResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SignupResponseEnvelope) Reset()      { *m = SignupResponseEnvelope{} }
func (*SignupResponseEnvelope) ProtoMessage() {}
func (*SignupResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{2}
}
func (m *SignupResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponseEnvelope.Merge(dst, src)
}
func (m *SignupResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *SignupResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponseEnvelope proto.InternalMessageInfo

func (m *SignupResponseEnvelope) GetResult() *SignupResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type IsUsernameAvailableRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUsernameAvailableRequest) Reset()      { *m = IsUsernameAvailableRequest{} }
func (*IsUsernameAvailableRequest) ProtoMessage() {}
func (*IsUsernameAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{3}
}
func (m *IsUsernameAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUsernameAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUsernameAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsUsernameAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableRequest.Merge(dst, src)
}
func (m *IsUsernameAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsUsernameAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableRequest proto.InternalMessageInfo

func (m *IsUsernameAvailableRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type IsUsernameAvailableResponseEnvelope struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUsernameAvailableResponseEnvelope) Reset()      { *m = IsUsernameAvailableResponseEnvelope{} }
func (*IsUsernameAvailableResponseEnvelope) ProtoMessage() {}
func (*IsUsernameAvailableResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{4}
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsUsernameAvailableResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Merge(dst, src)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableResponseEnvelope proto.InternalMessageInfo

func (m *IsUsernameAvailableResponseEnvelope) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type PasswordResetRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordResetRequest) Reset()      { *m = PasswordResetRequest{} }
func (*PasswordResetRequest) ProtoMessage() {}
func (*PasswordResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{5}
}
func (m *PasswordResetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordResetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PasswordResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResetRequest.Merge(dst, src)
}
func (m *PasswordResetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PasswordResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResetRequest proto.InternalMessageInfo

func (m *PasswordResetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type PasswordResetResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordResetResponse) Reset()      { *m = PasswordResetResponse{} }
func (*PasswordResetResponse) ProtoMessage() {}
func (*PasswordResetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{6}
}
func (m *PasswordResetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordResetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordResetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PasswordResetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResetResponse.Merge(dst, src)
}
func (m *PasswordResetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PasswordResetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResetResponse proto.InternalMessageInfo

type RequestPasswordlessLoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestPasswordlessLoginRequest) Reset()      { *m = RequestPasswordlessLoginRequest{} }
func (*RequestPasswordlessLoginRequest) ProtoMessage() {}
func (*RequestPasswordlessLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{7}
}
func (m *RequestPasswordlessLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPasswordlessLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPasswordlessLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestPasswordlessLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPasswordlessLoginRequest.Merge(dst, src)
}
func (m *RequestPasswordlessLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestPasswordlessLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPasswordlessLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPasswordlessLoginRequest proto.InternalMessageInfo

func (m *RequestPasswordlessLoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type RequestPasswordlessLoginResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestPasswordlessLoginResponse) Reset()      { *m = RequestPasswordlessLoginResponse{} }
func (*RequestPasswordlessLoginResponse) ProtoMessage() {}
func (*RequestPasswordlessLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{8}
}
func (m *RequestPasswordlessLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPasswordlessLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPasswordlessLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestPasswordlessLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPasswordlessLoginResponse.Merge(dst, src)
}
func (m *RequestPasswordlessLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestPasswordlessLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPasswordlessLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPasswordlessLoginResponse proto.InternalMessageInfo

type SubmitPasswordlessLoginRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitPasswordlessLoginRequest) Reset()      { *m = SubmitPasswordlessLoginRequest{} }
func (*SubmitPasswordlessLoginRequest) ProtoMessage() {}
func (*SubmitPasswordlessLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{9}
}
func (m *SubmitPasswordlessLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitPasswordlessLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitPasswordlessLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitPasswordlessLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginRequest.Merge(dst, src)
}
func (m *SubmitPasswordlessLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitPasswordlessLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginRequest proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SubmitPasswordlessLoginResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitPasswordlessLoginResponse) Reset()      { *m = SubmitPasswordlessLoginResponse{} }
func (*SubmitPasswordlessLoginResponse) ProtoMessage() {}
func (*SubmitPasswordlessLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{10}
}
func (m *SubmitPasswordlessLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitPasswordlessLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitPasswordlessLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitPasswordlessLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginResponse.Merge(dst, src)
}
func (m *SubmitPasswordlessLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitPasswordlessLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginResponse proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type SubmitPasswordlessLoginResponseEnvelope struct {
	Result               *SubmitPasswordlessLoginResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SubmitPasswordlessLoginResponseEnvelope) Reset() {
	*m = SubmitPasswordlessLoginResponseEnvelope{}
}
func (*SubmitPasswordlessLoginResponseEnvelope) ProtoMessage() {}
func (*SubmitPasswordlessLoginResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{11}
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitPasswordlessLoginResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.Merge(dst, src)
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *SubmitPasswordlessLoginResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitPasswordlessLoginResponseEnvelope proto.InternalMessageInfo

func (m *SubmitPasswordlessLoginResponseEnvelope) GetResult() *SubmitPasswordlessLoginResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type LoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()      { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage() {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{12}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(dst, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()      { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage() {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{13}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(dst, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type LoginResponseEnvelope struct {
	Result               *LoginResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LoginResponseEnvelope) Reset()      { *m = LoginResponseEnvelope{} }
func (*LoginResponseEnvelope) ProtoMessage() {}
func (*LoginResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{14}
}
func (m *LoginResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponseEnvelope.Merge(dst, src)
}
func (m *LoginResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponseEnvelope proto.InternalMessageInfo

func (m *LoginResponseEnvelope) GetResult() *LoginResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type LogoutRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutRequest) Reset()      { *m = LogoutRequest{} }
func (*LogoutRequest) ProtoMessage() {}
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{15}
}
func (m *LogoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRequest.Merge(dst, src)
}
func (m *LogoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRequest proto.InternalMessageInfo

type LogoutResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutResponse) Reset()      { *m = LogoutResponse{} }
func (*LogoutResponse) ProtoMessage() {}
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{16}
}
func (m *LogoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutResponse.Merge(dst, src)
}
func (m *LogoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutResponse proto.InternalMessageInfo

type RefreshSessionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSessionRequest) Reset()      { *m = RefreshSessionRequest{} }
func (*RefreshSessionRequest) ProtoMessage() {}
func (*RefreshSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{17}
}
func (m *RefreshSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefreshSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionRequest.Merge(dst, src)
}
func (m *RefreshSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionRequest proto.InternalMessageInfo

type RefreshSessionResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSessionResponse) Reset()      { *m = RefreshSessionResponse{} }
func (*RefreshSessionResponse) ProtoMessage() {}
func (*RefreshSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{18}
}
func (m *RefreshSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefreshSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionResponse.Merge(dst, src)
}
func (m *RefreshSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionResponse proto.InternalMessageInfo

func (m *RefreshSessionResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type RefreshSessionResponseEnvelope struct {
	Result               *RefreshSessionResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RefreshSessionResponseEnvelope) Reset()      { *m = RefreshSessionResponseEnvelope{} }
func (*RefreshSessionResponseEnvelope) ProtoMessage() {}
func (*RefreshSessionResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{19}
}
func (m *RefreshSessionResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSessionResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSessionResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefreshSessionResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSessionResponseEnvelope.Merge(dst, src)
}
func (m *RefreshSessionResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSessionResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSessionResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSessionResponseEnvelope proto.InternalMessageInfo

func (m *RefreshSessionResponseEnvelope) GetResult() *RefreshSessionResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type ChangePasswordRequest struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CurrentPassword      string   `protobuf:"bytes,3,opt,name=currentPassword,proto3" json:"currentPassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordRequest) Reset()      { *m = ChangePasswordRequest{} }
func (*ChangePasswordRequest) ProtoMessage() {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{20}
}
func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(dst, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangePasswordRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ChangePasswordRequest) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

type ChangePasswordResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordResponse) Reset()      { *m = ChangePasswordResponse{} }
func (*ChangePasswordResponse) ProtoMessage() {}
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{21}
}
func (m *ChangePasswordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePasswordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePasswordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangePasswordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponse.Merge(dst, src)
}
func (m *ChangePasswordResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChangePasswordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponse proto.InternalMessageInfo

func (m *ChangePasswordResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type ChangePasswordResponseEnvelope struct {
	Result               *ChangePasswordResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ChangePasswordResponseEnvelope) Reset()      { *m = ChangePasswordResponseEnvelope{} }
func (*ChangePasswordResponseEnvelope) ProtoMessage() {}
func (*ChangePasswordResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{22}
}
func (m *ChangePasswordResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePasswordResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePasswordResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangePasswordResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordResponseEnvelope.Merge(dst, src)
}
func (m *ChangePasswordResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *ChangePasswordResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordResponseEnvelope proto.InternalMessageInfo

func (m *ChangePasswordResponseEnvelope) GetResult() *ChangePasswordResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type HealthCheckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()      { *m = HealthCheckRequest{} }
func (*HealthCheckRequest) ProtoMessage() {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{23}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(dst, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Http                 bool     `protobuf:"varint,1,opt,name=http,proto3" json:"http,omitempty"`
	Db                   bool     `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	Redis                bool     `protobuf:"varint,3,opt,name=redis,proto3" json:"redis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResponse) Reset()      { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage() {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_4d129f6c4b8d03bc, []int{24}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(dst, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetHttp() bool {
	if m != nil {
		return m.Http
	}
	return false
}

func (m *HealthCheckResponse) GetDb() bool {
	if m != nil {
		return m.Db
	}
	return false
}

func (m *HealthCheckResponse) GetRedis() bool {
	if m != nil {
		return m.Redis
	}
	return false
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "keratin.authn.SignupRequest")
	proto.RegisterType((*SignupResponse)(nil), "keratin.authn.SignupResponse")
	proto.RegisterType((*SignupResponseEnvelope)(nil), "keratin.authn.SignupResponseEnvelope")
	proto.RegisterType((*IsUsernameAvailableRequest)(nil), "keratin.authn.IsUsernameAvailableRequest")
	proto.RegisterType((*IsUsernameAvailableResponseEnvelope)(nil), "keratin.authn.IsUsernameAvailableResponseEnvelope")
	proto.RegisterType((*PasswordResetRequest)(nil), "keratin.authn.PasswordResetRequest")
	proto.RegisterType((*PasswordResetResponse)(nil), "keratin.authn.PasswordResetResponse")
	proto.RegisterType((*RequestPasswordlessLoginRequest)(nil), "keratin.authn.RequestPasswordlessLoginRequest")
	proto.RegisterType((*RequestPasswordlessLoginResponse)(nil), "keratin.authn.RequestPasswordlessLoginResponse")
	proto.RegisterType((*SubmitPasswordlessLoginRequest)(nil), "keratin.authn.SubmitPasswordlessLoginRequest")
	proto.RegisterType((*SubmitPasswordlessLoginResponse)(nil), "keratin.authn.SubmitPasswordlessLoginResponse")
	proto.RegisterType((*SubmitPasswordlessLoginResponseEnvelope)(nil), "keratin.authn.SubmitPasswordlessLoginResponseEnvelope")
	proto.RegisterType((*LoginRequest)(nil), "keratin.authn.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "keratin.authn.LoginResponse")
	proto.RegisterType((*LoginResponseEnvelope)(nil), "keratin.authn.LoginResponseEnvelope")
	proto.RegisterType((*LogoutRequest)(nil), "keratin.authn.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "keratin.authn.LogoutResponse")
	proto.RegisterType((*RefreshSessionRequest)(nil), "keratin.authn.RefreshSessionRequest")
	proto.RegisterType((*RefreshSessionResponse)(nil), "keratin.authn.RefreshSessionResponse")
	proto.RegisterType((*RefreshSessionResponseEnvelope)(nil), "keratin.authn.RefreshSessionResponseEnvelope")
	proto.RegisterType((*ChangePasswordRequest)(nil), "keratin.authn.ChangePasswordRequest")
	proto.RegisterType((*ChangePasswordResponse)(nil), "keratin.authn.ChangePasswordResponse")
	proto.RegisterType((*ChangePasswordResponseEnvelope)(nil), "keratin.authn.ChangePasswordResponseEnvelope")
	proto.RegisterType((*HealthCheckRequest)(nil), "keratin.authn.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "keratin.authn.HealthCheckResponse")
}
func (this *SignupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupRequest)
	if !ok {
		that2, ok := that.(SignupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *SignupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponse)
	if !ok {
		that2, ok := that.(SignupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *SignupResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponseEnvelope)
	if !ok {
		that2, ok := that.(SignupResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *IsUsernameAvailableRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableRequest)
	if !ok {
		that2, ok := that.(IsUsernameAvailableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *IsUsernameAvailableResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableResponseEnvelope)
	if !ok {
		that2, ok := that.(IsUsernameAvailableResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *PasswordResetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResetRequest)
	if !ok {
		that2, ok := that.(PasswordResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *PasswordResetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResetResponse)
	if !ok {
		that2, ok := that.(PasswordResetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestPasswordlessLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPasswordlessLoginRequest)
	if !ok {
		that2, ok := that.(RequestPasswordlessLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *RequestPasswordlessLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPasswordlessLoginResponse)
	if !ok {
		that2, ok := that.(RequestPasswordlessLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginRequest)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginResponse)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *SubmitPasswordlessLoginResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitPasswordlessLoginResponseEnvelope)
	if !ok {
		that2, ok := that.(SubmitPasswordlessLoginResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *LoginResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponseEnvelope)
	if !ok {
		that2, ok := that.(LoginResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LogoutRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogoutRequest)
	if !ok {
		that2, ok := that.(LogoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LogoutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogoutResponse)
	if !ok {
		that2, ok := that.(LogoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshSessionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionRequest)
	if !ok {
		that2, ok := that.(RefreshSessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshSessionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionResponse)
	if !ok {
		that2, ok := that.(RefreshSessionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *RefreshSessionResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshSessionResponseEnvelope)
	if !ok {
		that2, ok := that.(RefreshSessionResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ChangePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordRequest)
	if !ok {
		that2, ok := that.(ChangePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.CurrentPassword != that1.CurrentPassword {
		return false
	}
	return true
}
func (this *ChangePasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordResponse)
	if !ok {
		that2, ok := that.(ChangePasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *ChangePasswordResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordResponseEnvelope)
	if !ok {
		that2, ok := that.(ChangePasswordResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *HealthCheckRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckRequest)
	if !ok {
		that2, ok := that.(HealthCheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http != that1.Http {
		return false
	}
	if this.Db != that1.Db {
		return false
	}
	if this.Redis != that1.Redis {
		return false
	}
	return true
}
func (this *SignupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.SignupRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SignupResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SignupResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsUsernameAvailableRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.IsUsernameAvailableRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsUsernameAvailableResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.IsUsernameAvailableResponseEnvelope{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordResetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.PasswordResetRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordResetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.PasswordResetResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPasswordlessLoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.RequestPasswordlessLoginRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPasswordlessLoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.RequestPasswordlessLoginResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitPasswordlessLoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SubmitPasswordlessLoginRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitPasswordlessLoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SubmitPasswordlessLoginResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitPasswordlessLoginResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SubmitPasswordlessLoginResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.LoginRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.LoginResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.LoginResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogoutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.LogoutRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogoutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.LogoutResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshSessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.RefreshSessionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshSessionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.RefreshSessionResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshSessionResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.RefreshSessionResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.ChangePasswordRequest{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "CurrentPassword: "+fmt.Sprintf("%#v", this.CurrentPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangePasswordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ChangePasswordResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangePasswordResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ChangePasswordResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.HealthCheckRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.HealthCheckResponse{")
	s = append(s, "Http: "+fmt.Sprintf("%#v", this.Http)+",\n")
	s = append(s, "Db: "+fmt.Sprintf("%#v", this.Db)+",\n")
	s = append(s, "Redis: "+fmt.Sprintf("%#v", this.Redis)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthn(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignupServiceClient is the client API for SignupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignupServiceClient interface {
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error)
	IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error)
}

type signupServiceClient struct {
	cc *grpc.ClientConn
}

func NewSignupServiceClient(cc *grpc.ClientConn) SignupServiceClient {
	return &signupServiceClient{cc}
}

func (c *signupServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error) {
	out := new(SignupResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SignupService/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signupServiceClient) IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error) {
	out := new(IsUsernameAvailableResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.SignupService/IsUsernameAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignupServiceServer is the server API for SignupService service.
type SignupServiceServer interface {
	Signup(context.Context, *SignupRequest) (*SignupResponseEnvelope, error)
	IsUsernameAvailable(context.Context, *IsUsernameAvailableRequest) (*IsUsernameAvailableResponseEnvelope, error)
}

func RegisterSignupServiceServer(s *grpc.Server, srv SignupServiceServer) {
	s.RegisterService(&_SignupService_serviceDesc, srv)
}

func _SignupService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SignupService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignupService_IsUsernameAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUsernameAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignupServiceServer).IsUsernameAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.SignupService/IsUsernameAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignupServiceServer).IsUsernameAvailable(ctx, req.(*IsUsernameAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.SignupService",
	HandlerType: (*SignupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _SignupService_Signup_Handler,
		},
		{
			MethodName: "IsUsernameAvailable",
			Handler:    _SignupService_IsUsernameAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PasswordResetServiceClient is the client API for PasswordResetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordResetServiceClient interface {
	RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
}

type passwordResetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordResetServiceClient(cc *grpc.ClientConn) PasswordResetServiceClient {
	return &passwordResetServiceClient{cc}
}

func (c *passwordResetServiceClient) RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordResetService/RequestPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordResetServiceServer is the server API for PasswordResetService service.
type PasswordResetServiceServer interface {
	RequestPasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
}

func RegisterPasswordResetServiceServer(s *grpc.Server, srv PasswordResetServiceServer) {
	s.RegisterService(&_PasswordResetService_serviceDesc, srv)
}

func _PasswordResetService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordResetServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordResetService/RequestPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordResetServiceServer).RequestPasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordResetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PasswordResetService",
	HandlerType: (*PasswordResetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPasswordReset",
			Handler:    _PasswordResetService_RequestPasswordReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PasswordlessServiceClient is the client API for PasswordlessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordlessServiceClient interface {
	RequestPasswordlessLogin(ctx context.Context, in *RequestPasswordlessLoginRequest, opts ...grpc.CallOption) (*RequestPasswordlessLoginResponse, error)
	SubmitPasswordlessLogin(ctx context.Context, in *SubmitPasswordlessLoginRequest, opts ...grpc.CallOption) (*SubmitPasswordlessLoginResponseEnvelope, error)
}

type passwordlessServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordlessServiceClient(cc *grpc.ClientConn) PasswordlessServiceClient {
	return &passwordlessServiceClient{cc}
}

func (c *passwordlessServiceClient) RequestPasswordlessLogin(ctx context.Context, in *RequestPasswordlessLoginRequest, opts ...grpc.CallOption) (*RequestPasswordlessLoginResponse, error) {
	out := new(RequestPasswordlessLoginResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordlessService/RequestPasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordlessServiceClient) SubmitPasswordlessLogin(ctx context.Context, in *SubmitPasswordlessLoginRequest, opts ...grpc.CallOption) (*SubmitPasswordlessLoginResponseEnvelope, error) {
	out := new(SubmitPasswordlessLoginResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PasswordlessService/SubmitPasswordlessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordlessServiceServer is the server API for PasswordlessService service.
type PasswordlessServiceServer interface {
	RequestPasswordlessLogin(context.Context, *RequestPasswordlessLoginRequest) (*RequestPasswordlessLoginResponse, error)
	SubmitPasswordlessLogin(context.Context, *SubmitPasswordlessLoginRequest) (*SubmitPasswordlessLoginResponseEnvelope, error)
}

func RegisterPasswordlessServiceServer(s *grpc.Server, srv PasswordlessServiceServer) {
	s.RegisterService(&_PasswordlessService_serviceDesc, srv)
}

func _PasswordlessService_RequestPasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordlessServiceServer).RequestPasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordlessService/RequestPasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordlessServiceServer).RequestPasswordlessLogin(ctx, req.(*RequestPasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordlessService_SubmitPasswordlessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPasswordlessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordlessServiceServer).SubmitPasswordlessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PasswordlessService/SubmitPasswordlessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordlessServiceServer).SubmitPasswordlessLogin(ctx, req.(*SubmitPasswordlessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordlessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PasswordlessService",
	HandlerType: (*PasswordlessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPasswordlessLogin",
			Handler:    _PasswordlessService_RequestPasswordlessLogin_Handler,
		},
		{
			MethodName: "SubmitPasswordlessLogin",
			Handler:    _PasswordlessService_SubmitPasswordlessLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

// PublicAuthNClient is the client API for PublicAuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicAuthNClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponseEnvelope, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponseEnvelope, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponseEnvelope, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type publicAuthNClient struct {
	cc *grpc.ClientConn
}

func NewPublicAuthNClient(cc *grpc.ClientConn) PublicAuthNClient {
	return &publicAuthNClient{cc}
}

func (c *publicAuthNClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponseEnvelope, error) {
	out := new(LoginResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) RefreshSession(ctx context.Context, in *RefreshSessionRequest, opts ...grpc.CallOption) (*RefreshSessionResponseEnvelope, error) {
	out := new(RefreshSessionResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/RefreshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponseEnvelope, error) {
	out := new(ChangePasswordResponseEnvelope)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAuthNClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/keratin.authn.PublicAuthN/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAuthNServer is the server API for PublicAuthN service.
type PublicAuthNServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponseEnvelope, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	RefreshSession(context.Context, *RefreshSessionRequest) (*RefreshSessionResponseEnvelope, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponseEnvelope, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterPublicAuthNServer(s *grpc.Server, srv PublicAuthNServer) {
	s.RegisterService(&_PublicAuthN_serviceDesc, srv)
}

func _PublicAuthN_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_RefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).RefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/RefreshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).RefreshSession(ctx, req.(*RefreshSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAuthN_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAuthNServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keratin.authn.PublicAuthN/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAuthNServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicAuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keratin.authn.PublicAuthN",
	HandlerType: (*PublicAuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PublicAuthN_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PublicAuthN_Logout_Handler,
		},
		{
			MethodName: "RefreshSession",
			Handler:    _PublicAuthN_RefreshSession_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PublicAuthN_ChangePassword_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PublicAuthN_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

func (m *SignupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *SignupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *SignupResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n1, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IsUsernameAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUsernameAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *IsUsernameAvailableResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUsernameAvailableResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PasswordResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *PasswordResetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordResetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestPasswordlessLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPasswordlessLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *RequestPasswordlessLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPasswordlessLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SubmitPasswordlessLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitPasswordlessLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *SubmitPasswordlessLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitPasswordlessLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *SubmitPasswordlessLoginResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitPasswordlessLoginResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n2, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *LoginResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n3, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LogoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LogoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefreshSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefreshSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *RefreshSessionResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSessionResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n4, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ChangePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.CurrentPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.CurrentPassword)))
		i += copy(dAtA[i:], m.CurrentPassword)
	}
	return i, nil
}

func (m *ChangePasswordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *ChangePasswordResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Http {
		dAtA[i] = 0x8
		i++
		if m.Http {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Db {
		dAtA[i] = 0x10
		i++
		if m.Db {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Redis {
		dAtA[i] = 0x18
		i++
		if m.Redis {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintAuthn(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSignupRequest(r randyAuthn, easy bool) *SignupRequest {
	this := &SignupRequest{}
	this.Username = string(randStringAuthn(r))
	this.Password = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignupResponse(r randyAuthn, easy bool) *SignupResponse {
	this := &SignupResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSignupResponseEnvelope(r randyAuthn, easy bool) *SignupResponseEnvelope {
	this := &SignupResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedSignupResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsUsernameAvailableRequest(r randyAuthn, easy bool) *IsUsernameAvailableRequest {
	this := &IsUsernameAvailableRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIsUsernameAvailableResponseEnvelope(r randyAuthn, easy bool) *IsUsernameAvailableResponseEnvelope {
	this := &IsUsernameAvailableResponseEnvelope{}
	this.Result = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPasswordResetRequest(r randyAuthn, easy bool) *PasswordResetRequest {
	this := &PasswordResetRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPasswordResetResponse(r randyAuthn, easy bool) *PasswordResetResponse {
	this := &PasswordResetResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestPasswordlessLoginRequest(r randyAuthn, easy bool) *RequestPasswordlessLoginRequest {
	this := &RequestPasswordlessLoginRequest{}
	this.Username = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestPasswordlessLoginResponse(r randyAuthn, easy bool) *RequestPasswordlessLoginResponse {
	this := &RequestPasswordlessLoginResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginRequest(r randyAuthn, easy bool) *SubmitPasswordlessLoginRequest {
	this := &SubmitPasswordlessLoginRequest{}
	this.Token = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginResponse(r randyAuthn, easy bool) *SubmitPasswordlessLoginResponse {
	this := &SubmitPasswordlessLoginResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubmitPasswordlessLoginResponseEnvelope(r randyAuthn, easy bool) *SubmitPasswordlessLoginResponseEnvelope {
	this := &SubmitPasswordlessLoginResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedSubmitPasswordlessLoginResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginRequest(r randyAuthn, easy bool) *LoginRequest {
	this := &LoginRequest{}
	this.Username = string(randStringAuthn(r))
	this.Password = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginResponse(r randyAuthn, easy bool) *LoginResponse {
	this := &LoginResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLoginResponseEnvelope(r randyAuthn, easy bool) *LoginResponseEnvelope {
	this := &LoginResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedLoginResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLogoutRequest(r randyAuthn, easy bool) *LogoutRequest {
	this := &LogoutRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLogoutResponse(r randyAuthn, easy bool) *LogoutResponse {
	this := &LogoutResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionRequest(r randyAuthn, easy bool) *RefreshSessionRequest {
	this := &RefreshSessionRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionResponse(r randyAuthn, easy bool) *RefreshSessionResponse {
	this := &RefreshSessionResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRefreshSessionResponseEnvelope(r randyAuthn, easy bool) *RefreshSessionResponseEnvelope {
	this := &RefreshSessionResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedRefreshSessionResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordRequest(r randyAuthn, easy bool) *ChangePasswordRequest {
	this := &ChangePasswordRequest{}
	this.Password = string(randStringAuthn(r))
	this.Token = string(randStringAuthn(r))
	this.CurrentPassword = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordResponse(r randyAuthn, easy bool) *ChangePasswordResponse {
	this := &ChangePasswordResponse{}
	this.IdToken = string(randStringAuthn(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangePasswordResponseEnvelope(r randyAuthn, easy bool) *ChangePasswordResponseEnvelope {
	this := &ChangePasswordResponseEnvelope{}
	if r.Intn(10) != 0 {
		this.Result = NewPopulatedChangePasswordResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckRequest(r randyAuthn, easy bool) *HealthCheckRequest {
	this := &HealthCheckRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedHealthCheckResponse(r randyAuthn, easy bool) *HealthCheckResponse {
	this := &HealthCheckResponse{}
	this.Http = bool(bool(r.Intn(2) == 0))
	this.Db = bool(bool(r.Intn(2) == 0))
	this.Redis = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAuthn interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAuthn(r randyAuthn) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAuthn(r randyAuthn) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneAuthn(r)
	}
	return string(tmps)
}
func randUnrecognizedAuthn(r randyAuthn, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAuthn(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAuthn(dAtA []byte, r randyAuthn, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAuthn(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAuthn(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SignupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SignupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SignupResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *IsUsernameAvailableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *IsUsernameAvailableResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *PasswordResetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *PasswordResetResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RequestPasswordlessLoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *RequestPasswordlessLoginResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SubmitPasswordlessLoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SubmitPasswordlessLoginResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SubmitPasswordlessLoginResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *LoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *LoginResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *LogoutRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LogoutResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RefreshSessionRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RefreshSessionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *RefreshSessionResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ChangePasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.CurrentPassword)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ChangePasswordResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ChangePasswordResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Http {
		n += 2
	}
	if m.Db {
		n += 2
	}
	if m.Redis {
		n += 2
	}
	return n
}

func sovAuthn(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthn(x uint64) (n int) {
	return sovAuthn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SignupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "SignupResponse", "SignupResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableResponseEnvelope{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResetRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResetResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RequestPasswordlessLoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPasswordlessLoginRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPasswordlessLoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPasswordlessLoginResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitPasswordlessLoginResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitPasswordlessLoginResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "SubmitPasswordlessLoginResponse", "SubmitPasswordlessLoginResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "LoginResponse", "LoginResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutRequest{`,
		`}`,
	}, "")
	return s
}
func (this *LogoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefreshSessionResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshSessionResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "RefreshSessionResponse", "RefreshSessionResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordRequest{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`CurrentPassword:` + fmt.Sprintf("%v", this.CurrentPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ChangePasswordResponse", "ChangePasswordResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckRequest{`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`Http:` + fmt.Sprintf("%v", this.Http) + `,`,
		`Db:` + fmt.Sprintf("%v", this.Db) + `,`,
		`Redis:` + fmt.Sprintf("%v", this.Redis) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthn(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SignupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SignupResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUsernameAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUsernameAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUsernameAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUsernameAvailableResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUsernameAvailableResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUsernameAvailableResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordResetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordResetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordResetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPasswordlessLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPasswordlessLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPasswordlessLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPasswordlessLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPasswordlessLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPasswordlessLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitPasswordlessLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitPasswordlessLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitPasswordlessLoginResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitPasswordlessLoginResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SubmitPasswordlessLoginResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &LoginResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSessionResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSessionResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSessionResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &RefreshSessionResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ChangePasswordResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Http = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Db = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redis = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthn
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthn
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthn(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthn = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthn   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authn.proto", fileDescriptor_authn_4d129f6c4b8d03bc) }

var fileDescriptor_authn_4d129f6c4b8d03bc = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x98, 0x34, 0x75, 0x5e, 0x1a, 0x27, 0x8c, 0xed, 0xc4, 0x6c, 0xd3, 0x4d, 0x99, 0xb6,
	0x6a, 0x89, 0x54, 0xaf, 0x64, 0xa0, 0x2a, 0x91, 0x7a, 0x48, 0x2a, 0x0a, 0x45, 0x40, 0xab, 0x0d,
	0x08, 0x89, 0x4b, 0xb4, 0xb6, 0x07, 0x7b, 0x15, 0x77, 0xc7, 0xdd, 0xd9, 0x0d, 0x12, 0x1c, 0x40,
	0x9c, 0x38, 0x02, 0x3d, 0xf2, 0x05, 0x38, 0xf0, 0x01, 0xf8, 0x08, 0x70, 0xab, 0xc4, 0x85, 0x53,
	0x45, 0x0c, 0x07, 0xd4, 0x53, 0x8f, 0x1c, 0xab, 0x9d, 0xd9, 0x99, 0x78, 0x27, 0xbb, 0xee, 0xa6,
	0x37, 0xef, 0xbc, 0x7f, 0xbf, 0xf7, 0x7b, 0x6f, 0x7e, 0x63, 0x58, 0xf2, 0xe2, 0x68, 0x18, 0xb4,
	0xc7, 0x21, 0x8b, 0x18, 0x5e, 0x3e, 0xa0, 0xa1, 0x17, 0xf9, 0x41, 0x5b, 0x1c, 0x5a, 0x8d, 0x01,
	0x1b, 0x30, 0x61, 0x71, 0x92, 0x5f, 0xd2, 0xc9, 0xda, 0x18, 0x30, 0x36, 0x18, 0x51, 0xc7, 0x1b,
	0xfb, 0x8e, 0x17, 0x04, 0x2c, 0xf2, 0x22, 0x9f, 0x05, 0x5c, 0x5a, 0xc9, 0x7b, 0xb0, 0xbc, 0xe7,
	0x0f, 0x82, 0x78, 0xec, 0xd2, 0x87, 0x31, 0xe5, 0x11, 0xb6, 0xa0, 0x1a, 0x73, 0x1a, 0x06, 0xde,
	0x03, 0xda, 0x42, 0x17, 0xd1, 0xb5, 0x45, 0x57, 0x7f, 0x27, 0xb6, 0xb1, 0xc7, 0xf9, 0x97, 0x2c,
	0xec, 0xb7, 0x2a, 0xd2, 0xa6, 0xbe, 0xc9, 0x3b, 0x50, 0x53, 0x89, 0xf8, 0x98, 0x05, 0x9c, 0xe2,
	0xab, 0x50, 0xf5, 0xfb, 0xfb, 0x11, 0x3b, 0xa0, 0x81, 0xcc, 0xb4, 0x7b, 0xee, 0xe9, 0x93, 0x4d,
	0x7d, 0xe6, 0x9e, 0xf5, 0xfb, 0x9f, 0x24, 0x3f, 0xc8, 0x3d, 0x58, 0xcb, 0x86, 0xbe, 0x1b, 0x1c,
	0xd2, 0x11, 0x1b, 0x53, 0xfc, 0x36, 0x2c, 0x84, 0x94, 0xc7, 0xa3, 0x48, 0x24, 0x58, 0xea, 0x5c,
	0x68, 0x67, 0x3a, 0x6e, 0x67, 0xc3, 0xdc, 0xd4, 0x99, 0xdc, 0x04, 0xeb, 0x2e, 0xff, 0x34, 0x45,
	0xbd, 0x73, 0xe8, 0xf9, 0x23, 0xaf, 0x3b, 0xa2, 0x25, 0x3a, 0x24, 0x77, 0xe1, 0x52, 0x6e, 0xa4,
	0x81, 0x8b, 0x64, 0x70, 0x55, 0x77, 0xe1, 0xe9, 0x93, 0xcd, 0xf4, 0x44, 0x83, 0xe8, 0x40, 0xe3,
	0x7e, 0x4a, 0x8e, 0x4b, 0x39, 0x8d, 0xca, 0x94, 0x5f, 0x87, 0xa6, 0x11, 0x23, 0x0b, 0x93, 0x5b,
	0xb0, 0x99, 0xc6, 0x2b, 0xfb, 0x88, 0x72, 0xfe, 0x21, 0x1b, 0xf8, 0x41, 0x99, 0xbc, 0x04, 0x2e,
	0x16, 0x87, 0xa7, 0x25, 0x6e, 0x80, 0xbd, 0x17, 0x77, 0x1f, 0xf8, 0xc5, 0x15, 0x1a, 0x70, 0x66,
	0x6a, 0x9a, 0xae, 0xfc, 0x20, 0x1f, 0xc0, 0x66, 0x61, 0xdc, 0x69, 0x37, 0xe1, 0x21, 0x5c, 0x7d,
	0x41, 0x2e, 0x3d, 0x82, 0x3b, 0xc6, 0x6a, 0xb4, 0xcd, 0xd5, 0x98, 0x9d, 0x47, 0x8f, 0xe9, 0x0e,
	0x9c, 0x2b, 0x4b, 0xe3, 0xcc, 0xfd, 0xbf, 0x09, 0xcb, 0x2f, 0xd9, 0xf4, 0x47, 0xd0, 0xcc, 0x6f,
	0xf1, 0x2d, 0xa3, 0xc5, 0x0d, 0xa3, 0xc5, 0xfc, 0x86, 0x56, 0x04, 0x10, 0x16, 0xab, 0x85, 0x23,
	0xab, 0x50, 0x53, 0x07, 0xe9, 0xa8, 0xd7, 0xa1, 0xe9, 0xd2, 0x2f, 0x42, 0xca, 0x87, 0x7b, 0x94,
	0x73, 0x9f, 0xa9, 0xe6, 0xc9, 0x0e, 0xac, 0x99, 0x86, 0xd3, 0x76, 0xb3, 0x0f, 0x76, 0x7e, 0x0a,
	0xdd, 0xd6, 0x2d, 0xa3, 0xad, 0x2b, 0x46, 0x5b, 0xf9, 0xe1, 0xba, 0x3f, 0x0e, 0xcd, 0xdb, 0x43,
	0x2f, 0x18, 0xd0, 0xe3, 0x9b, 0xa2, 0x27, 0xa7, 0xa7, 0x83, 0xb2, 0xd3, 0x39, 0x5e, 0xdd, 0xca,
	0xd4, 0xea, 0xe2, 0x6b, 0xb0, 0xd2, 0x8b, 0xc3, 0x90, 0x06, 0x7a, 0x4f, 0x5a, 0xaf, 0x08, 0xbb,
	0x79, 0x9c, 0x10, 0x63, 0x16, 0x7d, 0x09, 0x62, 0xf2, 0x53, 0x94, 0x26, 0x26, 0x3f, 0x5c, 0x13,
	0xd3, 0x00, 0xfc, 0x3e, 0xf5, 0x46, 0xd1, 0xf0, 0xf6, 0x90, 0xf6, 0x0e, 0xd4, 0x48, 0xef, 0x41,
	0x3d, 0x73, 0x9a, 0xc2, 0xc6, 0x30, 0x3f, 0x8c, 0xa2, 0xb1, 0xd4, 0x2f, 0x57, 0xfc, 0xc6, 0x35,
	0xa8, 0xf4, 0xbb, 0x82, 0xa1, 0xaa, 0x5b, 0xe9, 0x77, 0x13, 0xd2, 0x42, 0xda, 0xf7, 0xb9, 0x20,
	0xa5, 0xea, 0xca, 0x8f, 0xce, 0xf7, 0x15, 0xf5, 0x64, 0xec, 0xd1, 0xf0, 0xd0, 0xef, 0x51, 0xdc,
	0x83, 0x05, 0x79, 0x80, 0x37, 0x0a, 0xf4, 0x59, 0x40, 0xb1, 0xae, 0xcc, 0x54, 0x6f, 0x45, 0x03,
	0x69, 0x7c, 0xf7, 0xe7, 0xbf, 0x8f, 0x2a, 0x35, 0xb2, 0xe8, 0x78, 0xbd, 0x1e, 0x8b, 0x83, 0x88,
	0x6f, 0xa3, 0x2d, 0xfc, 0x23, 0x82, 0x7a, 0x8e, 0x34, 0xe3, 0x37, 0x8c, 0xa4, 0xc5, 0xc2, 0x6f,
	0x75, 0xca, 0xb8, 0x1a, 0x60, 0xce, 0x0b, 0x30, 0x4d, 0x5c, 0xd7, 0x60, 0x1c, 0x4f, 0x39, 0x77,
	0x7e, 0x42, 0x86, 0xc6, 0x2b, 0x46, 0xbe, 0x82, 0x86, 0xa1, 0xb7, 0xc2, 0x8c, 0x2f, 0x19, 0x08,
	0xf2, 0x1e, 0x08, 0xeb, 0xf2, 0x6c, 0x27, 0x75, 0x87, 0x05, 0xb0, 0x57, 0xf1, 0x8a, 0xa3, 0x96,
	0xdc, 0x09, 0x13, 0x87, 0xce, 0x1f, 0x15, 0xa8, 0x4f, 0xcb, 0x9e, 0xc2, 0xf4, 0x08, 0x41, 0xab,
	0xe8, 0x11, 0xc0, 0xed, 0x13, 0x77, 0x70, 0xe6, 0x63, 0x63, 0x39, 0xa5, 0xfd, 0x53, 0xb8, 0x6b,
	0x02, 0xee, 0x2a, 0xae, 0x39, 0x5c, 0xde, 0x6b, 0x47, 0x5e, 0xc1, 0x9f, 0x11, 0xac, 0x17, 0x48,
	0x35, 0xbe, 0x5e, 0x56, 0xd2, 0x25, 0xa6, 0x1b, 0xa7, 0x7b, 0x01, 0xf4, 0x88, 0x5f, 0x13, 0xd0,
	0xea, 0xc4, 0x80, 0xb6, 0x8d, 0xb6, 0x3a, 0xbf, 0xce, 0xc3, 0xd2, 0xfd, 0xb8, 0x3b, 0xf2, 0x7b,
	0x3b, 0x71, 0x34, 0xfc, 0x18, 0xef, 0xc3, 0x19, 0x09, 0xed, 0x7c, 0xbe, 0x14, 0xe7, 0x0f, 0x30,
	0xbf, 0x6c, 0x5d, 0x94, 0x5d, 0x26, 0x55, 0x55, 0x36, 0xd9, 0xf2, 0xcf, 0x60, 0x41, 0x6a, 0x35,
	0xce, 0x11, 0xfb, 0x63, 0x4d, 0xb7, 0x2e, 0x14, 0x58, 0x53, 0xb6, 0x57, 0x45, 0x6e, 0xd8, 0xd2,
	0xb9, 0xf1, 0x37, 0x50, 0xcb, 0xea, 0x2a, 0xbe, 0xfc, 0x02, 0xd9, 0x95, 0x85, 0xae, 0x97, 0x12,
	0x67, 0xdd, 0x54, 0x4b, 0x14, 0xc6, 0x78, 0x55, 0x73, 0x19, 0xca, 0x00, 0xfc, 0x35, 0xd4, 0xb2,
	0xfa, 0x75, 0x02, 0x40, 0xae, 0xaa, 0x9f, 0x00, 0x30, 0x5b, 0x43, 0xa7, 0xc4, 0x43, 0x5d, 0x8b,
	0x84, 0x56, 0x0a, 0x4b, 0x53, 0x22, 0x88, 0x5f, 0x37, 0x72, 0x9e, 0x94, 0x4d, 0x8b, 0xcc, 0x72,
	0x49, 0x59, 0x5e, 0x11, 0xb5, 0x16, 0xf1, 0x59, 0x67, 0x28, 0xac, 0xbb, 0xdb, 0x8f, 0x8f, 0xec,
	0xb9, 0xbf, 0x8e, 0xec, 0xb9, 0x67, 0x47, 0x36, 0xfa, 0xff, 0xc8, 0x46, 0xdf, 0x4e, 0x6c, 0xf4,
	0xcb, 0xc4, 0x46, 0xbf, 0x4d, 0x6c, 0xf4, 0xfb, 0xc4, 0x46, 0x8f, 0x27, 0x36, 0xfa, 0x7b, 0x62,
	0xa3, 0xff, 0x26, 0xf6, 0xdc, 0xb3, 0x89, 0x8d, 0x7e, 0xf8, 0xc7, 0x9e, 0xfb, 0x7c, 0x7e, 0x10,
	0x8e, 0x7b, 0xdd, 0x05, 0xf1, 0x7f, 0xfc, 0xcd, 0xe7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc5,
	0x0e, 0xfa, 0xe1, 0x0b, 0x00, 0x00,
}
