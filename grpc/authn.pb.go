// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authn.proto

package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SignupRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignupRequest) Reset()      { *m = SignupRequest{} }
func (*SignupRequest) ProtoMessage() {}
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{0}
}
func (m *SignupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupRequest.Merge(dst, src)
}
func (m *SignupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignupRequest proto.InternalMessageInfo

func (m *SignupRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignupRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupResponse struct {
	IdToken              string   `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignupResponse) Reset()      { *m = SignupResponse{} }
func (*SignupResponse) ProtoMessage() {}
func (*SignupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{1}
}
func (m *SignupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponse.Merge(dst, src)
}
func (m *SignupResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponse proto.InternalMessageInfo

func (m *SignupResponse) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type SignupResponseEnvelope struct {
	Result               *SignupResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SignupResponseEnvelope) Reset()      { *m = SignupResponseEnvelope{} }
func (*SignupResponseEnvelope) ProtoMessage() {}
func (*SignupResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{2}
}
func (m *SignupResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignupResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupResponseEnvelope.Merge(dst, src)
}
func (m *SignupResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *SignupResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_SignupResponseEnvelope proto.InternalMessageInfo

func (m *SignupResponseEnvelope) GetResult() *SignupResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetAccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountRequest) Reset()      { *m = GetAccountRequest{} }
func (*GetAccountRequest) ProtoMessage() {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{3}
}
func (m *GetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountRequest.Merge(dst, src)
}
func (m *GetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountRequest proto.InternalMessageInfo

func (m *GetAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAccountResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Locked               bool     `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	Deleted              bool     `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountResponse) Reset()      { *m = GetAccountResponse{} }
func (*GetAccountResponse) ProtoMessage() {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{4}
}
func (m *GetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponse.Merge(dst, src)
}
func (m *GetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponse proto.InternalMessageInfo

func (m *GetAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetAccountResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetAccountResponse) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *GetAccountResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type GetAccountResponseEnvelope struct {
	Result               *GetAccountResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetAccountResponseEnvelope) Reset()      { *m = GetAccountResponseEnvelope{} }
func (*GetAccountResponseEnvelope) ProtoMessage() {}
func (*GetAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{5}
}
func (m *GetAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountResponseEnvelope.Merge(dst, src)
}
func (m *GetAccountResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountResponseEnvelope proto.InternalMessageInfo

func (m *GetAccountResponseEnvelope) GetResult() *GetAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateAccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAccountRequest) Reset()      { *m = UpdateAccountRequest{} }
func (*UpdateAccountRequest) ProtoMessage() {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{6}
}
func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(dst, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAccountRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type IsUsernameAvailableRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUsernameAvailableRequest) Reset()      { *m = IsUsernameAvailableRequest{} }
func (*IsUsernameAvailableRequest) ProtoMessage() {}
func (*IsUsernameAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{7}
}
func (m *IsUsernameAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUsernameAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUsernameAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsUsernameAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableRequest.Merge(dst, src)
}
func (m *IsUsernameAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsUsernameAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableRequest proto.InternalMessageInfo

func (m *IsUsernameAvailableRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type IsUsernameAvailableResponseEnvelope struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUsernameAvailableResponseEnvelope) Reset()      { *m = IsUsernameAvailableResponseEnvelope{} }
func (*IsUsernameAvailableResponseEnvelope) ProtoMessage() {}
func (*IsUsernameAvailableResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{8}
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsUsernameAvailableResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.Merge(dst, src)
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *IsUsernameAvailableResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUsernameAvailableResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_IsUsernameAvailableResponseEnvelope proto.InternalMessageInfo

func (m *IsUsernameAvailableResponseEnvelope) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type LockAccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockAccountRequest) Reset()      { *m = LockAccountRequest{} }
func (*LockAccountRequest) ProtoMessage() {}
func (*LockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{9}
}
func (m *LockAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockAccountRequest.Merge(dst, src)
}
func (m *LockAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockAccountRequest proto.InternalMessageInfo

func (m *LockAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UnlockAccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockAccountRequest) Reset()      { *m = UnlockAccountRequest{} }
func (*UnlockAccountRequest) ProtoMessage() {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{10}
}
func (m *UnlockAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnlockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountRequest.Merge(dst, src)
}
func (m *UnlockAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountRequest proto.InternalMessageInfo

func (m *UnlockAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ArchiveAccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveAccountRequest) Reset()      { *m = ArchiveAccountRequest{} }
func (*ArchiveAccountRequest) ProtoMessage() {}
func (*ArchiveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{11}
}
func (m *ArchiveAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ArchiveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveAccountRequest.Merge(dst, src)
}
func (m *ArchiveAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveAccountRequest proto.InternalMessageInfo

func (m *ArchiveAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ImportAccountRequst struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Locked               bool     `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportAccountRequst) Reset()      { *m = ImportAccountRequst{} }
func (*ImportAccountRequst) ProtoMessage() {}
func (*ImportAccountRequst) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{12}
}
func (m *ImportAccountRequst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountRequst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountRequst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountRequst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountRequst.Merge(dst, src)
}
func (m *ImportAccountRequst) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountRequst) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountRequst.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountRequst proto.InternalMessageInfo

func (m *ImportAccountRequst) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ImportAccountRequst) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ImportAccountRequst) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

type ImportAccountResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportAccountResponse) Reset()      { *m = ImportAccountResponse{} }
func (*ImportAccountResponse) ProtoMessage() {}
func (*ImportAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{13}
}
func (m *ImportAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponse.Merge(dst, src)
}
func (m *ImportAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponse proto.InternalMessageInfo

func (m *ImportAccountResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ImportAccountResponseEnvelope struct {
	Result               *ImportAccountResponse `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ImportAccountResponseEnvelope) Reset()      { *m = ImportAccountResponseEnvelope{} }
func (*ImportAccountResponseEnvelope) ProtoMessage() {}
func (*ImportAccountResponseEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{14}
}
func (m *ImportAccountResponseEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportAccountResponseEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportAccountResponseEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ImportAccountResponseEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportAccountResponseEnvelope.Merge(dst, src)
}
func (m *ImportAccountResponseEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *ImportAccountResponseEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportAccountResponseEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_ImportAccountResponseEnvelope proto.InternalMessageInfo

func (m *ImportAccountResponseEnvelope) GetResult() *ImportAccountResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type LoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()      { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage() {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{15}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(dst, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type PasswordResetRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordResetRequest) Reset()      { *m = PasswordResetRequest{} }
func (*PasswordResetRequest) ProtoMessage() {}
func (*PasswordResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{16}
}
func (m *PasswordResetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordResetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PasswordResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordResetRequest.Merge(dst, src)
}
func (m *PasswordResetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PasswordResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordResetRequest proto.InternalMessageInfo

func (m *PasswordResetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ChangePasswordRequest struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CurrentPassword      string   `protobuf:"bytes,3,opt,name=currentPassword,proto3" json:"currentPassword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangePasswordRequest) Reset()      { *m = ChangePasswordRequest{} }
func (*ChangePasswordRequest) ProtoMessage() {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{17}
}
func (m *ChangePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePasswordRequest.Merge(dst, src)
}
func (m *ChangePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePasswordRequest proto.InternalMessageInfo

func (m *ChangePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ChangePasswordRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ChangePasswordRequest) GetCurrentPassword() string {
	if m != nil {
		return m.CurrentPassword
	}
	return ""
}

type ExpirePasswordRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpirePasswordRequest) Reset()      { *m = ExpirePasswordRequest{} }
func (*ExpirePasswordRequest) ProtoMessage() {}
func (*ExpirePasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{18}
}
func (m *ExpirePasswordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpirePasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpirePasswordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExpirePasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpirePasswordRequest.Merge(dst, src)
}
func (m *ExpirePasswordRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExpirePasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpirePasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpirePasswordRequest proto.InternalMessageInfo

func (m *ExpirePasswordRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BeginOAuthRequest struct {
	ProviderName         string   `protobuf:"bytes,1,opt,name=providerName,proto3" json:"providerName,omitempty"`
	RedirectURI          string   `protobuf:"bytes,2,opt,name=redirectURI,proto3" json:"redirectURI,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeginOAuthRequest) Reset()      { *m = BeginOAuthRequest{} }
func (*BeginOAuthRequest) ProtoMessage() {}
func (*BeginOAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{19}
}
func (m *BeginOAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginOAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginOAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BeginOAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginOAuthRequest.Merge(dst, src)
}
func (m *BeginOAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *BeginOAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginOAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginOAuthRequest proto.InternalMessageInfo

func (m *BeginOAuthRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *BeginOAuthRequest) GetRedirectURI() string {
	if m != nil {
		return m.RedirectURI
	}
	return ""
}

type BeginOAuthResponse struct {
	Provider             string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeginOAuthResponse) Reset()      { *m = BeginOAuthResponse{} }
func (*BeginOAuthResponse) ProtoMessage() {}
func (*BeginOAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{20}
}
func (m *BeginOAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeginOAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeginOAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BeginOAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginOAuthResponse.Merge(dst, src)
}
func (m *BeginOAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *BeginOAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginOAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeginOAuthResponse proto.InternalMessageInfo

func (m *BeginOAuthResponse) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type OAuthReturnRequest struct {
	ProviderName         string   `protobuf:"bytes,1,opt,name=providerName,proto3" json:"providerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthReturnRequest) Reset()      { *m = OAuthReturnRequest{} }
func (*OAuthReturnRequest) ProtoMessage() {}
func (*OAuthReturnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{21}
}
func (m *OAuthReturnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthReturnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthReturnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OAuthReturnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthReturnRequest.Merge(dst, src)
}
func (m *OAuthReturnRequest) XXX_Size() int {
	return m.Size()
}
func (m *OAuthReturnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthReturnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthReturnRequest proto.InternalMessageInfo

func (m *OAuthReturnRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

type OAuthReturnResponse struct {
	Redirect             string   `protobuf:"bytes,1,opt,name=redirect,proto3" json:"redirect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OAuthReturnResponse) Reset()      { *m = OAuthReturnResponse{} }
func (*OAuthReturnResponse) ProtoMessage() {}
func (*OAuthReturnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{22}
}
func (m *OAuthReturnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthReturnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthReturnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OAuthReturnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthReturnResponse.Merge(dst, src)
}
func (m *OAuthReturnResponse) XXX_Size() int {
	return m.Size()
}
func (m *OAuthReturnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthReturnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthReturnResponse proto.InternalMessageInfo

func (m *OAuthReturnResponse) GetRedirect() string {
	if m != nil {
		return m.Redirect
	}
	return ""
}

type Configuration struct {
	Issuer                           string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ResponseTypesSupported           []string `protobuf:"bytes,2,rep,name=response_types_supported,json=responseTypesSupported" json:"response_types_supported,omitempty"`
	SubjectTypesSupported            []string `protobuf:"bytes,3,rep,name=subject_types_supported,json=subjectTypesSupported" json:"subject_types_supported,omitempty"`
	IdTokenSigningAlgValuesSupported []string `protobuf:"bytes,4,rep,name=id_token_signing_alg_values_supported,json=idTokenSigningAlgValuesSupported" json:"id_token_signing_alg_values_supported,omitempty"`
	ClaimsSupported                  []string `protobuf:"bytes,5,rep,name=claims_supported,json=claimsSupported" json:"claims_supported,omitempty"`
	JwksUri                          string   `protobuf:"bytes,6,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	XXX_NoUnkeyedLiteral             struct{} `json:"-"`
	XXX_sizecache                    int32    `json:"-"`
}

func (m *Configuration) Reset()      { *m = Configuration{} }
func (*Configuration) ProtoMessage() {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{23}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(dst, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Configuration) GetResponseTypesSupported() []string {
	if m != nil {
		return m.ResponseTypesSupported
	}
	return nil
}

func (m *Configuration) GetSubjectTypesSupported() []string {
	if m != nil {
		return m.SubjectTypesSupported
	}
	return nil
}

func (m *Configuration) GetIdTokenSigningAlgValuesSupported() []string {
	if m != nil {
		return m.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (m *Configuration) GetClaimsSupported() []string {
	if m != nil {
		return m.ClaimsSupported
	}
	return nil
}

func (m *Configuration) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

type ServiceStatsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceStatsResponse) Reset()      { *m = ServiceStatsResponse{} }
func (*ServiceStatsResponse) ProtoMessage() {}
func (*ServiceStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{24}
}
func (m *ServiceStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatsResponse.Merge(dst, src)
}
func (m *ServiceStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatsResponse proto.InternalMessageInfo

type HealthCheckResponse struct {
	Http                 bool     `protobuf:"varint,1,opt,name=http,proto3" json:"http,omitempty"`
	Db                   bool     `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	Redis                bool     `protobuf:"varint,3,opt,name=redis,proto3" json:"redis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResponse) Reset()      { *m = HealthCheckResponse{} }
func (*HealthCheckResponse) ProtoMessage() {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{25}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(dst, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetHttp() bool {
	if m != nil {
		return m.Http
	}
	return false
}

func (m *HealthCheckResponse) GetDb() bool {
	if m != nil {
		return m.Db
	}
	return false
}

func (m *HealthCheckResponse) GetRedis() bool {
	if m != nil {
		return m.Redis
	}
	return false
}

type Key struct {
	Use                  string   `protobuf:"bytes,1,opt,name=use,proto3" json:"use,omitempty"`
	Alg                  []string `protobuf:"bytes,2,rep,name=alg" json:"alg,omitempty"`
	Kty                  string   `protobuf:"bytes,3,opt,name=kty,proto3" json:"kty,omitempty"`
	Kid                  string   `protobuf:"bytes,4,opt,name=kid,proto3" json:"kid,omitempty"`
	E                    string   `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	N                    string   `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()      { *m = Key{} }
func (*Key) ProtoMessage() {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{26}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(dst, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetUse() string {
	if m != nil {
		return m.Use
	}
	return ""
}

func (m *Key) GetAlg() []string {
	if m != nil {
		return m.Alg
	}
	return nil
}

func (m *Key) GetKty() string {
	if m != nil {
		return m.Kty
	}
	return ""
}

func (m *Key) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *Key) GetE() string {
	if m != nil {
		return m.E
	}
	return ""
}

func (m *Key) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

type JWKSResponse struct {
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWKSResponse) Reset()      { *m = JWKSResponse{} }
func (*JWKSResponse) ProtoMessage() {}
func (*JWKSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authn_975e18bf4e534da8, []int{27}
}
func (m *JWKSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWKSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWKSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JWKSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKSResponse.Merge(dst, src)
}
func (m *JWKSResponse) XXX_Size() int {
	return m.Size()
}
func (m *JWKSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWKSResponse proto.InternalMessageInfo

func (m *JWKSResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*SignupRequest)(nil), "grpc.SignupRequest")
	proto.RegisterType((*SignupResponse)(nil), "grpc.SignupResponse")
	proto.RegisterType((*SignupResponseEnvelope)(nil), "grpc.SignupResponseEnvelope")
	proto.RegisterType((*GetAccountRequest)(nil), "grpc.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "grpc.GetAccountResponse")
	proto.RegisterType((*GetAccountResponseEnvelope)(nil), "grpc.GetAccountResponseEnvelope")
	proto.RegisterType((*UpdateAccountRequest)(nil), "grpc.UpdateAccountRequest")
	proto.RegisterType((*IsUsernameAvailableRequest)(nil), "grpc.IsUsernameAvailableRequest")
	proto.RegisterType((*IsUsernameAvailableResponseEnvelope)(nil), "grpc.IsUsernameAvailableResponseEnvelope")
	proto.RegisterType((*LockAccountRequest)(nil), "grpc.LockAccountRequest")
	proto.RegisterType((*UnlockAccountRequest)(nil), "grpc.UnlockAccountRequest")
	proto.RegisterType((*ArchiveAccountRequest)(nil), "grpc.ArchiveAccountRequest")
	proto.RegisterType((*ImportAccountRequst)(nil), "grpc.ImportAccountRequst")
	proto.RegisterType((*ImportAccountResponse)(nil), "grpc.ImportAccountResponse")
	proto.RegisterType((*ImportAccountResponseEnvelope)(nil), "grpc.ImportAccountResponseEnvelope")
	proto.RegisterType((*LoginRequest)(nil), "grpc.LoginRequest")
	proto.RegisterType((*PasswordResetRequest)(nil), "grpc.PasswordResetRequest")
	proto.RegisterType((*ChangePasswordRequest)(nil), "grpc.ChangePasswordRequest")
	proto.RegisterType((*ExpirePasswordRequest)(nil), "grpc.ExpirePasswordRequest")
	proto.RegisterType((*BeginOAuthRequest)(nil), "grpc.BeginOAuthRequest")
	proto.RegisterType((*BeginOAuthResponse)(nil), "grpc.BeginOAuthResponse")
	proto.RegisterType((*OAuthReturnRequest)(nil), "grpc.OAuthReturnRequest")
	proto.RegisterType((*OAuthReturnResponse)(nil), "grpc.OAuthReturnResponse")
	proto.RegisterType((*Configuration)(nil), "grpc.Configuration")
	proto.RegisterType((*ServiceStatsResponse)(nil), "grpc.ServiceStatsResponse")
	proto.RegisterType((*HealthCheckResponse)(nil), "grpc.HealthCheckResponse")
	proto.RegisterType((*Key)(nil), "grpc.Key")
	proto.RegisterType((*JWKSResponse)(nil), "grpc.JWKSResponse")
}
func (this *SignupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupRequest)
	if !ok {
		that2, ok := that.(SignupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *SignupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponse)
	if !ok {
		that2, ok := that.(SignupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IdToken != that1.IdToken {
		return false
	}
	return true
}
func (this *SignupResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignupResponseEnvelope)
	if !ok {
		that2, ok := that.(SignupResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *GetAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(GetAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *UpdateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAccountRequest)
	if !ok {
		that2, ok := that.(UpdateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *IsUsernameAvailableRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableRequest)
	if !ok {
		that2, ok := that.(IsUsernameAvailableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *IsUsernameAvailableResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IsUsernameAvailableResponseEnvelope)
	if !ok {
		that2, ok := that.(IsUsernameAvailableResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *LockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockAccountRequest)
	if !ok {
		that2, ok := that.(LockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *UnlockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockAccountRequest)
	if !ok {
		that2, ok := that.(UnlockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ArchiveAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchiveAccountRequest)
	if !ok {
		that2, ok := that.(ArchiveAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ImportAccountRequst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountRequst)
	if !ok {
		that2, ok := that.(ImportAccountRequst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	return true
}
func (this *ImportAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponse)
	if !ok {
		that2, ok := that.(ImportAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ImportAccountResponseEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportAccountResponseEnvelope)
	if !ok {
		that2, ok := that.(ImportAccountResponseEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *PasswordResetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordResetRequest)
	if !ok {
		that2, ok := that.(PasswordResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	return true
}
func (this *ChangePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangePasswordRequest)
	if !ok {
		that2, ok := that.(ChangePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.CurrentPassword != that1.CurrentPassword {
		return false
	}
	return true
}
func (this *ExpirePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpirePasswordRequest)
	if !ok {
		that2, ok := that.(ExpirePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *BeginOAuthRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BeginOAuthRequest)
	if !ok {
		that2, ok := that.(BeginOAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProviderName != that1.ProviderName {
		return false
	}
	if this.RedirectURI != that1.RedirectURI {
		return false
	}
	return true
}
func (this *BeginOAuthResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BeginOAuthResponse)
	if !ok {
		that2, ok := that.(BeginOAuthResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	return true
}
func (this *OAuthReturnRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthReturnRequest)
	if !ok {
		that2, ok := that.(OAuthReturnRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProviderName != that1.ProviderName {
		return false
	}
	return true
}
func (this *OAuthReturnResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthReturnResponse)
	if !ok {
		that2, ok := that.(OAuthReturnResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Redirect != that1.Redirect {
		return false
	}
	return true
}
func (this *Configuration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Configuration)
	if !ok {
		that2, ok := that.(Configuration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if len(this.ResponseTypesSupported) != len(that1.ResponseTypesSupported) {
		return false
	}
	for i := range this.ResponseTypesSupported {
		if this.ResponseTypesSupported[i] != that1.ResponseTypesSupported[i] {
			return false
		}
	}
	if len(this.SubjectTypesSupported) != len(that1.SubjectTypesSupported) {
		return false
	}
	for i := range this.SubjectTypesSupported {
		if this.SubjectTypesSupported[i] != that1.SubjectTypesSupported[i] {
			return false
		}
	}
	if len(this.IdTokenSigningAlgValuesSupported) != len(that1.IdTokenSigningAlgValuesSupported) {
		return false
	}
	for i := range this.IdTokenSigningAlgValuesSupported {
		if this.IdTokenSigningAlgValuesSupported[i] != that1.IdTokenSigningAlgValuesSupported[i] {
			return false
		}
	}
	if len(this.ClaimsSupported) != len(that1.ClaimsSupported) {
		return false
	}
	for i := range this.ClaimsSupported {
		if this.ClaimsSupported[i] != that1.ClaimsSupported[i] {
			return false
		}
	}
	if this.JwksUri != that1.JwksUri {
		return false
	}
	return true
}
func (this *ServiceStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatsResponse)
	if !ok {
		that2, ok := that.(ServiceStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthCheckResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthCheckResponse)
	if !ok {
		that2, ok := that.(HealthCheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Http != that1.Http {
		return false
	}
	if this.Db != that1.Db {
		return false
	}
	if this.Redis != that1.Redis {
		return false
	}
	return true
}
func (this *Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Key)
	if !ok {
		that2, ok := that.(Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Use != that1.Use {
		return false
	}
	if len(this.Alg) != len(that1.Alg) {
		return false
	}
	for i := range this.Alg {
		if this.Alg[i] != that1.Alg[i] {
			return false
		}
	}
	if this.Kty != that1.Kty {
		return false
	}
	if this.Kid != that1.Kid {
		return false
	}
	if this.E != that1.E {
		return false
	}
	if this.N != that1.N {
		return false
	}
	return true
}
func (this *JWKSResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKSResponse)
	if !ok {
		that2, ok := that.(JWKSResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *SignupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.SignupRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SignupResponse{")
	s = append(s, "IdToken: "+fmt.Sprintf("%#v", this.IdToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignupResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.SignupResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&grpc.GetAccountResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Locked: "+fmt.Sprintf("%#v", this.Locked)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetAccountResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.UpdateAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsUsernameAvailableRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.IsUsernameAvailableRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsUsernameAvailableResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.IsUsernameAvailableResponseEnvelope{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.LockAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.UnlockAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArchiveAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ArchiveAccountRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountRequst) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.ImportAccountRequst{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Locked: "+fmt.Sprintf("%#v", this.Locked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ImportAccountResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportAccountResponseEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ImportAccountResponseEnvelope{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.LoginRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordResetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.PasswordResetRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChangePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.ChangePasswordRequest{")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "CurrentPassword: "+fmt.Sprintf("%#v", this.CurrentPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpirePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.ExpirePasswordRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BeginOAuthRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc.BeginOAuthRequest{")
	s = append(s, "ProviderName: "+fmt.Sprintf("%#v", this.ProviderName)+",\n")
	s = append(s, "RedirectURI: "+fmt.Sprintf("%#v", this.RedirectURI)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BeginOAuthResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.BeginOAuthResponse{")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OAuthReturnRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.OAuthReturnRequest{")
	s = append(s, "ProviderName: "+fmt.Sprintf("%#v", this.ProviderName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OAuthReturnResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.OAuthReturnResponse{")
	s = append(s, "Redirect: "+fmt.Sprintf("%#v", this.Redirect)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Configuration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc.Configuration{")
	s = append(s, "Issuer: "+fmt.Sprintf("%#v", this.Issuer)+",\n")
	s = append(s, "ResponseTypesSupported: "+fmt.Sprintf("%#v", this.ResponseTypesSupported)+",\n")
	s = append(s, "SubjectTypesSupported: "+fmt.Sprintf("%#v", this.SubjectTypesSupported)+",\n")
	s = append(s, "IdTokenSigningAlgValuesSupported: "+fmt.Sprintf("%#v", this.IdTokenSigningAlgValuesSupported)+",\n")
	s = append(s, "ClaimsSupported: "+fmt.Sprintf("%#v", this.ClaimsSupported)+",\n")
	s = append(s, "JwksUri: "+fmt.Sprintf("%#v", this.JwksUri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceStatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ServiceStatsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthCheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.HealthCheckResponse{")
	s = append(s, "Http: "+fmt.Sprintf("%#v", this.Http)+",\n")
	s = append(s, "Db: "+fmt.Sprintf("%#v", this.Db)+",\n")
	s = append(s, "Redis: "+fmt.Sprintf("%#v", this.Redis)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc.Key{")
	s = append(s, "Use: "+fmt.Sprintf("%#v", this.Use)+",\n")
	s = append(s, "Alg: "+fmt.Sprintf("%#v", this.Alg)+",\n")
	s = append(s, "Kty: "+fmt.Sprintf("%#v", this.Kty)+",\n")
	s = append(s, "Kid: "+fmt.Sprintf("%#v", this.Kid)+",\n")
	s = append(s, "E: "+fmt.Sprintf("%#v", this.E)+",\n")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JWKSResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.JWKSResponse{")
	if this.Keys != nil {
		s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthn(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthNClient is the client API for AuthN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthNClient interface {
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*types.Empty, error)
	IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error)
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*types.Empty, error)
	UnlockAcount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ImportAccount(ctx context.Context, in *ImportAccountRequst, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	RefreshSession(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SignupResponse, error)
	Logout(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*types.Empty, error)
	BeginOAuth(ctx context.Context, in *BeginOAuthRequest, opts ...grpc.CallOption) (*BeginOAuthResponse, error)
	OAuthReturn(ctx context.Context, in *OAuthReturnRequest, opts ...grpc.CallOption) (*OAuthReturnResponse, error)
	ServiceConfiguration(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Configuration, error)
	JWKS(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*JWKSResponse, error)
	ServiceStats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ServiceStatsResponse, error)
	ServerStats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error)
	HealthCheck(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type authNClient struct {
	cc *grpc.ClientConn
}

func NewAuthNClient(cc *grpc.ClientConn) AuthNClient {
	return &authNClient{cc}
}

func (c *authNClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponseEnvelope, error) {
	out := new(SignupResponseEnvelope)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponseEnvelope, error) {
	out := new(GetAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) IsUsernameAvailable(ctx context.Context, in *IsUsernameAvailableRequest, opts ...grpc.CallOption) (*IsUsernameAvailableResponseEnvelope, error) {
	out := new(IsUsernameAvailableResponseEnvelope)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/IsUsernameAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) UnlockAcount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/UnlockAcount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ArchiveAccount(ctx context.Context, in *ArchiveAccountRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ArchiveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ImportAccount(ctx context.Context, in *ImportAccountRequst, opts ...grpc.CallOption) (*ImportAccountResponseEnvelope, error) {
	out := new(ImportAccountResponseEnvelope)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ImportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) RefreshSession(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/RefreshSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) Logout(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) RequestPasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/RequestPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ExpirePassword(ctx context.Context, in *ExpirePasswordRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ExpirePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) BeginOAuth(ctx context.Context, in *BeginOAuthRequest, opts ...grpc.CallOption) (*BeginOAuthResponse, error) {
	out := new(BeginOAuthResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/BeginOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) OAuthReturn(ctx context.Context, in *OAuthReturnRequest, opts ...grpc.CallOption) (*OAuthReturnResponse, error) {
	out := new(OAuthReturnResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/OAuthReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ServiceConfiguration(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ServiceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) JWKS(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*JWKSResponse, error) {
	out := new(JWKSResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/JWKS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ServiceStats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ServiceStatsResponse, error) {
	out := new(ServiceStatsResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ServiceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) ServerStats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/ServerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authNClient) HealthCheck(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/grpc.AuthN/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthNServer is the server API for AuthN service.
type AuthNServer interface {
	Signup(context.Context, *SignupRequest) (*SignupResponseEnvelope, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponseEnvelope, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*types.Empty, error)
	IsUsernameAvailable(context.Context, *IsUsernameAvailableRequest) (*IsUsernameAvailableResponseEnvelope, error)
	LockAccount(context.Context, *LockAccountRequest) (*types.Empty, error)
	UnlockAcount(context.Context, *UnlockAccountRequest) (*types.Empty, error)
	ArchiveAccount(context.Context, *ArchiveAccountRequest) (*types.Empty, error)
	ImportAccount(context.Context, *ImportAccountRequst) (*ImportAccountResponseEnvelope, error)
	Login(context.Context, *LoginRequest) (*SignupResponse, error)
	RefreshSession(context.Context, *types.Empty) (*SignupResponse, error)
	Logout(context.Context, *types.Empty) (*types.Empty, error)
	RequestPasswordReset(context.Context, *PasswordResetRequest) (*types.Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*SignupResponse, error)
	ExpirePassword(context.Context, *ExpirePasswordRequest) (*types.Empty, error)
	BeginOAuth(context.Context, *BeginOAuthRequest) (*BeginOAuthResponse, error)
	OAuthReturn(context.Context, *OAuthReturnRequest) (*OAuthReturnResponse, error)
	ServiceConfiguration(context.Context, *types.Empty) (*Configuration, error)
	JWKS(context.Context, *types.Empty) (*JWKSResponse, error)
	ServiceStats(context.Context, *types.Empty) (*ServiceStatsResponse, error)
	ServerStats(context.Context, *types.Empty) (*types.Empty, error)
	HealthCheck(context.Context, *types.Empty) (*HealthCheckResponse, error)
}

func RegisterAuthNServer(s *grpc.Server, srv AuthNServer) {
	s.RegisterService(&_AuthN_serviceDesc, srv)
}

func _AuthN_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_IsUsernameAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUsernameAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).IsUsernameAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/IsUsernameAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).IsUsernameAvailable(ctx, req.(*IsUsernameAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_UnlockAcount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).UnlockAcount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/UnlockAcount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).UnlockAcount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ArchiveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ArchiveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ArchiveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ArchiveAccount(ctx, req.(*ArchiveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ImportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ImportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ImportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ImportAccount(ctx, req.(*ImportAccountRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_RefreshSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).RefreshSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/RefreshSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).RefreshSession(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).Logout(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/RequestPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).RequestPasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ExpirePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpirePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ExpirePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ExpirePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ExpirePassword(ctx, req.(*ExpirePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_BeginOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).BeginOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/BeginOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).BeginOAuth(ctx, req.(*BeginOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_OAuthReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).OAuthReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/OAuthReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).OAuthReturn(ctx, req.(*OAuthReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ServiceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ServiceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ServiceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ServiceConfiguration(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_JWKS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).JWKS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/JWKS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).JWKS(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ServiceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ServiceStats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_ServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).ServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/ServerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).ServerStats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthN_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthNServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AuthN/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthNServer).HealthCheck(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AuthN",
	HandlerType: (*AuthNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _AuthN_Signup_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AuthN_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AuthN_UpdateAccount_Handler,
		},
		{
			MethodName: "IsUsernameAvailable",
			Handler:    _AuthN_IsUsernameAvailable_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AuthN_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAcount",
			Handler:    _AuthN_UnlockAcount_Handler,
		},
		{
			MethodName: "ArchiveAccount",
			Handler:    _AuthN_ArchiveAccount_Handler,
		},
		{
			MethodName: "ImportAccount",
			Handler:    _AuthN_ImportAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthN_Login_Handler,
		},
		{
			MethodName: "RefreshSession",
			Handler:    _AuthN_RefreshSession_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthN_Logout_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _AuthN_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthN_ChangePassword_Handler,
		},
		{
			MethodName: "ExpirePassword",
			Handler:    _AuthN_ExpirePassword_Handler,
		},
		{
			MethodName: "BeginOAuth",
			Handler:    _AuthN_BeginOAuth_Handler,
		},
		{
			MethodName: "OAuthReturn",
			Handler:    _AuthN_OAuthReturn_Handler,
		},
		{
			MethodName: "ServiceConfiguration",
			Handler:    _AuthN_ServiceConfiguration_Handler,
		},
		{
			MethodName: "JWKS",
			Handler:    _AuthN_JWKS_Handler,
		},
		{
			MethodName: "ServiceStats",
			Handler:    _AuthN_ServiceStats_Handler,
		},
		{
			MethodName: "ServerStats",
			Handler:    _AuthN_ServerStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AuthN_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authn.proto",
}

func (m *SignupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *SignupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.IdToken)))
		i += copy(dAtA[i:], m.IdToken)
	}
	return i, nil
}

func (m *SignupResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n1, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Id))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Locked {
		dAtA[i] = 0x18
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x20
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetAccountResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n2, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *UpdateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *IsUsernameAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUsernameAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *IsUsernameAvailableResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUsernameAvailableResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LockAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *UnlockAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ArchiveAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ImportAccountRequst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountRequst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Locked {
		dAtA[i] = 0x18
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ImportAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ImportAccountResponseEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportAccountResponseEnvelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(m.Result.Size()))
		n3, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *PasswordResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *ChangePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.CurrentPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.CurrentPassword)))
		i += copy(dAtA[i:], m.CurrentPassword)
	}
	return i, nil
}

func (m *ExpirePasswordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpirePasswordRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *BeginOAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginOAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProviderName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.ProviderName)))
		i += copy(dAtA[i:], m.ProviderName)
	}
	if len(m.RedirectURI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.RedirectURI)))
		i += copy(dAtA[i:], m.RedirectURI)
	}
	return i, nil
}

func (m *BeginOAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginOAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Provider)))
		i += copy(dAtA[i:], m.Provider)
	}
	return i, nil
}

func (m *OAuthReturnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthReturnRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProviderName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.ProviderName)))
		i += copy(dAtA[i:], m.ProviderName)
	}
	return i, nil
}

func (m *OAuthReturnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthReturnResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Redirect) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Redirect)))
		i += copy(dAtA[i:], m.Redirect)
	}
	return i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if len(m.ResponseTypesSupported) > 0 {
		for _, s := range m.ResponseTypesSupported {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for _, s := range m.SubjectTypesSupported {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenSigningAlgValuesSupported {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClaimsSupported) > 0 {
		for _, s := range m.ClaimsSupported {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.JwksUri) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.JwksUri)))
		i += copy(dAtA[i:], m.JwksUri)
	}
	return i, nil
}

func (m *ServiceStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Http {
		dAtA[i] = 0x8
		i++
		if m.Http {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Db {
		dAtA[i] = 0x10
		i++
		if m.Db {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Redis {
		dAtA[i] = 0x18
		i++
		if m.Redis {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Use) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Use)))
		i += copy(dAtA[i:], m.Use)
	}
	if len(m.Alg) > 0 {
		for _, s := range m.Alg {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Kty) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Kty)))
		i += copy(dAtA[i:], m.Kty)
	}
	if len(m.Kid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuthn(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func (m *JWKSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWKSResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuthn(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAuthn(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SignupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.IdToken)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *SignupResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *GetAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthn(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *GetAccountResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *UpdateAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *IsUsernameAvailableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *IsUsernameAvailableResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *LockAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *UnlockAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ArchiveAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ImportAccountRequst) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	return n
}

func (m *ImportAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthn(uint64(m.Id))
	}
	return n
}

func (m *ImportAccountResponseEnvelope) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *LoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *PasswordResetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ChangePasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.CurrentPassword)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ExpirePasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *BeginOAuthRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.RedirectURI)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *BeginOAuthResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *OAuthReturnRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *OAuthReturnResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Redirect)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *Configuration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	if len(m.ResponseTypesSupported) > 0 {
		for _, s := range m.ResponseTypesSupported {
			l = len(s)
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	if len(m.SubjectTypesSupported) > 0 {
		for _, s := range m.SubjectTypesSupported {
			l = len(s)
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	if len(m.IdTokenSigningAlgValuesSupported) > 0 {
		for _, s := range m.IdTokenSigningAlgValuesSupported {
			l = len(s)
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	if len(m.ClaimsSupported) > 0 {
		for _, s := range m.ClaimsSupported {
			l = len(s)
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	l = len(m.JwksUri)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *ServiceStatsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Http {
		n += 2
	}
	if m.Db {
		n += 2
	}
	if m.Redis {
		n += 2
	}
	return n
}

func (m *Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.Use)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	if len(m.Alg) > 0 {
		for _, s := range m.Alg {
			l = len(s)
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	l = len(m.Kty)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovAuthn(uint64(l))
	}
	return n
}

func (m *JWKSResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovAuthn(uint64(l))
		}
	}
	return n
}

func sovAuthn(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthn(x uint64) (n int) {
	return sovAuthn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SignupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponse{`,
		`IdToken:` + fmt.Sprintf("%v", this.IdToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignupResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignupResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "SignupResponse", "SignupResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "GetAccountResponse", "GetAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsUsernameAvailableResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsUsernameAvailableResponseEnvelope{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlockAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArchiveAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchiveAccountRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountRequst) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountRequst{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportAccountResponseEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportAccountResponseEnvelope{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "ImportAccountResponse", "ImportAccountResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordResetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordResetRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangePasswordRequest{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`CurrentPassword:` + fmt.Sprintf("%v", this.CurrentPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpirePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExpirePasswordRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BeginOAuthRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BeginOAuthRequest{`,
		`ProviderName:` + fmt.Sprintf("%v", this.ProviderName) + `,`,
		`RedirectURI:` + fmt.Sprintf("%v", this.RedirectURI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BeginOAuthResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BeginOAuthResponse{`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthReturnRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthReturnRequest{`,
		`ProviderName:` + fmt.Sprintf("%v", this.ProviderName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthReturnResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthReturnResponse{`,
		`Redirect:` + fmt.Sprintf("%v", this.Redirect) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Configuration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Configuration{`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`ResponseTypesSupported:` + fmt.Sprintf("%v", this.ResponseTypesSupported) + `,`,
		`SubjectTypesSupported:` + fmt.Sprintf("%v", this.SubjectTypesSupported) + `,`,
		`IdTokenSigningAlgValuesSupported:` + fmt.Sprintf("%v", this.IdTokenSigningAlgValuesSupported) + `,`,
		`ClaimsSupported:` + fmt.Sprintf("%v", this.ClaimsSupported) + `,`,
		`JwksUri:` + fmt.Sprintf("%v", this.JwksUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceStatsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *HealthCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthCheckResponse{`,
		`Http:` + fmt.Sprintf("%v", this.Http) + `,`,
		`Db:` + fmt.Sprintf("%v", this.Db) + `,`,
		`Redis:` + fmt.Sprintf("%v", this.Redis) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Key{`,
		`Use:` + fmt.Sprintf("%v", this.Use) + `,`,
		`Alg:` + fmt.Sprintf("%v", this.Alg) + `,`,
		`Kty:` + fmt.Sprintf("%v", this.Kty) + `,`,
		`Kid:` + fmt.Sprintf("%v", this.Kid) + `,`,
		`E:` + fmt.Sprintf("%v", this.E) + `,`,
		`N:` + fmt.Sprintf("%v", this.N) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWKSResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKSResponse{`,
		`Keys:` + strings.Replace(fmt.Sprintf("%v", this.Keys), "Key", "Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthn(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SignupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SignupResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &GetAccountResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUsernameAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUsernameAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUsernameAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUsernameAvailableResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUsernameAvailableResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUsernameAvailableResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountRequst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountRequst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountRequst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportAccountResponseEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportAccountResponseEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportAccountResponseEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &ImportAccountResponse{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpirePasswordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpirePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpirePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginOAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginOAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginOAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginOAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginOAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginOAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthReturnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthReturnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthReturnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthReturnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthReturnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthReturnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redirect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseTypesSupported = append(m.ResponseTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectTypesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectTypesSupported = append(m.SubjectTypesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTokenSigningAlgValuesSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTokenSigningAlgValuesSupported = append(m.IdTokenSigningAlgValuesSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsSupported", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsSupported = append(m.ClaimsSupported, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Http = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Db = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redis", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redis = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Use = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alg = append(m.Alg, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWKSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWKSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWKSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthn
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthn
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthn(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthn = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthn   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("authn.proto", fileDescriptor_authn_975e18bf4e534da8) }

var fileDescriptor_authn_975e18bf4e534da8 = []byte{
	// 1495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdf, 0x6e, 0xd4, 0x46,
	0x17, 0x8f, 0x37, 0xc9, 0x66, 0x73, 0x36, 0xd9, 0x84, 0xd9, 0x4d, 0xb2, 0x18, 0x58, 0x56, 0x86,
	0x0f, 0x02, 0xfa, 0x88, 0xf9, 0x82, 0xf4, 0x89, 0x72, 0x97, 0x20, 0xa0, 0x01, 0x44, 0x60, 0x43,
	0x5a, 0xd1, 0x7f, 0x2b, 0xc7, 0x1e, 0xbc, 0x43, 0x1c, 0xdb, 0xf5, 0x8c, 0x43, 0x23, 0x84, 0x5a,
	0xf5, 0x09, 0x2a, 0xf5, 0x25, 0xb8, 0xec, 0x63, 0xf4, 0x12, 0xa9, 0x37, 0xbd, 0x42, 0x25, 0xed,
	0x45, 0xc5, 0x15, 0x8f, 0x50, 0xcd, 0x78, 0x6c, 0xaf, 0xbd, 0x76, 0x42, 0xdb, 0x3b, 0x9f, 0x99,
	0x73, 0x7e, 0x67, 0xce, 0x99, 0xdf, 0xce, 0xef, 0x24, 0x50, 0x37, 0x42, 0x36, 0x70, 0x57, 0xfc,
	0xc0, 0x63, 0x1e, 0x9a, 0xb0, 0x03, 0xdf, 0x54, 0x4f, 0xd9, 0x9e, 0x67, 0x3b, 0x58, 0x17, 0x6b,
	0x3b, 0xe1, 0x53, 0x1d, 0xef, 0xf9, 0xec, 0x20, 0x72, 0x51, 0xaf, 0xd8, 0x84, 0x0d, 0xc2, 0x9d,
	0x15, 0xd3, 0xdb, 0xd3, 0x6d, 0xcf, 0xf6, 0x52, 0x2f, 0x6e, 0x09, 0x43, 0x7c, 0x49, 0xf7, 0xd3,
	0x12, 0xcb, 0xf0, 0x89, 0x6e, 0xb8, 0xae, 0xc7, 0x0c, 0x46, 0x3c, 0x97, 0x46, 0xbb, 0xda, 0x1d,
	0x98, 0xdd, 0x22, 0xb6, 0x1b, 0xfa, 0x3d, 0xfc, 0x75, 0x88, 0x29, 0x43, 0x2a, 0xd4, 0x42, 0x8a,
	0x03, 0xd7, 0xd8, 0xc3, 0x6d, 0xa5, 0xab, 0x2c, 0x4f, 0xf7, 0x12, 0x9b, 0xef, 0xf9, 0x06, 0xa5,
	0xcf, 0xbd, 0xc0, 0x6a, 0x57, 0xa2, 0xbd, 0xd8, 0xd6, 0x3e, 0x82, 0x46, 0x0c, 0x44, 0x7d, 0xcf,
	0xa5, 0x18, 0x5d, 0x84, 0x1a, 0xb1, 0xfa, 0xcc, 0xdb, 0xc5, 0x6e, 0x84, 0xb4, 0x3e, 0xf3, 0xee,
	0xcd, 0xd9, 0x64, 0xad, 0x37, 0x45, 0xac, 0xc7, 0xfc, 0x43, 0xbb, 0x0d, 0x8b, 0xd9, 0xd0, 0x5b,
	0xee, 0x3e, 0x76, 0x3c, 0x1f, 0xa3, 0xff, 0x42, 0x35, 0xc0, 0x34, 0x74, 0x98, 0x00, 0xa8, 0xaf,
	0xb6, 0x56, 0x78, 0x7b, 0x56, 0xb2, 0xde, 0x3d, 0xe9, 0xa3, 0x9d, 0x83, 0x13, 0x77, 0x30, 0x5b,
	0x33, 0x4d, 0x2f, 0x74, 0x59, 0x5c, 0x4f, 0x03, 0x2a, 0xc4, 0x92, 0x95, 0x54, 0x88, 0xa5, 0x05,
	0x80, 0x86, 0x9d, 0xe4, 0x59, 0x53, 0xaf, 0x71, 0xee, 0x95, 0xe9, 0x42, 0x25, 0xd7, 0x85, 0x45,
	0xa8, 0x3a, 0x9e, 0xb9, 0x8b, 0xad, 0xf6, 0x78, 0x57, 0x59, 0xae, 0xf5, 0xa4, 0x85, 0xda, 0x30,
	0x65, 0x61, 0x07, 0x33, 0x6c, 0xb5, 0x27, 0xc4, 0x46, 0x6c, 0x6a, 0x0f, 0x40, 0x1d, 0xcd, 0x99,
	0x14, 0x79, 0x35, 0x57, 0x64, 0x3b, 0x2a, 0x72, 0x34, 0x22, 0x29, 0x74, 0x1d, 0x5a, 0xdb, 0xbe,
	0x65, 0x30, 0x7c, 0x74, 0xad, 0x47, 0x55, 0xa1, 0x5d, 0x07, 0x75, 0x83, 0x6e, 0x4b, 0x6b, 0x6d,
	0xdf, 0x20, 0x8e, 0xb1, 0xe3, 0xe0, 0x0f, 0x60, 0x81, 0xb6, 0x01, 0xe7, 0x0a, 0x23, 0x73, 0x65,
	0x69, 0x99, 0xb2, 0x6a, 0xeb, 0xf0, 0xee, 0xcd, 0x59, 0xb9, 0x92, 0x14, 0x72, 0x1e, 0xd0, 0x7d,
	0xcf, 0xdc, 0x3d, 0xe6, 0xca, 0x2e, 0x40, 0x6b, 0xdb, 0x75, 0x8e, 0xf7, 0xbb, 0x08, 0x0b, 0x6b,
	0x81, 0x39, 0x20, 0xfb, 0xc7, 0xf4, 0x45, 0xc3, 0xd0, 0xdc, 0xd8, 0xf3, 0xbd, 0x60, 0x98, 0x2b,
	0xff, 0x9c, 0xfa, 0x65, 0x84, 0xd0, 0x74, 0x58, 0xc8, 0xa5, 0x91, 0x6c, 0x5b, 0x4c, 0xd9, 0xb6,
	0x5e, 0x7d, 0xf7, 0xe6, 0x6c, 0x85, 0x58, 0xe2, 0x5c, 0x8f, 0xe1, 0x4c, 0x61, 0x40, 0xd2, 0xd3,
	0x6b, 0x39, 0xaa, 0x9c, 0x8a, 0xa8, 0x52, 0x18, 0x94, 0x34, 0xf9, 0x36, 0xcc, 0xdc, 0xf7, 0x6c,
	0xe2, 0xfe, 0xdb, 0x5f, 0xf8, 0x2a, 0xb4, 0x1e, 0xca, 0xef, 0x1e, 0xa6, 0x98, 0x7d, 0x08, 0x57,
	0x28, 0x2c, 0xdc, 0x1c, 0x18, 0xae, 0x8d, 0xd3, 0xc8, 0x24, 0x28, 0x49, 0xa4, 0xe4, 0xfa, 0xd9,
	0x82, 0xc9, 0xe8, 0xd5, 0x88, 0x4e, 0x10, 0x19, 0x68, 0x19, 0xe6, 0xcc, 0x30, 0x08, 0xb0, 0xcb,
	0x62, 0x2c, 0xd1, 0xee, 0xe9, 0x5e, 0x7e, 0x99, 0xf3, 0xe0, 0xd6, 0x37, 0x3e, 0x09, 0x46, 0x92,
	0xe6, 0x79, 0xf0, 0x04, 0x4e, 0xac, 0x63, 0x9b, 0xb8, 0x9b, 0x6b, 0x21, 0x1b, 0xc4, 0x4e, 0x1a,
	0xcc, 0xf8, 0x81, 0xb7, 0x4f, 0x2c, 0x1c, 0x3c, 0x48, 0x4b, 0xca, 0xac, 0xa1, 0x2e, 0xd4, 0x03,
	0x6c, 0x91, 0x00, 0x9b, 0x6c, 0xbb, 0xb7, 0x21, 0xcf, 0x39, 0xbc, 0xa4, 0x5d, 0x05, 0x34, 0x0c,
	0x2d, 0x2f, 0x9e, 0x57, 0x2d, 0x71, 0x92, 0xaa, 0xa5, 0xad, 0x5d, 0x07, 0x24, 0x9d, 0x59, 0x18,
	0xb8, 0x7f, 0xe3, 0x34, 0xda, 0xff, 0xa0, 0x99, 0x89, 0x4c, 0x93, 0xc5, 0x27, 0x8a, 0x93, 0xc5,
	0xb6, 0xf6, 0x53, 0x05, 0x66, 0x6f, 0x7a, 0xee, 0x53, 0x62, 0x87, 0x81, 0xd0, 0x03, 0x4e, 0x62,
	0x42, 0x69, 0x98, 0x1c, 0x4c, 0x5a, 0xe8, 0x3a, 0xb4, 0x03, 0x89, 0xd8, 0x67, 0x07, 0x3e, 0xa6,
	0x7d, 0x1a, 0xfa, 0x9c, 0x6e, 0x98, 0x33, 0x64, 0x7c, 0x79, 0xba, 0xb7, 0x18, 0xef, 0x3f, 0xe6,
	0xdb, 0x5b, 0xf1, 0x2e, 0xfa, 0x3f, 0x2c, 0xd1, 0x70, 0xe7, 0x19, 0x36, 0xd9, 0x48, 0xe0, 0xb8,
	0x08, 0x5c, 0x90, 0xdb, 0xb9, 0xb8, 0x4d, 0xf8, 0x4f, 0xac, 0x11, 0x7d, 0x4a, 0x6c, 0x97, 0xb8,
	0x76, 0xdf, 0x70, 0xec, 0xfe, 0xbe, 0xe1, 0x84, 0x19, 0x94, 0x09, 0x81, 0xd2, 0x95, 0x32, 0xb2,
	0x15, 0xb9, 0xae, 0x39, 0xf6, 0x27, 0xc2, 0x31, 0x05, 0xbc, 0x04, 0xf3, 0xa6, 0x63, 0x90, 0xbd,
	0xe1, 0xd8, 0x49, 0x11, 0x3b, 0x17, 0xad, 0xa7, 0xae, 0x27, 0xa1, 0xf6, 0xec, 0xf9, 0x2e, 0xed,
	0x87, 0x01, 0x69, 0x57, 0x45, 0x1f, 0xa6, 0xb8, 0xbd, 0x1d, 0x10, 0x6d, 0x11, 0x5a, 0x5b, 0x38,
	0xd8, 0x27, 0x26, 0xde, 0x62, 0x06, 0xa3, 0x71, 0x9b, 0xb5, 0x4d, 0x68, 0x7e, 0x8c, 0x0d, 0x87,
	0x0d, 0x6e, 0x0e, 0xb0, 0xb9, 0x9b, 0x74, 0x1f, 0xc1, 0xc4, 0x80, 0x31, 0x3f, 0x7a, 0xfc, 0x7a,
	0xe2, 0x9b, 0xf3, 0xcf, 0xda, 0x11, 0x6c, 0xa9, 0xf5, 0x2a, 0xd6, 0x0e, 0x27, 0x3a, 0xbf, 0x11,
	0x2a, 0xdf, 0x8d, 0xc8, 0xd0, 0x08, 0x8c, 0xdf, 0xc3, 0x07, 0x68, 0x1e, 0xc6, 0x43, 0x1a, 0x5f,
	0x38, 0xff, 0xe4, 0x2b, 0x86, 0x63, 0xcb, 0xae, 0xf3, 0x4f, 0xbe, 0xb2, 0xcb, 0x0e, 0xe4, 0xef,
	0x80, 0x7f, 0x8a, 0x15, 0x12, 0x09, 0x10, 0x5f, 0x21, 0x16, 0x9a, 0x01, 0x05, 0xb7, 0x27, 0x85,
	0xad, 0x60, 0x6e, 0xb9, 0xb2, 0x32, 0xc5, 0xd5, 0xae, 0xc0, 0xcc, 0xdd, 0x4f, 0xef, 0x6d, 0x25,
	0x87, 0x3e, 0x03, 0x13, 0xbb, 0xf8, 0x80, 0xb6, 0x95, 0xee, 0xf8, 0x72, 0x7d, 0x75, 0x3a, 0x7a,
	0x5d, 0xee, 0xe1, 0x83, 0x9e, 0x58, 0x5e, 0x7d, 0x35, 0x07, 0x93, 0x9c, 0x68, 0x0f, 0xd0, 0x23,
	0xa8, 0x46, 0x22, 0x8c, 0x9a, 0x59, 0x49, 0x16, 0xac, 0x55, 0x4f, 0x17, 0xe9, 0x74, 0xfc, 0x8a,
	0x69, 0xad, 0xef, 0x7f, 0xf9, 0xe3, 0xc7, 0x4a, 0x43, 0x9b, 0xd6, 0x8d, 0xe8, 0xc9, 0xa2, 0x37,
	0x94, 0xcb, 0xa8, 0x0f, 0x90, 0x4a, 0x1e, 0x5a, 0x1a, 0x15, 0xc1, 0x08, 0xba, 0x5b, 0xa6, 0x8e,
	0x09, 0xfc, 0xa2, 0x80, 0x9f, 0x47, 0x8d, 0x04, 0x5e, 0x7f, 0x41, 0xac, 0x97, 0x08, 0xc3, 0x6c,
	0x46, 0x35, 0x91, 0x1a, 0x41, 0x15, 0x49, 0xa9, 0xba, 0xb8, 0x12, 0x8d, 0x4d, 0x2b, 0xf1, 0x70,
	0xb5, 0x72, 0x8b, 0x8f, 0x60, 0x5a, 0x57, 0x80, 0xab, 0x6a, 0x0e, 0xfc, 0x46, 0xfa, 0x84, 0x7e,
	0x0b, 0xcd, 0x02, 0x79, 0x44, 0xf2, 0xdc, 0xe5, 0x9a, 0xab, 0x5e, 0x3a, 0xc2, 0x23, 0x57, 0xe2,
	0x29, 0x71, 0x8a, 0x05, 0xd4, 0x4c, 0x4f, 0x61, 0x24, 0x99, 0xbe, 0x80, 0xfa, 0x90, 0xa8, 0x22,
	0x39, 0x4e, 0x8c, 0xea, 0x6c, 0x69, 0x8d, 0x12, 0x5d, 0x6d, 0x66, 0x6b, 0xd4, 0xb9, 0xac, 0x21,
	0x03, 0x66, 0x62, 0x31, 0xce, 0x34, 0xb1, 0x40, 0xa0, 0x4b, 0x13, 0x9c, 0x11, 0x09, 0x96, 0xd4,
	0x85, 0x5c, 0x82, 0x50, 0x80, 0xa0, 0x2f, 0xa1, 0x91, 0xd5, 0x71, 0x24, 0x75, 0xae, 0x50, 0xdd,
	0x4b, 0xb3, 0x48, 0x1e, 0x5c, 0xce, 0xf3, 0xc0, 0x81, 0xd9, 0x8c, 0x60, 0xa2, 0x93, 0x85, 0x2a,
	0xca, 0x47, 0x02, 0xf5, 0xdc, 0x11, 0x02, 0x9b, 0xbf, 0x0d, 0x6d, 0x3e, 0x4d, 0x44, 0x44, 0x00,
	0xa7, 0xf5, 0x6d, 0x98, 0x14, 0xea, 0x8b, 0x50, 0x7c, 0x0f, 0xa9, 0x14, 0xab, 0x85, 0xf3, 0xac,
	0xd6, 0x14, 0x78, 0xb3, 0x5a, 0x4d, 0xa7, 0x98, 0x52, 0xe2, 0xb9, 0x1c, 0xe7, 0x21, 0x34, 0x7a,
	0xf8, 0x69, 0x80, 0xe9, 0x60, 0x2b, 0x5a, 0x44, 0x25, 0x75, 0x97, 0x80, 0xce, 0x0b, 0x50, 0x40,
	0x09, 0x28, 0xba, 0x0b, 0xd5, 0xfb, 0x9e, 0xed, 0x85, 0xac, 0x14, 0xa9, 0xac, 0xb3, 0x12, 0xeb,
	0x72, 0x8a, 0x65, 0x42, 0x4b, 0xd6, 0x94, 0x19, 0x11, 0x62, 0x76, 0x14, 0xcd, 0x0d, 0xa5, 0xe8,
	0x4b, 0x02, 0xfd, 0x04, 0x9a, 0xd3, 0xe3, 0x89, 0x40, 0x0f, 0x04, 0xd8, 0x13, 0x68, 0x64, 0x87,
	0x89, 0x98, 0x17, 0x85, 0x23, 0x46, 0x49, 0x1f, 0xd2, 0xc7, 0x27, 0x46, 0xe7, 0xdd, 0xdd, 0x83,
	0x46, 0x76, 0x64, 0x88, 0xa1, 0x0b, 0x07, 0x89, 0xd2, 0xa3, 0x5f, 0x10, 0xe0, 0x5d, 0xb5, 0x93,
	0x23, 0x36, 0x16, 0x28, 0xfd, 0x64, 0xc2, 0xf9, 0x0a, 0x20, 0x9d, 0x0e, 0xe2, 0xb7, 0x6e, 0x64,
	0x14, 0x51, 0xdb, 0xa3, 0x1b, 0xb2, 0x0a, 0xf9, 0x0b, 0x42, 0x0b, 0xba, 0xc7, 0xff, 0x7a, 0xd4,
	0x5f, 0x0c, 0x0f, 0x04, 0x2f, 0xd1, 0x00, 0xea, 0x43, 0x13, 0x41, 0xfc, 0x04, 0x8c, 0x8e, 0x17,
	0xea, 0xc9, 0x82, 0x1d, 0x99, 0xe2, 0xbc, 0x48, 0xd1, 0x41, 0xa7, 0x0b, 0x53, 0xe8, 0x41, 0x04,
	0xfd, 0x79, 0xa2, 0x8a, 0xb9, 0x71, 0xa2, 0x84, 0x52, 0x52, 0x2e, 0x32, 0xce, 0x43, 0x2f, 0xb6,
	0x99, 0x01, 0x59, 0x83, 0x09, 0x2e, 0x4f, 0xa5, 0x60, 0xf2, 0x27, 0x35, 0x2c, 0x61, 0xda, 0xac,
	0xc0, 0x9a, 0x42, 0x93, 0x3a, 0x17, 0x6e, 0xd4, 0x83, 0x99, 0x61, 0xd5, 0x2e, 0x85, 0x92, 0x44,
	0x2d, 0x54, 0xf8, 0x86, 0x80, 0xac, 0xa1, 0xaa, 0x4e, 0x05, 0xc6, 0x26, 0xd4, 0xb9, 0x1f, 0x0e,
	0x8e, 0x86, 0x3c, 0xe6, 0xd7, 0x83, 0x6a, 0xfa, 0x1e, 0x66, 0x01, 0x31, 0x29, 0x7a, 0x04, 0xf5,
	0xa1, 0x11, 0xa2, 0x14, 0x50, 0x5e, 0x56, 0xc1, 0xb4, 0xa1, 0xcd, 0x09, 0xcc, 0x69, 0x34, 0xa5,
	0x0f, 0xc4, 0xee, 0xfa, 0xea, 0xeb, 0xb7, 0x9d, 0xb1, 0x5f, 0xdf, 0x76, 0xc6, 0xde, 0xbf, 0xed,
	0x28, 0xdf, 0x1d, 0x76, 0x94, 0x57, 0x87, 0x1d, 0xe5, 0xe7, 0xc3, 0x8e, 0xf2, 0xfa, 0xb0, 0xa3,
	0xfc, 0x76, 0xd8, 0x51, 0xfe, 0x3c, 0xec, 0x8c, 0xbd, 0x3f, 0xec, 0x28, 0x3f, 0xfc, 0xde, 0x19,
	0xfb, 0x4c, 0xfc, 0xd7, 0x61, 0xa7, 0x2a, 0xf2, 0x5d, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x9d,
	0xdf, 0xd9, 0xeb, 0x91, 0x10, 0x00, 0x00,
}
