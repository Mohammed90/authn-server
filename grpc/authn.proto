syntax = "proto3";

package keratin.authn;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "grpc";
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
// To partially emulate gogoslick
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_registration) = true;

message SignupRequest {
  string username = 1;
  string password = 2;
}

message SignupResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}


message IsUsernameAvailableRequest { string username = 1; }
message IsUsernameAvailableResponse {
  bool result = 1 [ (gogoproto.jsontag) = "result" ];
}

// SignupService is made independant to only be registered if Signup is enabled
service SignupService {
  rpc Signup(SignupRequest) returns (SignupResponse) {
    option (google.api.http) = {
      post : "/accounts",
      body : "*"
    };
  }

  rpc IsUsernameAvailable(IsUsernameAvailableRequest)
      returns (IsUsernameAvailableResponse) {
    option (google.api.http) = {
      get : "/accounts/available"
    };
  }
}

message PasswordResetRequest { string username = 1; }
message PasswordResetResponse {}

service PasswordResetService {
  rpc RequestPasswordReset(PasswordResetRequest)
      returns (PasswordResetResponse) {
    option (google.api.http) = {
      get : "/password/reset"
    };
  }
}

message RequestPasswordlessLoginRequest { string username = 1; }
message RequestPasswordlessLoginResponse {}

message SubmitPasswordlessLoginRequest { string token = 1; }

message SubmitPasswordlessLoginResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

// message SubmitPasswordlessLoginResponseEnvelope {
//   SubmitPasswordlessLoginResponse result = 1;
// }

service PasswordlessService {
  rpc RequestPasswordlessLogin(RequestPasswordlessLoginRequest)
      returns (RequestPasswordlessLoginResponse) {
    option (google.api.http) = {
      get : "/session/token"
    };
  }

  rpc SubmitPasswordlessLogin(SubmitPasswordlessLoginRequest)
      returns (SubmitPasswordlessLoginResponse) {
    option (google.api.http) = {
      post : "/session/token"
      body : "*"
    };
  }
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message LogoutRequest {}
message LogoutResponse {}

message RefreshSessionRequest {}
message RefreshSessionResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message ChangePasswordRequest {
  string password = 1;
  string token = 2;
  string currentPassword = 3;
}

message ChangePasswordResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message HealthCheckRequest {}
message HealthCheckResponse {
  bool http = 1;
  bool db = 2;
  bool redis = 3;
}

service PublicAuthN {

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/session"
      body : "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      delete : "/session"
    };
  }

  rpc RefreshSession(RefreshSessionRequest)
      returns (RefreshSessionResponse) {
    option (google.api.http) = {
      get : "/session/refresh"
    };
  }

  rpc ChangePassword(ChangePasswordRequest)
      returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post : "/password"
      body : "*"
    };
  }

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get : "/health"
    };
  }
}