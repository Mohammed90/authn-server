syntax = "proto3";

package keratin.authn;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "grpc";
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;


message SignupRequest {
  string username = 1;
  string password = 2;
}

message SignupResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message SignupResponseEnvelope { SignupResponse result = 1; }

message IsUsernameAvailableRequest { string username = 1; }
message IsUsernameAvailableResponseEnvelope {
  bool result = 1 [ (gogoproto.jsontag) = "result" ];
}

// SignupService is made independant to only be registered if Signup is enabled
service SignupService {
  rpc Signup(SignupRequest) returns (SignupResponseEnvelope) {
    option (google.api.http) = {
      post : "/accounts",
      body : "*"
    };
  }

  rpc IsUsernameAvailable(IsUsernameAvailableRequest)
      returns (IsUsernameAvailableResponseEnvelope) {
    option (google.api.http) = {
      get : "/accounts/available"
    };
  }
}

message PasswordResetRequest { string username = 1; }
message PasswordResetResponse {}

service PasswordResetService {
  rpc RequestPasswordReset(PasswordResetRequest)
      returns (PasswordResetResponse) {
    option (google.api.http) = {
      get : "/password/reset"
    };
  }
}

message RequestPasswordlessLoginRequest { string username = 1; }
message RequestPasswordlessLoginResponse {}

message SubmitPasswordlessLoginRequest { string token = 1; }

message SubmitPasswordlessLoginResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message SubmitPasswordlessLoginResponseEnvelope {
  SubmitPasswordlessLoginResponse result = 1;
}

service PasswordlessService {
  rpc RequestPasswordlessLogin(RequestPasswordlessLoginRequest)
      returns (RequestPasswordlessLoginResponse) {
    option (google.api.http) = {
      get : "/session/token"
    };
  }

  rpc SubmitPasswordlessLogin(SubmitPasswordlessLoginRequest)
      returns (SubmitPasswordlessLoginResponseEnvelope) {
    option (google.api.http) = {
      post : "/session/token"
      body : "*"
    };
  }
}

// Draft OAuth.
// TODO: Implement OAuth API surface on top of gRPC, if possible. As of now, OAuth is handled outside of gRPC-Gateway.
//
// message BeginOAuthRequest {
//   string providerName = 1;
//   string redirectURI = 2;
// }
// message BeginOAuthResponse { string provider = 1; }
// message OAuthReturnRequest { string providerName = 1; }
// message OAuthReturnResponse { string redirect = 1; }
// service OAuthService {
//   rpc BeginOAuth(BeginOAuthRequest) returns (BeginOAuthResponse) {
//     option (google.api.http) = {
//       get : "/oauth/{providerName}"
//     };
//   }
//   rpc OAuthReturn(OAuthReturnRequest) returns (OAuthReturnResponse) {
//     option (google.api.http) = {
//       get : "/oauth/{providerName}/return"
//     };
//   }
// }

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}

message LoginResponseEnvelope { LoginResponse result = 1; }

message LogoutRequest {}
message LogoutResponse {}

message RefreshSessionRequest {}
message RefreshSessionResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}
message RefreshSessionResponseEnvelope { RefreshSessionResponse result = 1; }

message ChangePasswordRequest {
  string password = 1;
  string token = 2;
  string currentPassword = 3;
}

message ChangePasswordResponse {
  string id_token = 1 [ (gogoproto.jsontag) = "id_token" ];
}
message ChangePasswordResponseEnvelope { ChangePasswordResponse result = 1; }

message HealthCheckRequest {}
message HealthCheckResponse {
  bool http = 1;
  bool db = 2;
  bool redis = 3;
}

service PublicAuthN {

  rpc Login(LoginRequest) returns (LoginResponseEnvelope) {
    option (google.api.http) = {
      post : "/session"
      body : "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      delete : "/session"
    };
  }

  rpc RefreshSession(RefreshSessionRequest)
      returns (RefreshSessionResponseEnvelope) {
    option (google.api.http) = {
      get : "/session/refresh"
    };
  }

  rpc ChangePassword(ChangePasswordRequest)
      returns (ChangePasswordResponseEnvelope) {
    option (google.api.http) = {
      post : "/password"
      body : "*"
    };
  }

  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get : "/health"
    };
  }
}